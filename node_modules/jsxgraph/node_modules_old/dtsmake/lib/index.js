/// <reference path="../typings/tsd.d.ts" />
/**
 * dtsmake command line interface
 */
var program = require("commander");
var dtsmake_1 = require("./dtsmake");
var child_process = require("child_process");
var myPackage = require("../package.json");
var srcFiles = function (val) {
    return val.split(",");
};
var plugins = function (val) {
    return val.split(",");
};
//var distDir:string = "";
var defFiles = function (val) {
    return val.split(",");
};
var extraFiles = function (val) {
    console.log("[EXTRA]" + val);
    return val.split(",");
};
var libDTSs = function (val) {
    return val.split(",");
};
program
    .version(myPackage.version, "-v, --version")
    .option("-s, --src <path>", "[MUST] target javascript file path", srcFiles)
    .option("--dist [value]", "outout d.ts file path. no need `.d.ts` file extension.")
    .option("-n, --n [value]", "module name")
    .option("-p, --plugin <names>", "tern.js plugin. see tern.js server plugin(http://ternjs.net/doc/manual.html#plugins)", plugins)
    .option("-d, --def <paths>", "tern.js def files. DEFAULT:'ecma5'", defFiles)
    .option("-x, --extrafiles <paths>", "sample files for target js lib. help for ternjs type inference.", extraFiles)
    .option("-D, --debug", "debug output mode")
    .option("-A, --voidAsAny", "force output `void` to `any`")
    .option("-i, --interfaceSameNameVar", "export a namespace property same with a interface name", true)
    .option("-a, --annotateTypeInstance", "annotate interface's constructor type as return type instance", true)
    .option("-g, --globalObject [value]", "how to export objects that same name with JS Global Object; \"remove\" or \"wrap\" or \"rename\"; DEFAULT:\"wrap\" ")
    .option("-N, --NodeJSModule", "nodejs module special replace")
    .option("-e, --export", "add export statement in a bottom of d.ts file")
    .option("-S, --exportStyle [value]", "if --outExport true, select export style \"es6\" or \"legacy\"")
    .option("-M, --exportModuleName [value]", 'exporting module name. ex. "EXAMPLE"; usage `import example = require("EXAMPLE");`')
    .option("-l, --lib <paths>", "add referrece path d.ts files. ex. `--lib path/to/ex1.d.ts,path/to/ex2.d.ts`", libDTSs)
    .parse(process.argv);
if (!program.src) {
    console.warn("--src option is MUST.");
    program.help();
}
else if (program.exportStyle && !program.export) {
    console.warn("--exportStyle option needs --export option.");
    process.exit(1);
}
else if (program.exportModuleName && !program.export) {
    console.warn("--exportModuleName option needs --export option.");
    process.exit(1);
}
/**
 *
 * `tern/bin/condense [--name name] [--plugin name]* [--def name]* [+extrafile.js]* [file.js]+`
 */
var genCommand = function (version, path) {
    var s = "";
    var major = Number(version.split(".")[0]);
    //console.log(`genCommand`)
    //const px = `"${__dirname}"`
    //console.log(`p:${path}`)
    if (major >= 3) {
        //for npm >= v3.0
        //const p = require("tern/bin/condense").resolve()
        //console.log(`p:${p}`)
        //throw Error(`hi`)
        s = "node \"" + path + "/tern/bin/condense\"";
    }
    else {
        //for npm < v3.x
        s = "node \"" + __dirname + "/../node_modules/tern/bin/condense\"";
    }
    s += program.n ? " --name " + program.n : "";
    //s += (<any>program).plugin ? ` --plugin ${(<any>program).plugin.join(" ")}` : "";
    if (program.plugin) {
        for (var i in program.plugin) {
            s += " --plugin " + program.plugin[i];
        }
    }
    //s += (<any>program).def ? ` --def ${(<any>program).def.join(" ")}` : "";
    if (program.def) {
        for (var i in program.def) {
            s += " --def " + program.def[i];
        }
    }
    s += program.extrafiles ? " +" + program.extrafiles.join(" +") : "";
    s += " " + program.src.join(" ");
    s += " --no-spans";
    console.log(program.name() + " started.");
    console.log("[CMD]" + s);
    console.log("[SRC]" + program.src.join(" "));
    return s;
};
function npmVersion(cb) {
    child_process.exec("npm -v", { encoding: "utf8", maxBuffer: 2048 }, function (e, stdout, stderr) {
        //if(e)throw e;
        cb(stdout.toString(), e);
    });
}
function getDirNodeModules(cb) {
    child_process.exec("npm root", { encoding: "utf8", maxBuffer: 2048 }, function (e, stdout, stderr) {
        //if(e)throw e;
        cb(stdout.toString().replace(/[\r\n]/g, ""), e);
    });
}
getDirNodeModules(function (path, e) {
    npmVersion(function (version, e2) {
        console.log("v:" + version);
        exec(version, path);
    });
});
/**
 * exec tern/bin/condense
 */
function exec(version, path) {
    var child = child_process.exec(genCommand(version, path), { maxBuffer: 1000000 * 2048 }, function (err, stdout, stderr) {
        if (err) {
            console.warn("[INFO] tern/condense error");
            console.error(err.toString());
            return;
        }
        else if (stderr) {
            console.warn("[INFO] tern/condense error");
            console.error(stderr.toString());
            return;
        }
        else {
            if (program.debug)
                console.log(stdout.toString("utf8"));
            //
            var dg = new dtsmake_1.dtsmake.DTSMake();
            var op = {
                isDebug: program.debug,
                isOutVoidAsAny: program.voidAsAny,
                isAnnotateTypeInstance: program.annotateTypeInstance,
                isExportInterfaceSameNameVar: program.interfaceSameNameVar,
                isNodeJsModule: program.NodeJSModule,
                isOutExport: program.export,
            };
            if (program.exportStyle)
                op.exportStyle = program.exportStyle;
            if (program.exportModuleName)
                op.exportModuleName = program.exportModuleName;
            if (program.globalObject)
                op.globalObject = program.globalObject;
            if (program.lib)
                op.lib = program.lib;
            dg.main(stdout.toString(), program.dist ? program.dist : program.src.toString().replace(/\.[a-z0-9]+$/, ""), op);
        }
    });
}
