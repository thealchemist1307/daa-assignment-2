{
    "project": {
        "name": "JSXGraph",
        "description": "JSXGraph, an API for dynamic geometry with JavaScript",
        "version": "0.99.4",
        "url": "http://jsxgraph.uni-bayreuth.de/docs"
    },
    "files": {
        "src/base/board.js": {
            "name": "src/base/board.js",
            "modules": {},
            "classes": {
                "JXG.Board": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/chart.js": {
            "name": "src/base/chart.js",
            "modules": {},
            "classes": {
                "JXG.Chart": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/circle.js": {
            "name": "src/base/circle.js",
            "modules": {},
            "classes": {
                "JXG.Circle": 1,
                "Circle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/composition.js": {
            "name": "src/base/composition.js",
            "modules": {},
            "classes": {
                "JXG.Composition": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/constants.js": {
            "name": "src/base/constants.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/base/coords.js": {
            "name": "src/base/coords.js",
            "modules": {},
            "classes": {
                "JXG.Coords": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/coordselement.js": {
            "name": "src/base/coordselement.js",
            "modules": {},
            "classes": {
                "JXG.CoordsElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/curve.js": {
            "name": "src/base/curve.js",
            "modules": {},
            "classes": {
                "JXG.Curve": 1,
                "Curve": 1,
                "Functiongraph": 1,
                "Spline": 1,
                "Riemannsum": 1,
                "Tracecurve": 1,
                "Stepfunction": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/element.js": {
            "name": "src/base/element.js",
            "modules": {},
            "classes": {
                "JXG.GeometryElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/group.js": {
            "name": "src/base/group.js",
            "modules": {},
            "classes": {
                "JXG.Group": 1,
                "Group": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/image.js": {
            "name": "src/base/image.js",
            "modules": {},
            "classes": {
                "JXG.Image": 1,
                "Image": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/line.js": {
            "name": "src/base/line.js",
            "modules": {},
            "classes": {
                "JXG.Line": 1,
                "Line": 1,
                "Segment": 1,
                "Arrow": 1,
                "Axis": 1,
                "Tangent": 1,
                "RadicalAxis": 1,
                "PolarLine": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/point.js": {
            "name": "src/base/point.js",
            "modules": {},
            "classes": {
                "JXG.Point": 1,
                "Point": 1,
                "Glider": 1,
                "Intersection": 1,
                "OtherIntersection": 1,
                "PolePoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/polygon.js": {
            "name": "src/base/polygon.js",
            "modules": {},
            "classes": {
                "JXG.Polygon": 1,
                "Polygon": 1,
                "RegularPolygon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/text.js": {
            "name": "src/base/text.js",
            "modules": {},
            "classes": {
                "JXG.Text": 1,
                "Text": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/ticks.js": {
            "name": "src/base/ticks.js",
            "modules": {},
            "classes": {
                "JXG.Ticks": 1,
                "Ticks": 1,
                "Hatch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/transformation.js": {
            "name": "src/base/transformation.js",
            "modules": {},
            "classes": {
                "JXG.Transformation": 1,
                "Transformation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/base/turtle.js": {
            "name": "src/base/turtle.js",
            "modules": {},
            "classes": {
                "JXG.Turtle": 1,
                "Turtle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/element/arc.js": {
            "name": "src/element/arc.js",
            "modules": {},
            "classes": {
                "Arc": 1,
                "Semicircle": 1,
                "CircumcircleArc": 1,
                "MinorArc": 1,
                "MajorArc": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/element/button.js": {
            "name": "src/element/button.js",
            "modules": {},
            "classes": {
                "Button": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/element/checkbox.js": {
            "name": "src/element/checkbox.js",
            "modules": {},
            "classes": {
                "Checkbox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/element/composition.js": {
            "name": "src/element/composition.js",
            "modules": {},
            "classes": {
                "Orthogonalprojection": 1,
                "Perpendicular": 1,
                "PerpendicularPoint": 1,
                "PerpendicularSegment": 1,
                "Midpoint": 1,
                "Parallelpoint": 1,
                "Parallel": 1,
                "Arrowparallel": 1,
                "Normal": 1,
                "Bisector": 1,
                "Bisectorlines": 1,
                "Circumcenter": 1,
                "Incenter": 1,
                "Circumcircle": 1,
                "Incircle": 1,
                "Reflection": 1,
                "Mirrorpoint": 1,
                "Integral": 1,
                "Grid": 1,
                "Inequality": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/element/conic.js": {
            "name": "src/element/conic.js",
            "modules": {},
            "classes": {
                "Ellipse": 1,
                "Hyperbola": 1,
                "Parabola": 1,
                "Conic": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/element/input.js": {
            "name": "src/element/input.js",
            "modules": {},
            "classes": {
                "Input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/element/locus.js": {
            "name": "src/element/locus.js",
            "modules": {},
            "classes": {
                "Locus": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/element/measure.js": {
            "name": "src/element/measure.js",
            "modules": {},
            "classes": {
                "Tapemeasure": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/element/sector.js": {
            "name": "src/element/sector.js",
            "modules": {},
            "classes": {
                "Sector": 1,
                "CircumcircleSector": 1,
                "MinorSector": 1,
                "Angle": 1,
                "NonReflexAngle": 1,
                "ReflexAngle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/element/slider.js": {
            "name": "src/element/slider.js",
            "modules": {},
            "classes": {
                "Slider": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/element/slopetriangle.js": {
            "name": "src/element/slopetriangle.js",
            "modules": {},
            "classes": {
                "Slopetriangle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/bst.js": {
            "name": "src/math/bst.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/math/complex.js": {
            "name": "src/math/complex.js",
            "modules": {},
            "classes": {
                "JXG.Complex": 1,
                "JXG.C": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/geometry.js": {
            "name": "src/math/geometry.js",
            "modules": {},
            "classes": {
                "JXG.Math.Geometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/math.js": {
            "name": "src/math/math.js",
            "modules": {},
            "classes": {
                "JXG.Math": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/numerics.js": {
            "name": "src/math/numerics.js",
            "modules": {},
            "classes": {
                "JXG.Math.Numerics": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/poly.js": {
            "name": "src/math/poly.js",
            "modules": {},
            "classes": {
                "JXG.Math.Poly": 1,
                "JXG.Math.Poly.Ring": 1,
                "JXG.Math.Poly.Monomial": 1,
                "JXG.Math.Poly.Polynomial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/qdt.js": {
            "name": "src/math/qdt.js",
            "modules": {},
            "classes": {
                "JXG.Math.Quadtree": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/statistics.js": {
            "name": "src/math/statistics.js",
            "modules": {},
            "classes": {
                "JXG.Math.Statistics": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/symbolic.js": {
            "name": "src/math/symbolic.js",
            "modules": {},
            "classes": {
                "JXG.Math.Symbolic": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/parser/datasource.js": {
            "name": "src/parser/datasource.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/parser/geonext.js": {
            "name": "src/parser/geonext.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/parser/jessiecode.js": {
            "name": "src/parser/jessiecode.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/parser/jessiescript.js": {
            "name": "src/parser/jessiescript.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/reader/file.js": {
            "name": "src/reader/file.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/reader/geogebra.js": {
            "name": "src/reader/geogebra.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/reader/geonext.js": {
            "name": "src/reader/geonext.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/reader/intergeo.js": {
            "name": "src/reader/intergeo.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/reader/sketch.js": {
            "name": "src/reader/sketch.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/renderer/abstract.js": {
            "name": "src/renderer/abstract.js",
            "modules": {},
            "classes": {
                "JXG.AbstractRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/renderer/canvas.js": {
            "name": "src/renderer/canvas.js",
            "modules": {},
            "classes": {
                "JXG.CanvasRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/renderer/no.js": {
            "name": "src/renderer/no.js",
            "modules": {},
            "classes": {
                "JXG.NoRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/renderer/svg.js": {
            "name": "src/renderer/svg.js",
            "modules": {},
            "classes": {
                "JXG.SVGRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/renderer/vml.js": {
            "name": "src/renderer/vml.js",
            "modules": {},
            "classes": {
                "JXG.VMLRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/server/server.js": {
            "name": "src/server/server.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "JXG.Server namespace holding functions to load JXG server modules.": 1
            }
        },
        "src/utils/base64.js": {
            "name": "src/utils/base64.js",
            "modules": {},
            "classes": {
                "JXG.Util.Base64": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/color.js": {
            "name": "src/utils/color.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/dump.js": {
            "name": "src/utils/dump.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/encoding.js": {
            "name": "src/utils/encoding.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/env.js": {
            "name": "src/utils/env.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/event.js": {
            "name": "src/utils/event.js",
            "modules": {},
            "classes": {
                "EventEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils/expect.js": {
            "name": "src/utils/expect.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/type.js": {
            "name": "src/utils/type.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/uuid.js": {
            "name": "src/utils/uuid.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/xml.js": {
            "name": "src/utils/xml.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/utils/zip.js": {
            "name": "src/utils/zip.js",
            "modules": {},
            "classes": {
                "JXG.Util.Unzip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/jsxgraph.js": {
            "name": "src/jsxgraph.js",
            "modules": {},
            "classes": {
                "JXG.JSXGraph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/jxg.js": {
            "name": "src/jxg.js",
            "modules": {
                "JXG": 1
            },
            "classes": {},
            "fors": {
                "JXG": 1,
                "registerReader": 1
            },
            "namespaces": {}
        },
        "src/loadjsxgraph.js": {
            "name": "src/loadjsxgraph.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/options.js": {
            "name": "src/options.js",
            "modules": {},
            "classes": {
                "JXG.Options": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "JXG": {
            "name": "JXG",
            "submodules": {},
            "classes": {
                "JXG.Board": 1,
                "JXG.Chart": 1,
                "JXG.Circle": 1,
                "Circle": 1,
                "JXG.Composition": 1,
                "JXG.Coords": 1,
                "JXG.CoordsElement": 1,
                "JXG.Curve": 1,
                "Curve": 1,
                "Functiongraph": 1,
                "Spline": 1,
                "Riemannsum": 1,
                "Tracecurve": 1,
                "Stepfunction": 1,
                "JXG.GeometryElement": 1,
                "JXG.Group": 1,
                "Group": 1,
                "JXG.Image": 1,
                "Image": 1,
                "JXG.Line": 1,
                "Line": 1,
                "Segment": 1,
                "Arrow": 1,
                "Axis": 1,
                "Tangent": 1,
                "RadicalAxis": 1,
                "PolarLine": 1,
                "JXG.Point": 1,
                "Point": 1,
                "Glider": 1,
                "Intersection": 1,
                "OtherIntersection": 1,
                "PolePoint": 1,
                "JXG.Polygon": 1,
                "Polygon": 1,
                "RegularPolygon": 1,
                "JXG.Text": 1,
                "Text": 1,
                "JXG.Ticks": 1,
                "Ticks": 1,
                "Hatch": 1,
                "JXG.Transformation": 1,
                "Transformation": 1,
                "JXG.Turtle": 1,
                "Turtle": 1,
                "Arc": 1,
                "Semicircle": 1,
                "CircumcircleArc": 1,
                "MinorArc": 1,
                "MajorArc": 1,
                "Button": 1,
                "Checkbox": 1,
                "Orthogonalprojection": 1,
                "Perpendicular": 1,
                "PerpendicularPoint": 1,
                "PerpendicularSegment": 1,
                "Midpoint": 1,
                "Parallelpoint": 1,
                "Parallel": 1,
                "Arrowparallel": 1,
                "Normal": 1,
                "Bisector": 1,
                "Bisectorlines": 1,
                "Circumcenter": 1,
                "Incenter": 1,
                "Circumcircle": 1,
                "Incircle": 1,
                "Reflection": 1,
                "Mirrorpoint": 1,
                "Integral": 1,
                "Grid": 1,
                "Inequality": 1,
                "Ellipse": 1,
                "Hyperbola": 1,
                "Parabola": 1,
                "Conic": 1,
                "Input": 1,
                "Locus": 1,
                "Tapemeasure": 1,
                "Sector": 1,
                "CircumcircleSector": 1,
                "MinorSector": 1,
                "Angle": 1,
                "NonReflexAngle": 1,
                "ReflexAngle": 1,
                "Slider": 1,
                "Slopetriangle": 1,
                "JXG.Complex": 1,
                "JXG.C": 1,
                "JXG.Math.Geometry": 1,
                "JXG.Math": 1,
                "JXG.Math.Numerics": 1,
                "JXG.Math.Poly": 1,
                "JXG.Math.Poly.Ring": 1,
                "JXG.Math.Poly.Monomial": 1,
                "JXG.Math.Poly.Polynomial": 1,
                "JXG.Math.Quadtree": 1,
                "JXG.Math.Statistics": 1,
                "JXG.Math.Symbolic": 1,
                "JXG.AbstractRenderer": 1,
                "JXG.CanvasRenderer": 1,
                "JXG.NoRenderer": 1,
                "JXG.SVGRenderer": 1,
                "JXG.VMLRenderer": 1,
                "JXG.Util.Base64": 1,
                "EventEmitter": 1,
                "JXG.Util.Unzip": 1,
                "JXG.JSXGraph": 1,
                "JXG": 1,
                "registerReader": 1,
                "JXG.Options": 1
            },
            "fors": {
                "JXG": 1,
                "registerReader": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/options.js",
            "line": 50,
            "fileoverview": "The JSXGraph object is defined in this file. JXG.JSXGraph controls all boards.\nIt has methods to create, save, load and free boards. Additionally some helper functions are\ndefined in this file directly in the JXG namespace."
        }
    },
    "classes": {
        "JXG.Board": {
            "name": "JXG.Board",
            "shortname": "JXG.Board",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/board.js",
            "line": 75,
            "description": "Constructs a new Board object.\nJXG.Board controls all properties and methods used to manage a geonext board like managing geometric\nelements, managing mouse and touch events, etc. You probably don't want to use this constructor directly.\nPlease use {@link JXG.JSXGraph#initBoard} to initialize a board.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "container",
                    "description": "The id or reference of the HTML DOM element the board is drawn in. This is usually a HTML div.",
                    "type": "String"
                },
                {
                    "name": "renderer",
                    "description": "The reference of a renderer.",
                    "type": "JXG.AbstractRenderer"
                },
                {
                    "name": "id",
                    "description": "Unique identifier for the board, may be an empty string or null or even undefined.",
                    "type": "String"
                },
                {
                    "name": "origin",
                    "description": "The coordinates where the origin is placed, in user coordinates.",
                    "type": "JXG.Coords"
                },
                {
                    "name": "zoomX",
                    "description": "Zoom factor in x-axis direction",
                    "type": "Number"
                },
                {
                    "name": "zoomY",
                    "description": "Zoom factor in y-axis direction",
                    "type": "Number"
                },
                {
                    "name": "unitX",
                    "description": "Units in x-axis direction",
                    "type": "Number"
                },
                {
                    "name": "unitY",
                    "description": "Units in y-axis direction",
                    "type": "Number"
                },
                {
                    "name": "canvasWidth",
                    "description": "The width of canvas",
                    "type": "Number"
                },
                {
                    "name": "canvasHeight",
                    "description": "The height of canvas",
                    "type": "Number"
                },
                {
                    "name": "attributes",
                    "description": "The attributes object given to {@link JXG.JSXGraph#initBoard}",
                    "type": "Object"
                }
            ],
            "borrows": "JXG.EventEmitter#eventHandlers as this.eventHandlers"
        },
        "JXG.Chart": {
            "name": "JXG.Chart",
            "shortname": "JXG.Chart",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/chart.js",
            "line": 70,
            "description": "Chart plotting",
            "is_constructor": 1
        },
        "JXG.Circle": {
            "name": "JXG.Circle",
            "shortname": "JXG.Circle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/circle.js",
            "line": 62,
            "description": "Creates a new circle object. Do not use this constructor to create a circle. Use {@link JXG.Board#create} with\ntype {@link Circle} instead.\n\nA circle consists of all points with a given distance from one point. This point is called center, the distance is called radius.\nA circle can be constructed by providing a center and a point on the circle or a center and a radius (given as a number, function,\nline, or circle).",
            "is_constructor": 1,
            "extends": "JXG.GeometryElement",
            "params": [
                {
                    "name": "board",
                    "description": "The board the new circle is drawn on.",
                    "type": "JXG.Board"
                },
                {
                    "name": "method",
                    "description": "Can be\n\n  * **'twoPoints'** which means the circle is defined by its center and a point on the circle.\n  * **'pointRadius'** which means the circle is defined by its center and its radius in user units\n  * **'pointLine'** which means the circle is defined by its center and its radius given by the distance from the startpoint and the endpoint of the line\n  * **'pointCircle'** which means the circle is defined by its center and its radius given by the radius of another circle\n\nThe parameters p1, p2 and radius must be set according to this method parameter.",
                    "type": "String"
                },
                {
                    "name": "par1",
                    "description": "center of the circle.",
                    "type": "JXG.Point"
                },
                {
                    "name": "par2",
                    "description": "Can be\n\n  * a point on the circle if method is 'twoPoints'\n  * a line if the method is 'pointLine'\n  * a circle if the method is 'pointCircle'",
                    "type": "JXG.Point|JXG.Line|JXG.Circle"
                },
                {
                    "name": "attributes",
                    "description": "",
                    "type": "Object"
                }
            ],
            "references": [
                "JXG.Board#generateName"
            ]
        },
        "Circle": {
            "name": "Circle",
            "shortname": "Circle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/circle.js",
            "line": 751,
            "description": "This element is used to provide a constructor for a circle.\n\nA circle consists of all points with a given distance from one point. This point is called center, the distance is called radius.\nA circle can be constructed by providing a center and a point on the circle or a center and a radius (given as a number, function,\nline, or circle).",
            "pseudo": true,
            "extends": "JXG.Circle",
            "is_constructor": 1,
            "type": "JXG.Circle",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "center,radius",
                    "description": "The center must be given as a {@link JXG.Point}, see {@link JXG.providePoints}, but the radius can be given\nas a number (which will create a circle with a fixed radius), another {@link JXG.Point}, a {@link JXG.Line} (the distance of start and end point of the\nline will determine the radius), or another {@link JXG.Circle}.",
                    "type": "JXG.Point_number,JXG.Point,JXG.Line,JXG.Circle"
                }
            ],
            "example": [
                "\n    // Create a circle providing two points\n    var p1 = board.create('point', [2.0, 2.0]),\n        p2 = board.create('point', [2.0, 0.0]),\n        c1 = board.create('circle', [p1, p2]);\n\n    // Create another circle using the above circle\n    var p3 = board.create('point', [3.0, 2.0]),\n        c2 = board.create('circle', [p3, c1]);\n<div id=\"5f304d31-ef20-4a8e-9c0e-ea1a2b6c79e0\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function() {\n  var board = JXG.JSXGraph.initBoard('5f304d31-ef20-4a8e-9c0e-ea1a2b6c79e0', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n      p1 = board.create('point', [2.0, 2.0]),\n      p2 = board.create('point', [2.0, 0.0]),\n      c1 = board.create('circle', [p1, p2]),\n      p3 = board.create('point', [3.0, 2.0]),\n      c2 = board.create('circle', [p3, c1]);\n})();\n</script>",
                "\n    // Create a circle providing two points\n    var p1 = board.create('point', [2.0, 2.0]),\n        c1 = board.create('circle', [p1, 3]);\n\n    // Create another circle using the above circle\n    var c2 = board.create('circle', [\n               function() { return [p1.X(), p1.Y() + 1];},\n               function() { return c1.Radius(); }\n            ]);\n<div id=\"54165f60-93b9-441d-8979-ac5d0f193020\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function() {\nvar board = JXG.JSXGraph.initBoard('54165f60-93b9-441d-8979-ac5d0f193020', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\nvar p1 = board.create('point', [2.0, 2.0]);\nvar c1 = board.create('circle', [p1, 3]);\nvar c2 = board.create('circle', [function() { return [p1.X(), p1.Y() + 1];}, function() { return c1.Radius(); }]);\n})();\n</script>"
            ]
        },
        "JXG.Composition": {
            "name": "JXG.Composition",
            "shortname": "JXG.Composition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/composition.js",
            "line": 45,
            "description": "A composition is a simple container that manages none or more {@link JXG.GeometryElement}s.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "elements",
                    "description": "A list of elements with a descriptive name for the element as the key and a reference\nto the element as the value of every list entry. The name is used to access the element later on.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    var p1 = board.create('point', [1, 2]),\n        p2 = board.create('point', [2, 3]),\n        c = new JXG.Composition({\n            start: p1,\n            end: p2\n        });\n\n    // moves p1 to [3, 3]\n    c.start.moveTo([3, 3]);"
            ]
        },
        "JXG.Coords": {
            "name": "JXG.Coords",
            "shortname": "JXG.Coords",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/coords.js",
            "line": 54,
            "description": "This is the Coordinates class.\nConstructs a new Coordinates object.\nAll members a coordinate has to provide\nare defined here.",
            "params": [
                {
                    "name": "method",
                    "description": "The type of coordinates given by the user. Accepted values are <b>COORDS_BY_SCREEN</b> and <b>COORDS_BY_USER</b>.",
                    "type": "Number"
                },
                {
                    "name": "coordinates",
                    "description": "An array of affine coordinates.",
                    "type": "Array"
                },
                {
                    "name": "board",
                    "description": "A reference to a board.",
                    "type": "JXG.Board"
                },
                {
                    "name": "emitter",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "borrows": "JXG.EventEmitter#eventHandlers as this.eventHandlers",
            "is_constructor": 1
        },
        "JXG.CoordsElement": {
            "name": "JXG.CoordsElement",
            "shortname": "JXG.CoordsElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/coordselement.js",
            "line": 61,
            "description": "An element containing coords is the basic geometric element. Based on points lines and circles can be constructed which can be intersected\nwhich in turn are points again which can be used to construct new lines, circles, polygons, etc. This class holds methods for\nall kind of coordinate elements like points, texts and images.\nCreates a new coords element object. Do not use this constructor to create an element.",
            "extends": "JXG.GeometryElement",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "coordinates",
                    "description": "An array with the affine user coordinates of the point.\n{@link JXG.Options#elements}, and - optionally - a name and an id.",
                    "type": "Array"
                }
            ]
        },
        "JXG.Curve": {
            "name": "JXG.Curve",
            "shortname": "JXG.Curve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/curve.js",
            "line": 62,
            "description": "Creates a new curve object. Do not use this constructor to create a curve. Use {@link JXG.Board#create} with\n Curves are the common object for function graphs, parametric curves, polar curves, and data plots.\n Use type {@link Curve}, or {@link Functiongraph} instead.",
            "extends": "JXG.GeometryElement",
            "params": [
                {
                    "name": "board",
                    "description": "The board the new curve is drawn on.",
                    "type": "String|JXG.Board"
                },
                {
                    "name": "parents",
                    "description": "defining terms An array with the functon terms or the data points of the curve.",
                    "type": "Array"
                },
                {
                    "name": "attributes",
                    "description": "Defines the visual appearance of the curve.",
                    "type": "Object"
                }
            ],
            "references": [
                "JXG.Board#generateName",
                "JXG.Board#addCurve"
            ]
        },
        "Curve": {
            "name": "Curve",
            "shortname": "Curve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/curve.js",
            "line": 1506,
            "description": "This element is used to provide a constructor for curve, which is just a wrapper for element {@link Curve}.\n A curve is a mapping from R to R^2. t mapsto (x(t),y(t)). The graph is drawn for t in the interval [a,b].\nThe following types of curves can be plotted:\n * parametric curves: t mapsto (x(t),y(t)), where x() and y() are univariate functions.\n  * polar curves: curves commonly written with polar equations like spirals and cardioids.\n  * data plots: plot line segments through a given list of coordinates.",
            "pseudo": true,
            "extends": "JXG.Curve",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "params": [
                {
                    "name": "x,y,a_,b_",
                    "description": "Parent elements for Parametric Curves.\n   <p>\n   x describes the x-coordinate of the curve. It may be a function term in one variable, e.g. x(t).\n   In case of x being of type number, x(t) is set to a constant function.\n   In case x being of type function. This function evaluates at the values of the array.\n   <p>\n   y describes the y-coordinate of the curve. In case of a number, y(t) is set to the constant function\n   returning this number.\n  Further parameters are an optional number or function for the left interval border a,\n   and an optional number or function for the right interval border b.\n  Default values are a=-10 and b=10.",
                    "type": "Function,number_function,number_function,number_function,number"
                },
                {
                    "name": "x,y",
                    "description": "Parent elements for Data Plots.\n  <p>\n  x and y are arrays contining the x and y coordinates of the data points which are connected by\n  line segments. The individual entries of x and y may also be functions.\n  In case of x being an array the curve type is data plot, regardless of the second parameter and\n  if additionally the second parameter y is a function term the data plot evaluates.",
                    "type": "Array_array,function,number"
                },
                {
                    "name": "r,offset_,a_,b_",
                    "description": "Parent elements for Polar Curves.\n  <p>\n  The first parameter is a function term r(phi) describing the polar curve.\n  <p>\n  The second parameter is the offset of the curve. It has to be\n  an array containing numbers or functions describing the offset. Default value is the origin [0,0].\n  <p>\n  Further parameters are an optional number or function for the left interval border a,\n  and an optional number or function for the right interval border b.\n  <p>\n  Default values are a=-10 and b=10.",
                    "type": "Function_array,function,number_function,number_function,number"
                }
            ],
            "references": [
                "JXG.Curve"
            ],
            "example": [
                "\n    // Parametric curve\n     // Create a curve of the form (t-sin(t), 1-cos(t), i.e.\n     // the cycloid curve.\n     var graph = board.create('curve',\n                        [function(t){ return t-Math.sin(t);},\n                         function(t){ return 1-Math.cos(t);},\n                         0, 2*Math.PI]\n                     );\n<div id=\"af9f818b-f3b6-4c4d-8c4c-e4a4078b726d\" style=\"width: 300px; height: 300px;\"></div>\n <script type=\"text/javascript\">\n (function(){\n   var board = JXG.JSXGraph.initBoard('af9f818b-f3b6-4c4d-8c4c-e4a4078b726d', {boundingbox: [-1, 5, 7, -1], axis: true, showcopyright: false, shownavigation: false});\n   var graph1 = board.create('curve', [function(t){ return t-Math.sin(t);},function(t){ return 1-Math.cos(t);},0, 2*Math.PI]);\n })();\n </script>",
                "\n    // Data plots\n     // Connect a set of points given by coordinates with dashed line segments.\n     // The x- and y-coordinates of the points are given in two separate\n     // arrays.\n     var x = [0,1,2,3,4,5,6,7,8,9];\n     var y = [9.2,1.3,7.2,-1.2,4.0,5.3,0.2,6.5,1.1,0.0];\n     var graph = board.create('curve', [x,y], {dash:2});\n<div id=\"7dcbb00e-b6ff-481d-b4a8-887f5d8c6a83\" style=\"width: 300px; height: 300px;\"></div>\n <script type=\"text/javascript\">\n (function(){\n   var board = JXG.JSXGraph.initBoard('7dcbb00e-b6ff-481d-b4a8-887f5d8c6a83', {boundingbox: [-1,10,10,-1], axis: true, showcopyright: false, shownavigation: false});\n   var x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n   var y = [9.2, 1.3, 7.2, -1.2, 4.0, 5.3, 0.2, 6.5, 1.1, 0.0];\n   var graph3 = board.create('curve', [x,y], {dash:2});\n })();\n </script>",
                "\n    // Polar plot\n     // Create a curve with the equation r(phi)= a*(1+phi), i.e.\n     // a cardioid.\n     var a = board.create('slider',[[0,2],[2,2],[0,1,2]]);\n     var graph = board.create('curve',\n                        [function(phi){ return a.Value()*(1-Math.cos(phi));},\n                         [1,0],\n                         0, 2*Math.PI]\n                     );\n <div id=\"d0bc7a2a-8124-45ca-a6e7-142321a8f8c2\" style=\"width: 300px; height: 300px;\"></div>\n <script type=\"text/javascript\">\n (function(){\n   var board = JXG.JSXGraph.initBoard('d0bc7a2a-8124-45ca-a6e7-142321a8f8c2', {boundingbox: [-3,3,3,-3], axis: true, showcopyright: false, shownavigation: false});\n   var a = board.create('slider',[[0,2],[2,2],[0,1,2]]);\n   var graph2 = board.create('curve', [function(phi){ return a.Value()*(1-Math.cos(phi));}, [1,0], 0, 2*Math.PI]);\n })();\n </script>",
                "\n     // Draggable Bezier curve\n      var col, p, c;\n      col = 'blue';\n      p = [];\n      p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n      p.push(board.create('point',[1, 2.5 ], {size: 5, strokeColor:col, fillColor:col}));\n      p.push(board.create('point',[-1, -2.5 ], {size: 5, strokeColor:col, fillColor:col}));\n      p.push(board.create('point',[2, -2], {size: 5, strokeColor:col, fillColor:col}));\n     c = board.create('curve', JXG.Math.Numerics.bezier(p),\n              {strokeColor:'red', name:\"curve\", strokeWidth:5, fixed: false}); // Draggable curve\n      c.addParents(p);\n <div id=\"7bcc6280-f6eb-433e-8281-c837c3387849\" style=\"width: 300px; height: 300px;\"></div>\n <script type=\"text/javascript\">\n (function(){\n  var board, col, p, c;\n  board = JXG.JSXGraph.initBoard('7bcc6280-f6eb-433e-8281-c837c3387849', {boundingbox: [-3,3,3,-3], axis: true, showcopyright: false, shownavigation: false});\n  col = 'blue';\n  p = [];\n  p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n  p.push(board.create('point',[1, 2.5 ], {size: 5, strokeColor:col, fillColor:col}));\n  p.push(board.create('point',[-1, -2.5 ], {size: 5, strokeColor:col, fillColor:col}));\n  p.push(board.create('point',[2, -2], {size: 5, strokeColor:col, fillColor:col}));\n  c = board.create('curve', JXG.Math.Numerics.bezier(p),\n              {strokeColor:'red', name:\"curve\", strokeWidth:5, fixed: false}); // Draggable curve\n  c.addParents(p);\n })();\n </script>\n"
            ]
        },
        "Functiongraph": {
            "name": "Functiongraph",
            "shortname": "Functiongraph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/curve.js",
            "line": 1652,
            "description": "This element is used to provide a constructor for functiongraph, which is just a wrapper for element {@link Curve} with {@link JXG.Curve#X()}\nset to x. The graph is drawn for x in the interval [a,b].",
            "pseudo": true,
            "extends": "JXG.Curve",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "params": [
                {
                    "name": "f,a_,b_",
                    "description": "Parent\nelements are a function term f(x) describing the function graph.\n<p>\nFurther, an optional number or function for the left interval border a,\nand an optional number or function for the right interval border b.\n<p>\nDefault values are a=-10 and b=10.",
                    "type": "Function_number,function_number,function"
                }
            ],
            "references": [
                "JXG.Curve"
            ],
            "example": [
                "\n    // Create a function graph for f(x) = 0.5*x*x-2*x\n    var graph = board.create('functiongraph',\n                       [function(x){ return 0.5*x*x-2*x;}, -2, 4]\n                    );\n<div id=\"efd432b5-23a3-4846-ac5b-b471e668b437\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('efd432b5-23a3-4846-ac5b-b471e668b437', {boundingbox: [-3, 7, 5, -3], axis: true, showcopyright: false, shownavigation: false});\n  var graph = board.create('functiongraph', [function(x){ return 0.5*x*x-2*x;}, -2, 4]);\n})();\n</script>",
                "\n    // Create a function graph for f(x) = 0.5*x*x-2*x with variable interval\n    var s = board.create('slider',[[0,4],[3,4],[-2,4,5]]);\n    var graph = board.create('functiongraph',\n                       [function(x){ return 0.5*x*x-2*x;},\n                        -2,\n                        function(){return s.Value();}]\n                    );\n<div id=\"4a203a84-bde5-4371-ad56-44619690bb50\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('4a203a84-bde5-4371-ad56-44619690bb50', {boundingbox: [-3, 7, 5, -3], axis: true, showcopyright: false, shownavigation: false});\n  var s = board.create('slider',[[0,4],[3,4],[-2,4,5]]);\n  var graph = board.create('functiongraph', [function(x){ return 0.5*x*x-2*x;}, -2, function(){return s.Value();}]);\n})();\n</script>"
            ]
        },
        "Spline": {
            "name": "Spline",
            "shortname": "Spline",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/curve.js",
            "line": 1711,
            "description": "Create a dynamic spline interpolated curve given by sample points p_1 to p_n.",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "params": [
                {
                    "name": "board",
                    "description": "Reference to the board the spline is drawn on.",
                    "type": "JXG.Board"
                },
                {
                    "name": "parents",
                    "description": "Array of points the spline interpolates",
                    "type": "Array"
                },
                {
                    "name": "attributes",
                    "description": "Define color, width, ... of the spline",
                    "type": "Object"
                }
            ]
        },
        "Riemannsum": {
            "name": "Riemannsum",
            "shortname": "Riemannsum",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/curve.js",
            "line": 1793,
            "description": "This element is used to provide a constructor for Riemann sums, which is realized as a special curve.\nThe returned element has the method Value() which returns the sum of the areas of the bars.",
            "pseudo": true,
            "extends": "JXG.Curve",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "params": [
                {
                    "name": "f,n,type_,a_,b_",
                    "description": "Parent elements of Riemannsum are a\n Either a function term f(x) describing the function graph which is filled by the Riemann bars, or\n an array consisting of two functions and the area between is filled by the Riemann bars.\n <p>\n n determines the number of bars, it is either a fixed number or a function.\n <p>\n type is a string or function returning one of the values:  'left', 'right', 'middle', 'lower', 'upper', 'random', 'simpson', or 'trapezodial'.\n Default value is 'left'.\n <p>\n Further parameters are an optional number or function for the left interval border a,\n and an optional number or function for the right interval border b.\n <p>\n Default values are a=-10 and b=10.",
                    "type": "Function,array_number,function_string,function_function,number_function,number"
                }
            ],
            "references": [
                "JXG.Curve"
            ],
            "example": [
                "\n\n    // Create Riemann sums for f(x) = 0.5*x*x-2*x.\n    var s = board.create('slider',[[0,4],[3,4],[0,4,10]],{snapWidth:1});\n    var f = function(x) { return 0.5*x*x-2*x; };\n    var r = board.create('riemannsum',\n              [f, function(){return s.Value();}, 'upper', -2, 5],\n              {fillOpacity:0.4}\n              );\n    var g = board.create('functiongraph',[f, -2, 5]);\n    var t = board.create('text',[-1,-1, function(){ return 'Sum=' + r.Value().toFixed(4); }]);\n<div id=\"940f40cc-2015-420d-9191-c5d83de988cf\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('940f40cc-2015-420d-9191-c5d83de988cf', {boundingbox: [-3, 7, 5, -3], axis: true, showcopyright: false, shownavigation: false});\n  var f = function(x) { return 0.5*x*x-2*x; };\n  var s = board.create('slider',[[0,4],[3,4],[0,4,10]],{snapWidth:1});\n  var r = board.create('riemannsum', [f, function(){return s.Value();}, 'upper', -2, 5], {fillOpacity:0.4});\n  var g = board.create('functiongraph', [f, -2, 5]);\n  var t = board.create('text',[-1,-1, function(){ return 'Sum=' + r.Value().toFixed(4); }]);\n})();\n</script>",
                "\n    // Riemann sum between two functions\n    var s = board.create('slider',[[0,4],[3,4],[0,4,10]],{snapWidth:1});\n    var g = function(x) { return 0.5*x*x-2*x; };\n    var f = function(x) { return -x*(x-4); };\n    var r = board.create('riemannsum',\n              [[g,f], function(){return s.Value();}, 'lower', 0, 4],\n              {fillOpacity:0.4}\n              );\n    var g = board.create('functiongraph',[f, -2, 5]);\n    var t = board.create('text',[-1,-1, function(){ return 'Sum=' + r.Value().toFixed(4); }]);\n<div id=\"f9a7ba38-b50f-4a32-a873-2f3bf9caee79\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('f9a7ba38-b50f-4a32-a873-2f3bf9caee79', {boundingbox: [-3, 7, 5, -3], axis: true, showcopyright: false, shownavigation: false});\n  var s = board.create('slider',[[0,4],[3,4],[0,4,10]],{snapWidth:1});\n  var g = function(x) { return 0.5*x*x-2*x; };\n  var f = function(x) { return -x*(x-4); };\n  var r = board.create('riemannsum',\n              [[g,f], function(){return s.Value();}, 'lower', 0, 4],\n              {fillOpacity:0.4}\n              );\n  var g = board.create('functiongraph',[f, -2, 5]);\n  var t = board.create('text',[-1,-1, function(){ return 'Sum=' + r.Value().toFixed(4); }]);\n})();\n</script>"
            ]
        },
        "Tracecurve": {
            "name": "Tracecurve",
            "shortname": "Tracecurve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/curve.js",
            "line": 1910,
            "description": "This element is used to provide a constructor for trace curve (simple locus curve),\nwhich is realized as a special curve.",
            "pseudo": true,
            "extends": "JXG.Curve",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "params": [
                {
                    "name": "Parent",
                    "description": "elements of Tracecurve are a\n glider point and a point whose locus is traced.",
                    "type": "Point,Point"
                }
            ],
            "references": [
                "JXG.Curve"
            ],
            "example": [
                "\n    // Create trace curve.\n    var c1 = board.create('circle',[[0, 0], [2, 0]]),\n         p1 = board.create('point',[-3, 1]),\n         g1 = board.create('glider',[2, 1, c1]),\n         s1 = board.create('segment',[g1, p1]),\n         p2 = board.create('midpoint',[s1]),\n         curve = board.create('tracecurve', [g1, p2]);\n\n<div id=\"5749fb7d-04fc-44d2-973e-45c1951e29ad\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('5749fb7d-04fc-44d2-973e-45c1951e29ad', {boundingbox: [-4, 4, 4, -4], axis: false, showcopyright: false, shownavigation: false});\n  var c1 = board.create('circle',[[0, 0], [2, 0]]),\n      p1 = board.create('point',[-3, 1]),\n      g1 = board.create('glider',[2, 1, c1]),\n      s1 = board.create('segment',[g1, p1]),\n      p2 = board.create('midpoint',[s1]),\n      curve = board.create('tracecurve', [g1, p2]);\n})();\n</script>"
            ]
        },
        "Stepfunction": {
            "name": "Stepfunction",
            "shortname": "Stepfunction",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/curve.js",
            "line": 2058,
            "description": "This element is used to provide a constructor for step function, which is realized as a special curve.\n\nIn case the data points should be updated after creation time,\nthey can be accessed by `curve.xterm` and `curve.yterm`.",
            "pseudo": true,
            "extends": "JXG.Curve",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "params": [
                {
                    "name": "Parent",
                    "description": "elements of Stepfunction are two arrays containing the coordinates.",
                    "type": "Array,Array|Function"
                }
            ],
            "references": [
                "JXG.Curve"
            ],
            "example": [
                "\n\n    // Create step function.\n    var curve = board.create('stepfunction', [[0,1,2,3,4,5], [1,3,0,2,2,1]]);\n\n<div id=\"32342ec9-ad17-4339-8a97-ff23dc34f51a\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('32342ec9-ad17-4339-8a97-ff23dc34f51a', {boundingbox: [-1, 5, 6, -2], axis: true, showcopyright: false, shownavigation: false});\n  var curve = board.create('stepfunction', [[0,1,2,3,4,5], [1,3,0,2,2,1]]);\n})();\n</script>"
            ]
        },
        "JXG.GeometryElement": {
            "name": "JXG.GeometryElement",
            "shortname": "JXG.GeometryElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/element.js",
            "line": 54,
            "description": "Constructs a new GeometryElement object.\nThis is the basic class for geometry elements like points, circles and lines.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "board",
                    "description": "Reference to the board the element is constructed on.",
                    "type": "JXG.Board"
                },
                {
                    "name": "attributes",
                    "description": "Hash of attributes and their values.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Element type (a <tt>JXG.OBJECT_TYPE_</tt> value).",
                    "type": "Number"
                },
                {
                    "name": "oclass",
                    "description": "The element's class (a <tt>JXG.OBJECT_CLASS_</tt> value).",
                    "type": "Number"
                }
            ],
            "borrows": "JXG.EventEmitter#eventHandlers as this.eventHandlers"
        },
        "JXG.Group": {
            "name": "JXG.Group",
            "shortname": "JXG.Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/group.js",
            "line": 53,
            "description": "Creates a new instance of Group.\nIn this class all group management is done.",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                },
                {
                    "name": "id",
                    "description": "Unique identifier for this object.  If null or an empty string is given,\nan unique id will be generated by Board",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Not necessarily unique name, displayed on the board.  If null or an\nempty string is given, an unique name will be generated.",
                    "type": "String"
                },
                {
                    "name": "objects",
                    "description": "Array of points to add to this group.",
                    "type": "Array"
                },
                {
                    "name": "attributes",
                    "description": "Defines the visual appearance of the group.",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        },
        "Group": {
            "name": "Group",
            "shortname": "Group",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/group.js",
            "line": 874,
            "description": "This element combines a given set of {@link JXG.Point} elements to a\ngroup. The elements of the group and dependent elements can be translated, rotated and scaled by\ndragging one of the group elements.",
            "pseudo": true,
            "extends": "JXG.Group",
            "is_constructor": 1,
            "type": "JXG.Group",
            "params": [
                {
                    "name": "board",
                    "description": "The board the points are on.",
                    "type": "JXG.Board"
                },
                {
                    "name": "parents",
                    "description": "Array of points to group.",
                    "type": "Array"
                },
                {
                    "name": "attributes",
                    "description": "Visual properties (unused).",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "JXG.Group"
            },
            "example": [
                "\n\n    // Create some free points. e.g. A, B, C, D\n    // Create a group\n\n    var p, col, g;\n    col = 'blue';\n    p = [];\n    p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n    p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n    p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:col, fillColor:col}));\n    p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n    g = board.create('group', p);\n\n <div id=\"a2204533-db91-4af9-b720-70394de4d367\" style=\"width: 400px; height: 300px;\"></div>\n <script type=\"text/javascript\">\n(function () {\nvar board, p, col, g;\nboard = JXG.JSXGraph.initBoard('a2204533-db91-4af9-b720-70394de4d367', {boundingbox:[-5,5,5,-5], keepaspectratio:true, axis:true, showcopyright: false});\ncol = 'blue';\np = [];\np.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\np.push(board.create('point',[2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\np.push(board.create('point',[2, 1 ], {size: 5, strokeColor:col, fillColor:col}));\np.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\ng = board.create('group', p);\n})();\n </script><",
                "\n\n    // Create some free points. e.g. A, B, C, D\n    // Create a group\n    // If the points define a polygon and the polygon has the attribute hasInnerPoints:true,\n    // the polygon can be dragged around.\n\n    var p, col, pol, g;\n    col = 'blue';\n    p = [];\n    p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n    p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n    p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:col, fillColor:col}));\n    p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n\n    pol = board.create('polygon', p, {hasInnerPoints: true});\n    g = board.create('group', p);\n\n <div id=\"781b5564-a671-4327-81c6-de915c8f924e\" style=\"width: 400px; height: 300px;\"></div>\n <script type=\"text/javascript\">\n(function () {\nvar board, p, col, pol, g;\nboard = JXG.JSXGraph.initBoard('781b5564-a671-4327-81c6-de915c8f924e', {boundingbox:[-5,5,5,-5], keepaspectratio:true, axis:true, showcopyright: false});\ncol = 'blue';\np = [];\np.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\np.push(board.create('point',[2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\np.push(board.create('point',[2, 1 ], {size: 5, strokeColor:col, fillColor:col}));\np.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\npol = board.create('polygon', p, {hasInnerPoints: true});\ng = board.create('group', p);\n})();\n </script>",
                "\n\n    // Allow rotations:\n    // Define a center of rotation and declare points of the group as \"rotation points\".\n\n    var p, col, pol, g;\n    col = 'blue';\n    p = [];\n    p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n    p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n    p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n    p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n\n    pol = board.create('polygon', p, {hasInnerPoints: true});\n    g = board.create('group', p);\n    g.setRotationCenter(p[0]);\n    g.setRotationPoints([p[1], p[2]]);\n\n <div id=\"f0491b62-b377-42cb-b55c-4ef5374b39fc\" style=\"width: 400px; height: 300px;\"></div>\n <script type=\"text/javascript\">\n(function () {\nvar board, p, col, pol, g;\nboard = JXG.JSXGraph.initBoard('f0491b62-b377-42cb-b55c-4ef5374b39fc', {boundingbox:[-5,5,5,-5], keepaspectratio:true, axis:true, showcopyright: false});\ncol = 'blue';\np = [];\np.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\np.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\np.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\np.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\npol = board.create('polygon', p, {hasInnerPoints: true});\ng = board.create('group', p);\ng.setRotationCenter(p[0]);\ng.setRotationPoints([p[1], p[2]]);\n})();\n </script>",
                "\n\n    // Allow rotations:\n    // As rotation center, arbitrary points, coordinate arrays,\n    // or functions returning coordinate arrays can be given.\n    // Another possibility is to use the predefined string 'centroid'.\n\n    // The methods to define the rotation points can be chained.\n\n    var p, col, pol, g;\n    col = 'blue';\n    p = [];\n    p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n    p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n    p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n    p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n\n    pol = board.create('polygon', p, {hasInnerPoints: true});\n    g = board.create('group', p).setRotationCenter('centroid').setRotationPoints([p[1], p[2]]);\n\n <div id=\"8785b099-a75e-4769-bfd8-47dd4376fe27\" style=\"width: 400px; height: 300px;\"></div>\n <script type=\"text/javascript\">\n(function () {\nvar board, p, col, pol, g;\nboard = JXG.JSXGraph.initBoard('8785b099-a75e-4769-bfd8-47dd4376fe27', {boundingbox:[-5,5,5,-5], keepaspectratio:true, axis:true, showcopyright: false});\ncol = 'blue';\np = [];\np.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\np.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\np.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\np.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\npol = board.create('polygon', p, {hasInnerPoints: true});\ng = board.create('group', p).setRotationCenter('centroid').setRotationPoints([p[1], p[2]]);\n})();\n </script>",
                "\n\n    // Allow scaling:\n    // As for rotation one can declare points of the group to trigger a scaling operation.\n    // For this, one has to define a scaleCenter, in analogy to rotations.\n\n    // Here, the yellow  point enables scaling, the red point a rotation.\n\n    var p, col, pol, g;\n    col = 'blue';\n    p = [];\n    p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n    p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'yellow', fillColor:'yellow'}));\n    p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n    p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n\n    pol = board.create('polygon', p, {hasInnerPoints: true});\n    g = board.create('group', p).setRotationCenter('centroid').setRotationPoints([p[2]]);\n    g.setScaleCenter(p[0]).setScalePoints(p[1]);\n\n <div id=\"c3ca436b-e4fc-4de5-bab4-09790140c675\" style=\"width: 400px; height: 300px;\"></div>\n <script type=\"text/javascript\">\n(function () {\nvar board, p, col, pol, g;\nboard = JXG.JSXGraph.initBoard('c3ca436b-e4fc-4de5-bab4-09790140c675', {boundingbox:[-5,5,5,-5], keepaspectratio:true, axis:true, showcopyright: false});\ncol = 'blue';\np = [];\np.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\np.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'yellow', fillColor:'yellow'}));\np.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\np.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\npol = board.create('polygon', p, {hasInnerPoints: true});\ng = board.create('group', p).setRotationCenter('centroid').setRotationPoints([p[2]]);\ng.setScaleCenter(p[0]).setScalePoints(p[1]);\n})();\n </script>",
                "\n\n    // Allow Translations:\n    // By default, every point of a group triggers a translation.\n    // There may be situations, when this is not wanted.\n\n    // In this example, E triggers nothing, but itself is rotation center\n    // and is translated, if other points are moved around.\n\n    var p, q, col, pol, g;\n    col = 'blue';\n    p = [];\n    p.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\n    p.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'yellow', fillColor:'yellow'}));\n    p.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\n    p.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\n    q = board.create('point',[0, 0], {size: 5, strokeColor:col, fillColor:col});\n\n    pol = board.create('polygon', p, {hasInnerPoints: true});\n    g = board.create('group', p.concat(q)).setRotationCenter('centroid').setRotationPoints([p[2]]);\n    g.setScaleCenter(p[0]).setScalePoints(p[1]);\n    g.removeTranslationPoint(q);\n\n <div id=\"d19b800a-57a9-4303-b49a-8f5b7a5488f0\" style=\"width: 400px; height: 300px;\"></div>\n <script type=\"text/javascript\">\n(function () {\nvar board, p, q, col, pol, g;\nboard = JXG.JSXGraph.initBoard('d19b800a-57a9-4303-b49a-8f5b7a5488f0', {boundingbox:[-5,5,5,-5], keepaspectratio:true, axis:true, showcopyright: false});\ncol = 'blue';\np = [];\np.push(board.create('point',[-2, -1 ], {size: 5, strokeColor:col, fillColor:col}));\np.push(board.create('point',[2, -1 ], {size: 5, strokeColor:'yellow', fillColor:'yellow'}));\np.push(board.create('point',[2, 1 ], {size: 5, strokeColor:'red', fillColor:'red'}));\np.push(board.create('point',[-2, 1], {size: 5, strokeColor:col, fillColor:col}));\nq = board.create('point',[0, 0], {size: 5, strokeColor:col, fillColor:col});\npol = board.create('polygon', p, {hasInnerPoints: true});\ng = board.create('group', p.concat(q)).setRotationCenter('centroid').setRotationPoints([p[2]]);\ng.setScaleCenter(p[0]).setScalePoints(p[1]);\ng.removeTranslationPoint(q);\n})();\n </script>"
            ]
        },
        "JXG.Image": {
            "name": "JXG.Image",
            "shortname": "JXG.Image",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/image.js",
            "line": 56,
            "description": "Construct and handle images\n\nCreates a new image object. Do not use this constructor to create a image. Use {@link JXG.Board#create} with\ntype {@link Image} instead.\n\nThe coordinates can be relative to the coordinates of an element\ngiven in {@link JXG.Options#text.anchor}.\n\nThe image can be supplied as an URL or an base64 encoded inline image\nlike \"data:image/png;base64, /9j/4AAQSkZJRgA...\" or a function returning\nan URL: function(){ return 'xxx.png; }.",
            "extends": "JXG.CoordsElement",
            "params": [
                {
                    "name": "board",
                    "description": "The board the new text is drawn on.",
                    "type": "string|JXG.Board"
                },
                {
                    "name": "coordinates",
                    "description": "An array with the user coordinates of the text.",
                    "type": "Array"
                },
                {
                    "name": "attributes",
                    "description": "An object containing visual and - optionally - a name and an id.",
                    "type": "Object"
                },
                {
                    "name": "url",
                    "description": "An URL string or a function returning an URL string.",
                    "type": "String|function"
                },
                {
                    "name": "size",
                    "description": "Array containing width and height of the image in user coordinates.",
                    "type": "Array"
                }
            ]
        },
        "Image": {
            "name": "Image",
            "shortname": "Image",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/image.js",
            "line": 298,
            "description": "Displays an image.",
            "pseudo": true,
            "type": "JXG.Image",
            "extends": "JXG.Image",
            "is_constructor": 1,
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "url,coords,size",
                    "description": "url defines the location of the image data. The array coords contains the user coordinates\nof the lower left corner of the image.\n  It can consist of two or three elements of type number, a string containing a GEONE<sub>x</sub>T\n  constraint, or a function which takes no parameter and returns a number. Every element determines one coordinate. If a coordinate is\n  given by a number, the number determines the initial position of a free image. If given by a string or a function that coordinate will be constrained\n  that means the user won't be able to change the image's position directly by mouse because it will be calculated automatically depending on the string\n  or the function's return value. If two parent elements are given the coordinates will be interpreted as 2D affine Euclidean coordinates, if three such\n  parent elements are given they will be interpreted as homogeneous coordinates.\n<p>\nThe array size defines the image's width and height in user coordinates.",
                    "type": "String,function_Array_Array"
                }
            ],
            "example": [
                "\n\n    var im = board.create('image', ['http://jsxgraph.uni-bayreuth.de/jsxgraph/distrib/images/uccellino.jpg', [-3,-2], [3,3]]);\n\n<div id=\"9850cda0-7ea0-4750-981c-68bacf9cca57\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('9850cda0-7ea0-4750-981c-68bacf9cca57', {boundingbox: [-4, 4, 4, -4], axis: true, showcopyright: false, shownavigation: false});\n  var im = board.create('image', ['http://jsxgraph.uni-bayreuth.de/distrib/images/uccellino.jpg', [-3,-2],[3,3]]);\n})();\n</script>"
            ]
        },
        "JXG.Line": {
            "name": "JXG.Line",
            "shortname": "JXG.Line",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/line.js",
            "line": 65,
            "description": "The Line class is a basic class for all kind of line objects, e.g. line, arrow, and axis. It is usually defined by two points and can\nbe intersected with some other geometry elements.\nCreates a new basic line object. Do not use this constructor to create a line. Use {@link JXG.Board#create} with\ntype {@link Line}, {@link Arrow}, or {@link Axis} instead.",
            "is_constructor": 1,
            "extends": "JXG.GeometryElement",
            "params": [
                {
                    "name": "board",
                    "description": "The board the new line is drawn on.",
                    "type": "String,JXG.Board"
                },
                {
                    "name": "p1",
                    "description": "Startpoint of the line.",
                    "type": "Point"
                },
                {
                    "name": "p2",
                    "description": "Endpoint of the line.",
                    "type": "Point"
                },
                {
                    "name": "id",
                    "description": "Unique identifier for this object. If null or an empty string is given,\nan unique id will be generated by Board",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Not necessarily unique name. If null or an\nempty string is given, an unique name will be generated.",
                    "type": "String"
                },
                {
                    "name": "withLabel",
                    "description": "construct label, yes/no",
                    "type": "Boolean"
                },
                {
                    "name": "layer",
                    "description": "display layer [0-9]",
                    "type": "Number"
                }
            ],
            "references": [
                "JXG.Board#generateName"
            ]
        },
        "Line": {
            "name": "Line",
            "shortname": "Line",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/line.js",
            "line": 963,
            "description": "This element is used to provide a constructor for a general line. A general line is given by two points. By setting additional properties\na line can be used as an arrow and/or axis.",
            "pseudo": true,
            "extends": "JXG.Line",
            "is_constructor": 1,
            "type": "JXG.Line",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "point1,point2",
                    "description": "Parent elements can be two elements either of type {@link JXG.Point} or array of\nnumbers describing the coordinates of a point. In the latter case the point will be constructed automatically as a fixed invisible point.\nIt is possible to provide a function returning an array or a point, instead of providing an array or a point.",
                    "type": "JXG.Point,array,function_JXG.Point,array,function"
                },
                {
                    "name": "c,a,b",
                    "description": "A line can also be created providing three numbers. The line is then described by\nthe set of solutions of the equation <tt>a*x+b*y+c*z = 0</tt>. It is possible to provide three functions returning numbers, too.",
                    "type": "Number,function_Number,function_Number,function"
                },
                {
                    "name": "f",
                    "description": "This function must return an array containing three numbers forming the line's homogeneous coordinates.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n    // Create a line using point and coordinates/\n    // The second point will be fixed and invisible.\n    var p1 = board.create('point', [4.5, 2.0]);\n    var l1 = board.create('line', [p1, [1.0, 1.0]]);\n<div id=\"c0ae3461-10c4-4d39-b9be-81d74759d122\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var glex1_board = JXG.JSXGraph.initBoard('c0ae3461-10c4-4d39-b9be-81d74759d122', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false});\n  var glex1_p1 = glex1_board.create('point', [4.5, 2.0]);\n  var glex1_l1 = glex1_board.create('line', [glex1_p1, [1.0, 1.0]]);\n})();\n</script>",
                "\n    // Create a line using three coordinates\n    var l1 = board.create('line', [1.0, -2.0, 3.0]);\n<div id=\"cf45e462-f964-4ba4-be3a-c9db94e2593f\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var glex2_board = JXG.JSXGraph.initBoard('cf45e462-f964-4ba4-be3a-c9db94e2593f', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false});\n  var glex2_l1 = glex2_board.create('line', [1.0, -2.0, 3.0]);\n})();\n</script>"
            ]
        },
        "Segment": {
            "name": "Segment",
            "shortname": "Segment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/line.js",
            "line": 1198,
            "description": "This element is used to provide a constructor for a segment.\nIt's strictly spoken just a wrapper for element {@link Line} with {@link JXG.Line#straightFirst}\nand {@link JXG.Line#straightLast} properties set to false. If there is a third variable then the\nsegment has a fixed length (which may be a function, too).",
            "pseudo": true,
            "extends": "JXG.Line",
            "is_constructor": 1,
            "type": "JXG.Line",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "point1,point2",
                    "description": "Parent elements can be two elements either of type {@link JXG.Point}\nor array of numbers describing the\ncoordinates of a point. In the latter case the point will be constructed automatically as a fixed invisible point.",
                    "type": "JXG.Point,array_JXG.Point,array"
                },
                {
                    "name": "length",
                    "description": "(optional) The points are adapted - if possible - such that their distance\nhas a this value.",
                    "type": "Number,function"
                }
            ],
            "references": [
                "Line"
            ],
            "example": [
                "\n    // Create a segment providing two points.\n    var p1 = board.create('point', [4.5, 2.0]);\n    var p2 = board.create('point', [1.0, 1.0]);\n    var l1 = board.create('segment', [p1, p2]);\n<div id=\"d70e6aac-7c93-4525-a94c-a1820fa38e2f\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var slex1_board = JXG.JSXGraph.initBoard('d70e6aac-7c93-4525-a94c-a1820fa38e2f', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false});\n  var slex1_p1 = slex1_board.create('point', [4.5, 2.0]);\n  var slex1_p2 = slex1_board.create('point', [1.0, 1.0]);\n  var slex1_l1 = slex1_board.create('segment', [slex1_p1, slex1_p2]);\n })();\n</script>",
                "\n    // Create a segment providing two points.\n    var p1 = board.create('point', [4.0, 1.0]);\n    var p2 = board.create('point', [1.0, 1.0]);\n    var l1 = board.create('segment', [p1, p2]);\n    var p3 = board.create('point', [4.0, 2.0]);\n    var p4 = board.create('point', [1.0, 2.0]);\n    var l2 = board.create('segment', [p3, p4, 3]);\n    var p5 = board.create('point', [4.0, 3.0]);\n    var p6 = board.create('point', [1.0, 4.0]);\n    var l3 = board.create('segment', [p5, p6, function(){ return l1.L();} ]);\n<div id=\"617336ba-0705-4b2b-a236-c87c28ef25be\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var slex2_board = JXG.JSXGraph.initBoard('617336ba-0705-4b2b-a236-c87c28ef25be', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false});\n  var slex2_p1 = slex2_board.create('point', [4.0, 1.0]);\n  var slex2_p2 = slex2_board.create('point', [1.0, 1.0]);\n  var slex2_l1 = slex2_board.create('segment', [slex2_p1, slex2_p2]);\n  var slex2_p3 = slex2_board.create('point', [4.0, 2.0]);\n  var slex2_p4 = slex2_board.create('point', [1.0, 2.0]);\n  var slex2_l2 = slex2_board.create('segment', [slex2_p3, slex2_p4, 3]);\n  var slex2_p5 = slex2_board.create('point', [4.0, 2.0]);\n  var slex2_p6 = slex2_board.create('point', [1.0, 2.0]);\n  var slex2_l3 = slex2_board.create('segment', [slex2_p5, slex2_p6, function(){ return slex2_l1.L();}]);\n})();\n</script>\n"
            ]
        },
        "Arrow": {
            "name": "Arrow",
            "shortname": "Arrow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/line.js",
            "line": 1299,
            "description": "This element is used to provide a constructor for arrow, which is just a wrapper for element {@link Line} with {@link JXG.Line#straightFirst}\nand {@link JXG.Line#straightLast} properties set to false and {@link JXG.Line#lastArrow} set to true.",
            "pseudo": true,
            "extends": "JXG.Line",
            "is_constructor": 1,
            "type": "JXG.Line",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "point1,point2",
                    "description": "Parent elements can be two elements either of type {@link JXG.Point} or array of numbers describing the\ncoordinates of a point. In the latter case the point will be constructed automatically as a fixed invisible point.",
                    "type": "JXG.Point,array_JXG.Point,array"
                },
                {
                    "name": "a,b,c",
                    "description": "A line can also be created providing three numbers. The line is then described by the set of solutions\nof the equation <tt>a*x+b*y+c*z = 0</tt>.",
                    "type": "Number_Number_Number"
                }
            ],
            "references": [
                "Line"
            ],
            "example": [
                "\n    // Create an arrow providing two points.\n    var p1 = board.create('point', [4.5, 2.0]);\n    var p2 = board.create('point', [1.0, 1.0]);\n    var l1 = board.create('arrow', [p1, p2]);\n<div id=\"1d26bd22-7d6d-4018-b164-4c8bc8d22ccf\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var alex1_board = JXG.JSXGraph.initBoard('1d26bd22-7d6d-4018-b164-4c8bc8d22ccf', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false});\n  var alex1_p1 = alex1_board.create('point', [4.5, 2.0]);\n  var alex1_p2 = alex1_board.create('point', [1.0, 1.0]);\n  var alex1_l1 = alex1_board.create('arrow', [alex1_p1, alex1_p2]);\n})();\n</script>"
            ]
        },
        "Axis": {
            "name": "Axis",
            "shortname": "Axis",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/line.js",
            "line": 1344,
            "description": "This element is used to provide a constructor for an axis. It's strictly spoken just a wrapper for element {@link Line} with {@link JXG.Line#straightFirst}\nand {@link JXG.Line#straightLast} properties set to true. Additionally {@link JXG.Line#lastArrow} is set to true and default {@link Ticks} will be created.",
            "pseudo": true,
            "extends": "JXG.Line",
            "is_constructor": 1,
            "type": "JXG.Line",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "point1,point2",
                    "description": "Parent elements can be two elements either of type {@link JXG.Point} or array of numbers describing the\ncoordinates of a point. In the latter case the point will be constructed automatically as a fixed invisible point.",
                    "type": "JXG.Point,array_JXG.Point,array"
                },
                {
                    "name": "a,b,c",
                    "description": "A line can also be created providing three numbers. The line is then described by the set of solutions\nof the equation <tt>a*x+b*y+c*z = 0</tt>.",
                    "type": "Number_Number_Number"
                }
            ],
            "example": [
                "\n    // Create an axis providing two coord pairs.\n    var l1 = board.create('axis', [[0.0, 1.0], [1.0, 1.3]]);\n<div id=\"4f414733-624c-42e4-855c-11f5530383ae\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var axex1_board = JXG.JSXGraph.initBoard('4f414733-624c-42e4-855c-11f5530383ae', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false});\n  var axex1_l1 = axex1_board.create('axis', [[0.0, 1.0], [1.0, 1.3]]);\n })();\n</script>"
            ]
        },
        "Tangent": {
            "name": "Tangent",
            "shortname": "Tangent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/line.js",
            "line": 1420,
            "description": "With the element tangent the slope of a line, circle, or curve in a certain point can be visualized. A tangent is always constructed\nby a glider on a line, circle, or curve and describes the tangent in the glider point on that line, circle, or curve.",
            "pseudo": true,
            "extends": "JXG.Line",
            "is_constructor": 1,
            "type": "JXG.Line",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "g",
                    "description": "A glider on a line, circle, or curve.",
                    "type": "Glider"
                }
            ],
            "example": [
                "\n    // Create a tangent providing a glider on a function graph\n    var c1 = board.create('curve', [function(t){return t},function(t){return t*t*t;}]);\n    var g1 = board.create('glider', [0.6, 1.2, c1]);\n    var t1 = board.create('tangent', [g1]);\n<div id=\"7b7233a0-f363-47dd-9df5-4018d0d17a98\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('7b7233a0-f363-47dd-9df5-4018d0d17a98', {boundingbox: [-6, 6, 6, -6], axis: true, showcopyright: false, shownavigation: false});\n  var c1 = board.create('curve', [function(t){return t},function(t){return t*t*t;}]);\n  var g1 = board.create('glider', [0.6, 1.2, c1]);\n  var t1 = board.create('tangent', [g1]);\n})();\n</script>"
            ]
        },
        "RadicalAxis": {
            "name": "RadicalAxis",
            "shortname": "RadicalAxis",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/line.js",
            "line": 1653,
            "description": "This element is used to provide a constructor for the radical axis with respect to two circles with distinct centers.\nThe angular bisector of the polar lines of the circle centers with respect to the other circle is always the radical axis.\nThe radical axis passes through the intersection points when the circles intersect.\nWhen a circle about the midpoint of circle centers, passing through the circle centers, intersects the circles, the polar lines pass through those intersection points.",
            "pseudo": true,
            "extends": "JXG.Line",
            "is_constructor": 1,
            "type": "JXG.Line",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "circle",
                    "description": "Circle one of the two respective circles.",
                    "type": "JXG.Circle"
                },
                {
                    "name": "circle",
                    "description": "Circle the other of the two respective circles.",
                    "type": "JXG.Circle"
                }
            ],
            "example": [
                "\n    // Create the radical axis line with respect to two circles\n    var board = JXG.JSXGraph.initBoard('7b7233a0-f363-47dd-9df5-5018d0d17a98', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n    var p1 = board.create('point', [2, 3]);\n    var p2 = board.create('point', [1, 4]);\n    var c1 = board.create('circle', [p1, p2]);\n    var p3 = board.create('point', [6, 5]);\n    var p4 = board.create('point', [8, 6]);\n    var c2 = board.create('circle', [p3, p4]);\n    var r1 = board.create('radicalaxis', [c1, c2]);\n<div id='7b7233a0-f363-47dd-9df5-5018d0d17a98' class='jxgbox' style='width:400px; height:400px;'></div>\n<script type='text/javascript'>\n(function(){\n  var board = JXG.JSXGraph.initBoard('7b7233a0-f363-47dd-9df5-5018d0d17a98', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [2, 3]);\n  var p2 = board.create('point', [1, 4]);\n  var c1 = board.create('circle', [p1, p2]);\n  var p3 = board.create('point', [6, 5]);\n  var p4 = board.create('point', [8, 6]);\n  var c2 = board.create('circle', [p3, p4]);\n  var r1 = board.create('radicalaxis', [c1, c2]);\n})();\n</script>"
            ]
        },
        "PolarLine": {
            "name": "PolarLine",
            "shortname": "PolarLine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/line.js",
            "line": 1722,
            "description": "This element is used to provide a constructor for the polar line of a point with respect to a conic or a circle.\n\nThe polar line is the unique reciprocal relationship of a point with respect to a conic.\nThe lines through the intersections of a conic and the polar line of a point with respect to that conic and through that point are tangent to the conic.\nA point on a conic has the polar line of that point with respect to that conic as the tangent line to that conic at that point.\nSee {@link http://en.wikipedia.org/wiki/Pole_and_polar} for more information on pole and polar.",
            "pseudo": true,
            "extends": "JXG.Line",
            "is_constructor": 1,
            "type": "JXG.Line",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "el1,el2",
                    "description": "or",
                    "type": "JXG.Conic,JXG.Circle_JXG.Point"
                },
                {
                    "name": "el1,el2",
                    "description": "The result will be the polar line of the point with respect to the conic or the circle.",
                    "type": "JXG.Point_JXG.Conic,JXG.Circle"
                }
            ],
            "example": [
                "\n    // Create the polar line of a point with respect to a conic\n    var p1 = board.create('point', [-1, 2]);\n    var p2 = board.create('point', [ 1, 4]);\n    var p3 = board.create('point', [-1,-2]);\n    var p4 = board.create('point', [ 0, 0]);\n    var p5 = board.create('point', [ 4,-2]);\n    var c1 = board.create('conic',[p1,p2,p3,p4,p5]);\n    var p6 = board.create('point', [-1, 1]);\n    var l1 = board.create('polarline', [c1, p6]);\n<div id='7b7233a0-f363-47dd-9df5-6018d0d17a98' class='jxgbox' style='width:400px; height:400px;'></div>\n<script type='text/javascript'>\n(function(){\nvar board = JXG.JSXGraph.initBoard('7b7233a0-f363-47dd-9df5-6018d0d17a98', {boundingbox: [-3, 5, 5, -3], axis: true, showcopyright: false, shownavigation: false});\nvar p1 = board.create('point', [-1, 2]);\nvar p2 = board.create('point', [ 1, 4]);\nvar p3 = board.create('point', [-1,-2]);\nvar p4 = board.create('point', [ 0, 0]);\nvar p5 = board.create('point', [ 4,-2]);\nvar c1 = board.create('conic',[p1,p2,p3,p4,p5]);\nvar p6 = board.create('point', [-1, 1]);\nvar l1 = board.create('polarline', [c1, p6]);\n})();\n</script>",
                "\n    // Create the polar line of a point with respect to a circle.\n    var p1 = board.create('point', [ 1, 1]);\n    var p2 = board.create('point', [ 2, 3]);\n    var c1 = board.create('circle',[p1,p2]);\n    var p3 = board.create('point', [ 6, 6]);\n    var l1 = board.create('polarline', [c1, p3]);\n<div id='7b7233a0-f363-47dd-9df5-7018d0d17a98' class='jxgbox' style='width:400px; height:400px;'></div>\n<script type='text/javascript'>\n(function(){\nvar board = JXG.JSXGraph.initBoard('7b7233a0-f363-47dd-9df5-7018d0d17a98', {boundingbox: [-3, 7, 7, -3], axis: true, showcopyright: false, shownavigation: false});\nvar p1 = board.create('point', [ 1, 1]);\nvar p2 = board.create('point', [ 2, 3]);\nvar c1 = board.create('circle',[p1,p2]);\nvar p3 = board.create('point', [ 6, 6]);\nvar l1 = board.create('polarline', [c1, p3]);\n})();\n</script>"
            ]
        },
        "JXG.Point": {
            "name": "JXG.Point",
            "shortname": "JXG.Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/point.js",
            "line": 64,
            "description": "A point is the basic geometric element. Based on points lines and circles can be constructed which can be intersected\nwhich in turn are points again which can be used to construct new lines, circles, polygons, etc. This class holds methods for\nall kind of points like free points, gliders, and intersection points.\n\nCreates a new point object. Do not use this constructor to create a point. Use {@link JXG.Board#create} with\ntype {@link Point}, {@link Glider}, or {@link Intersection} instead.",
            "extends": "JXG.CoordsElement",
            "params": [
                {
                    "name": "board",
                    "description": "The board the new point is drawn on.",
                    "type": "string|JXG.Board"
                },
                {
                    "name": "coordinates",
                    "description": "An array with the user coordinates of the point.",
                    "type": "Array"
                },
                {
                    "name": "attributes",
                    "description": "An object containing visual properties like in {@link JXG.Options#point} and\n{@link JXG.Options#elements}, and optional a name and an id.",
                    "type": "Object"
                }
            ],
            "references": [
                "JXG.Board#generateName"
            ]
        },
        "Point": {
            "name": "Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/point.js",
            "line": 332,
            "description": "This element is used to provide a constructor for a general point. A free point is created if the given parent elements are all numbers\nand the property fixed is not set or set to false. If one or more parent elements is not a number but a string containing a GEONE<sub>x</sub>T\nconstraint or a function the point will be considered as constrained). That means that the user won't be able to change the point's\nposition directly.",
            "pseudo": true,
            "extends": "JXG.Point",
            "is_constructor": 1,
            "type": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "z_,x,y",
                    "description": "Parent elements can be two or three elements of type number, a string containing a GEONE<sub>x</sub>T\nconstraint, or a function which takes no parameter and returns a number. Every parent element determines one coordinate. If a coordinate is\ngiven by a number, the number determines the initial position of a free point. If given by a string or a function that coordinate will be constrained\nthat means the user won't be able to change the point's position directly by mouse because it will be calculated automatically depending on the string\nor the function's return value. If two parent elements are given the coordinates will be interpreted as 2D affine Euclidean coordinates, if three such\nparent elements are given they will be interpreted as homogeneous coordinates.",
                    "type": "Number,string,function_Number,string,function_Number,string,function"
                },
                {
                    "name": "Point,Transformation",
                    "description": "A point can also be created providing a transformation.\nThe resulting point is a clone of the base\npoint transformed by the given Transformation. {@see JXG.Transformation}.",
                    "type": "JXG.Point_JXG.Transformation"
                }
            ],
            "example": [
                "\n\n    // Create a free point using affine euclidean coordinates\n    var p1 = board.create('point', [3.5, 2.0]);\n<div id=\"672f1764-7dfa-4abc-a2c6-81fbbf83e44b\" style=\"width: 200px; height: 200px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('672f1764-7dfa-4abc-a2c6-81fbbf83e44b', {boundingbox: [-1, 5, 5, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [3.5, 2.0]);\n})();\n</script>",
                "\n\n    // Create a constrained point using anonymous function\n    var p2 = board.create('point', [3.5, function () { return p1.X(); }]);\n<div id=\"4fd4410c-3383-4e80-b1bb-961f5eeef224\" style=\"width: 200px; height: 200px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('4fd4410c-3383-4e80-b1bb-961f5eeef224', {boundingbox: [-1, 5, 5, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [3.5, 2.0]);\n  var p2 = board.create('point', [3.5, function () { return p1.X(); }]);\n})();\n</script>",
                "\n    // Create a point using transformations\n    var trans = board.create('transform', [2, 0.5], {type:'scale'});\n    var p3 = board.create('point', [p2, trans]);\n<div id=\"630afdf3-0a64-46e0-8a44-f51bd197bb8d\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('630afdf3-0a64-46e0-8a44-f51bd197bb8d', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var trans = board.create('transform', [2, 0.5], {type:'scale'});\n  var p2 = board.create('point', [3.5, 2.0]);\n  var p3 = board.create('point', [p2, trans]);\n})();\n</script>"
            ]
        },
        "Glider": {
            "name": "Glider",
            "shortname": "Glider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/point.js",
            "line": 407,
            "description": "This element is used to provide a constructor for a glider point.\nA glider is a point which lives on another geometric element like a line, circle, curve, turtle.",
            "pseudo": true,
            "extends": "JXG.Point",
            "is_constructor": 1,
            "type": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "z_,x_,y_,GlideObject",
                    "description": "Parent elements can be two or three elements of type number and the object the glider lives on.\nThe coordinates are completely optional. If not given the origin is used. If you provide two numbers for coordinates they will be interpreted as affine euclidean\ncoordinates, otherwise they will be interpreted as homogeneous coordinates. In any case the point will be projected on the glide object.",
                    "type": "Number_Number_Number_JXG.GeometryElement"
                }
            ],
            "example": [
                "\n\n    // Create a glider with user defined coordinates. If the coordinates are not on\n    // the circle (like in this case) the point will be projected onto the circle.\n    var p1 = board.create('point', [2.0, 2.0]);\n    var c1 = board.create('circle', [p1, 2.0]);\n    var p2 = board.create('glider', [2.0, 1.5, c1]);\n<div id=\"4f65f32f-e50a-4b50-9b7c-f6ec41652930\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('4f65f32f-e50a-4b50-9b7c-f6ec41652930', {boundingbox: [-1, 5, 5, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [2.0, 2.0]);\n  var c1 = board.create('circle', [p1, 2.0]);\n  var p2 = board.create('glider', [2.0, 1.5, c1]);\n })();\n</script>",
                "\n    // Create a glider with default coordinates (1,0,0). Same premises as above.\n    var p1 = board.create('point', [2.0, 2.0]);\n    var c1 = board.create('circle', [p1, 2.0]);\n    var p2 = board.create('glider', [c1]);\n<div id=\"4de7f181-631a-44b1-a12f-bc4d995609e8\" style=\"width: 200px; height: 200px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('4de7f181-631a-44b1-a12f-bc4d995609e8', {boundingbox: [-1, 5, 5, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [2.0, 2.0]);\n  var c1 = board.create('circle', [p1, 2.0]);\n  var p2 = board.create('glider', [c1]);\n })();\n</script>"
            ]
        },
        "Intersection": {
            "name": "Intersection",
            "shortname": "Intersection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/point.js",
            "line": 470,
            "description": "This element is used to provide a constructor for an intersection point.\n\nAn intersection point is a point which lives on two Lines or Circles or one Line and one Circle at the same time, i.e.\nan intersection point of the two elements.",
            "pseudo": true,
            "extends": "JXG.Point",
            "is_constructor": 1,
            "type": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "el1,el2,i",
                    "description": "The result will be a intersection point on el1 and el2. i determines the\nintersection point if two points are available: <ul>\n  <li>i==0: use the positive square root,</li>\n  <li>i==1: use the negative square root.</li></ul>",
                    "type": "JXG.Line,JXG.Circle_JXG.Line,JXG.Circle_Number"
                }
            ],
            "example": [
                "\n    // Create an intersection point of circle and line\n    var p1 = board.create('point', [2.0, 2.0]);\n    var c1 = board.create('circle', [p1, 2.0]);\n\n    var p2 = board.create('point', [2.0, 2.0]);\n    var p3 = board.create('point', [2.0, 2.0]);\n    var l1 = board.create('line', [p2, p3]);\n\n    var i = board.create('intersection', [c1, l1, 0]);\n<div id=\"e5b0e190-5200-4bc3-b995-b6cc53dc5dc0\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('e5b0e190-5200-4bc3-b995-b6cc53dc5dc0', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [4.0, 4.0]);\n  var c1 = board.create('circle', [p1, 2.0]);\n  var p2 = board.create('point', [1.0, 1.0]);\n  var p3 = board.create('point', [5.0, 3.0]);\n  var l1 = board.create('line', [p2, p3]);\n  var i = board.create('intersection', [c1, l1, 0]);\n })();\n</script>"
            ]
        },
        "OtherIntersection": {
            "name": "OtherIntersection",
            "shortname": "OtherIntersection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/point.js",
            "line": 566,
            "description": "",
            "pseudo": true,
            "extends": "JXG.Point",
            "is_constructor": 1,
            "type": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "el1,el2,p",
                    "description": "The result will be a intersection point on el1 and el2. i determines the\nintersection point different from p.",
                    "type": "JXG.Line,JXG.Circle_JXG.Line,JXG.Circle_JXG.Point"
                }
            ],
            "example": [
                "\n    // Create an intersection point of circle and line\n    var p1 = board.create('point', [2.0, 2.0]);\n    var c1 = board.create('circle', [p1, 2.0]);\n\n    var p2 = board.create('point', [2.0, 2.0]);\n    var p3 = board.create('point', [2.0, 2.0]);\n    var l1 = board.create('line', [p2, p3]);\n\n    var i = board.create('intersection', [c1, l1, 0]);\n    var j = board.create('otherintersection', [c1, l1, i]);\n<div id=\"45e25f12-a1de-4257-a466-27a2ae73614c\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('45e25f12-a1de-4257-a466-27a2ae73614c', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [4.0, 4.0]);\n  var c1 = board.create('circle', [p1, 2.0]);\n  var p2 = board.create('point', [1.0, 1.0]);\n  var p3 = board.create('point', [5.0, 3.0]);\n  var l1 = board.create('line', [p2, p3]);\n  var i = board.create('intersection', [c1, l1, 0], {name:'D'});\n  var j = board.create('otherintersection', [c1, l1, i], {name:'E'});\n })();\n</script>"
            ]
        },
        "PolePoint": {
            "name": "PolePoint",
            "shortname": "PolePoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/point.js",
            "line": 660,
            "description": "This element is used to provide a constructor for the pole point of a line with respect to a conic or a circle.\n\nThe pole point is the unique reciprocal relationship of a line with respect to a conic.\nThe lines tangent to the intersections of a conic and a line intersect at the pole point of that line with respect to that conic.\nA line tangent to a conic has the pole point of that line with respect to that conic as the tangent point.\nSee {@link http://en.wikipedia.org/wiki/Pole_and_polar} for more information on pole and polar.",
            "pseudo": true,
            "extends": "JXG.Point",
            "is_constructor": 1,
            "type": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "el1,el2",
                    "description": "or",
                    "type": "JXG.Conic,JXG.Circle_JXG.Point"
                },
                {
                    "name": "el1,el2",
                    "description": "The result will be the pole point of the line with respect to the conic or the circle.",
                    "type": "JXG.Point_JXG.Conic,JXG.Circle"
                }
            ],
            "example": [
                "\n    // Create the pole point of a line with respect to a conic\n    var p1 = board.create('point', [-1, 2]);\n    var p2 = board.create('point', [ 1, 4]);\n    var p3 = board.create('point', [-1,-2]);\n    var p4 = board.create('point', [ 0, 0]);\n    var p5 = board.create('point', [ 4,-2]);\n    var c1 = board.create('conic',[p1,p2,p3,p4,p5]);\n    var p6 = board.create('point', [-1, 4]);\n    var p7 = board.create('point', [2, -2]);\n    var l1 = board.create('line', [p6, p7]);\n    var p8 = board.create('polepoint', [c1, l1]);\n<div id='7b7233a0-f363-47dd-9df5-8018d0d17a98' class='jxgbox' style='width:400px; height:400px;'></div>\n<script type='text/javascript'>\n(function(){\nvar board = JXG.JSXGraph.initBoard('7b7233a0-f363-47dd-9df5-8018d0d17a98', {boundingbox: [-3, 5, 5, -3], axis: true, showcopyright: false, shownavigation: false});\nvar p1 = board.create('point', [-1, 2]);\nvar p2 = board.create('point', [ 1, 4]);\nvar p3 = board.create('point', [-1,-2]);\nvar p4 = board.create('point', [ 0, 0]);\nvar p5 = board.create('point', [ 4,-2]);\nvar c1 = board.create('conic',[p1,p2,p3,p4,p5]);\nvar p6 = board.create('point', [-1, 4]);\nvar p7 = board.create('point', [2, -2]);\nvar l1 = board.create('line', [p6, p7]);\nvar p8 = board.create('polepoint', [c1, l1]);\n})();\n</script>",
                "\n    // Create the pole point of a line with respect to a circle\n    var p1 = board.create('point', [1, 1]);\n    var p2 = board.create('point', [2, 3]);\n    var c1 = board.create('circle',[p1,p2]);\n    var p3 = board.create('point', [-1, 4]);\n    var p4 = board.create('point', [4, -1]);\n    var l1 = board.create('line', [p3, p4]);\n    var p5 = board.create('polepoint', [c1, l1]);\n<div id='7b7233a0-f363-47dd-9df5-9018d0d17a98' class='jxgbox' style='width:400px; height:400px;'></div>\n<script type='text/javascript'>\n(function(){\nvar board = JXG.JSXGraph.initBoard('7b7233a0-f363-47dd-9df5-9018d0d17a98', {boundingbox: [-3, 7, 7, -3], axis: true, showcopyright: false, shownavigation: false});\nvar p1 = board.create('point', [1, 1]);\nvar p2 = board.create('point', [2, 3]);\nvar c1 = board.create('circle',[p1,p2]);\nvar p3 = board.create('point', [-1, 4]);\nvar p4 = board.create('point', [4, -1]);\nvar l1 = board.create('line', [p3, p4]);\nvar p5 = board.create('polepoint', [c1, l1]);\n})();\n</script>"
            ]
        },
        "JXG.Polygon": {
            "name": "JXG.Polygon",
            "shortname": "JXG.Polygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/polygon.js",
            "line": 54,
            "description": "Creates a new instance of JXG.Polygon.\nStores all style and functional properties that are required\nto draw and to interactact with a polygon.",
            "params": [
                {
                    "name": "board",
                    "description": "Reference to the board the polygon is to be drawn on.",
                    "type": "JXG.Board"
                },
                {
                    "name": "vertices",
                    "description": "Unique identifiers for the points defining the polygon.\nLast point must be first point. Otherwise, the first point will be added at the list.",
                    "type": "Array"
                },
                {
                    "name": "attributes",
                    "description": "An object which contains properties as given in {@link JXG.Options.elements}\nand {@link JXG.Options.polygon}.",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "extends": "JXG.GeometryElement"
        },
        "Polygon": {
            "name": "Polygon",
            "shortname": "Polygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/polygon.js",
            "line": 855,
            "description": "A polygon is an area enclosed by a set of border lines which are determined by\n\n * a list of points or\n * a list of coordinate arrays or\n * a function returning a list of coordinate arrays.\n\nEach two consecutive points of the list define a line.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "Polygon",
            "extends": "JXG.Polygon",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "vertices",
                    "description": "The polygon's vertices. If the first and the last vertex don't match the first one will be\nadded to the array by the creator.",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\n     var p1 = board.create('point', [0.0, 2.0]);\n     var p2 = board.create('point', [2.0, 1.0]);\n     var p3 = board.create('point', [4.0, 6.0]);\n     var p4 = board.create('point', [1.0, 4.0]);\n\n     var pol = board.create('polygon', [p1, p2, p3, p4]);\n<div id=\"682069e9-9e2c-4f63-9b73-e26f8a2b2bb1\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n (function () {\n  var board = JXG.JSXGraph.initBoard('682069e9-9e2c-4f63-9b73-e26f8a2b2bb1', {boundingbox: [-1, 9, 9, -1], axis: false, showcopyright: false, shownavigation: false}),\n      p1 = board.create('point', [0.0, 2.0]),\n      p2 = board.create('point', [2.0, 1.0]),\n      p3 = board.create('point', [4.0, 6.0]),\n      p4 = board.create('point', [1.0, 4.0]),\n      cc1 = board.create('polygon', [p1, p2, p3, p4]);\n })();\n</script>",
                "\n\n     var p = [[0.0, 2.0], [2.0, 1.0], [4.0, 6.0], [4.0, 6.0], [1.0, 3.0]];\n\n     var pol = board.create('polygon', p, {hasInnerPoints: true});\n<div id=\"9f9a5946-112a-4768-99ca-f30792bcdefb\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n (function () {\n  var board = JXG.JSXGraph.initBoard('9f9a5946-112a-4768-99ca-f30792bcdefb', {boundingbox: [-1, 9, 9, -1], axis: false, showcopyright: false, shownavigation: false}),\n      p = [[0.0, 2.0], [2.0, 1.0], [4.0, 6.0], [4.0, 6.0], [1.0, 4.0]],\n      cc1 = board.create('polygon', p, {hasInnerPoints: true});\n })();\n</script>",
                "\n\n     var f1 = function() { return [0.0, 2.0]; },\n         f2 = function() { return [2.0, 1.0]; },\n         f3 = function() { return [4.0, 6.0]; },\n         f4 = function() { return [1.0, 4.0]; },\n         cc1 = board.create('polygon', [f1, f2, f3, f4]);\n\n<div id=\"ceb09915-b783-44db-adff-7877ae3534c8\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n (function () {\n  var board = JXG.JSXGraph.initBoard('ceb09915-b783-44db-adff-7877ae3534c8', {boundingbox: [-1, 9, 9, -1], axis: false, showcopyright: false, shownavigation: false}),\n      f1 = function() { return [0.0, 2.0]; },\n      f2 = function() { return [2.0, 1.0]; },\n      f3 = function() { return [4.0, 6.0]; },\n      f4 = function() { return [1.0, 4.0]; },\n      cc1 = board.create('polygon', [f1, f2, f3, f4]);\n })();\n</script>"
            ]
        },
        "RegularPolygon": {
            "name": "RegularPolygon",
            "shortname": "RegularPolygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/polygon.js",
            "line": 943,
            "description": "Constructs a regular polygon. It needs two points which define the base line and the number of vertices, or a set of points.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "Polygon",
            "extends": "Polygon",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "p1,p2,n",
                    "description": "The constructed regular polygon has n vertices and the base line defined by p1 and p2.",
                    "type": "JXG.Point_JXG.Point_Number"
                }
            ],
            "example": [
                "\n\n     var p1 = board.create('point', [0.0, 2.0]);\n     var p2 = board.create('point', [2.0, 1.0]);\n\n     var pol = board.create('regularpolygon', [p1, p2, 5]);\n<div id=\"682069e9-9e2c-4f63-9b73-e26f8a2b2bb1\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n (function () {\n  var board = JXG.JSXGraph.initBoard('682069e9-9e2c-4f63-9b73-e26f8a2b2bb1', {boundingbox: [-1, 9, 9, -1], axis: false, showcopyright: false, shownavigation: false}),\n      p1 = board.create('point', [0.0, 2.0]),\n      p2 = board.create('point', [2.0, 1.0]),\n      cc1 = board.create('regularpolygon', [p1, p2, 5]);\n })();\n</script>",
                "\n\n     var p1 = board.create('point', [0.0, 2.0]);\n     var p2 = board.create('point', [4.0,4.0]);\n     var p3 = board.create('point', [2.0,0.0]);\n\n     var pol = board.create('regularpolygon', [p1, p2, p3]);\n<div id=\"096a78b3-bd50-4bac-b958-3be5e7df17ed\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('096a78b3-bd50-4bac-b958-3be5e7df17ed', {boundingbox: [-1, 9, 9, -1], axis: false, showcopyright: false, shownavigation: false}),\n      p1 = board.create('point', [0.0, 2.0]),\n      p2 = board.create('point', [4.0, 4.0]),\n      p3 = board.create('point', [2.0,0.0]),\n      cc1 = board.create('regularpolygon', [p1, p2, p3]);\n})();\n</script>"
            ]
        },
        "JXG.Text": {
            "name": "JXG.Text",
            "shortname": "JXG.Text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/text.js",
            "line": 66,
            "description": "Construct and handle texts.\nCreates a new text object. Do not use this constructor to create a text. Use {@link JXG.Board#create} with\ntype {@link Text} instead.\n\nThe coordinates can be relative to the coordinates of an element\ngiven in {@link JXG.Options#text.anchor}.\n\nMathJax, HTML and GEONExT syntax can be handled.",
            "extends": "JXG.CoordsElement",
            "params": [
                {
                    "name": "board",
                    "description": "The board the new text is drawn on.",
                    "type": "string|JXG.Board"
                },
                {
                    "name": "coordinates",
                    "description": "An array with the user coordinates of the text.",
                    "type": "Array"
                },
                {
                    "name": "attributes",
                    "description": "An object containing visual properties and optional a name and a id.",
                    "type": "Object"
                },
                {
                    "name": "content",
                    "description": "A string or a function returning a string.",
                    "type": "String|function"
                }
            ]
        },
        "Text": {
            "name": "Text",
            "shortname": "Text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/text.js",
            "line": 763,
            "description": "Construct and handle texts.\n\nThe coordinates can be relative to the coordinates of an element\ngiven in {@link JXG.Options#text.anchor}.\n\nMathJaX, HTML and GEONExT syntax can be handled.",
            "pseudo": true,
            "extends": "JXG.Text",
            "is_constructor": 1,
            "type": "JXG.Text",
            "params": [
                {
                    "name": "z_,x,y,str",
                    "description": "Parent elements for text elements.\n  <p>\n  Parent elements can be two or three elements of type number, a string containing a GEONE<sub>x</sub>T\n  constraint, or a function which takes no parameter and returns a number. Every parent element determines one coordinate. If a coordinate is\n  given by a number, the number determines the initial position of a free text. If given by a string or a function that coordinate will be constrained\n  that means the user won't be able to change the texts's position directly by mouse because it will be calculated automatically depending on the string\n  or the function's return value. If two parent elements are given the coordinates will be interpreted as 2D affine Euclidean coordinates, if three such\n  parent elements are given they will be interpreted as homogeneous coordinates.\n  <p>\n  The text to be displayed may be given as string or as function returning a string.\n\nThere is the attribute 'display' which takes the values 'html' or 'internal'. In case of 'html' a HTML division tag is created to display\nthe text. In this case it is also possible to use ASCIIMathML. Incase of 'internal', a SVG or VML text element is used to display the text.",
                    "type": "Number,function_number,function_number,function_String,function"
                }
            ],
            "references": [
                "JXG.Text"
            ],
            "example": [
                "\n\n     // Create a fixed text at position [0,1].\n     var t1 = board.create('text',[0,1,\"Hello World\"]);\n<div id=\"896013aa-f24e-4e83-ad50-7bc7df23f6b7\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('896013aa-f24e-4e83-ad50-7bc7df23f6b7', {boundingbox: [-3, 6, 5, -3], axis: true, showcopyright: false, shownavigation: false});\n  var t1 = board.create('text',[0,1,\"Hello World\"]);\n})();\n</script>",
                "\n\n     // Create a variable text at a variable position.\n     var s = board.create('slider',[[0,4],[3,4],[-2,0,2]]);\n     var txt = board.create('text',\n                       [function(x){ return s.Value();}, 1,\n                        function(){return \"The value of s is\"+s.Value().toFixed(2);}\n                       ]\n                    );\n<div id=\"5441da79-a48d-48e8-9e53-75594c384a1c\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('5441da79-a48d-48e8-9e53-75594c384a1c', {boundingbox: [-3, 6, 5, -3], axis: true, showcopyright: false, shownavigation: false});\n  var s = board.create('slider',[[0,4],[3,4],[-2,0,2]]);\n  var t2 = board.create('text',[function(x){ return s.Value();}, 1, function(){return \"The value of s is \"+s.Value().toFixed(2);}]);\n})();\n</script>",
                "\n\n     // Create a text bound to the point A\n     var p = board.create('point',[0, 1]),\n     t = board.create('text',[0, -1,\"Hello World\"], {anchor: p});\n\n<div id=\"ff5a64b2-2b9a-11e5-8dd9-901b0e1b8723\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function() {\n var board = JXG.JSXGraph.initBoard('ff5a64b2-2b9a-11e5-8dd9-901b0e1b8723',\n  {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n  var p = board.create('point',[0, 1]),\n     t = board.create('text',[0, -1,\"Hello World\"], {anchor: p});\n})();\n</script>\n"
            ]
        },
        "JXG.Ticks": {
            "name": "JXG.Ticks",
            "shortname": "JXG.Ticks",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/ticks.js",
            "line": 61,
            "description": "Ticks provides methods for creation and management\nof ticks on a line element.",
            "params": [
                {
                    "name": "line",
                    "description": "Reference to the axis the ticks are drawn on.",
                    "type": "JXG.Line"
                },
                {
                    "name": "ticks",
                    "description": "Number defining the distance between two major ticks or an array defining static ticks.",
                    "type": "Number|Array"
                },
                {
                    "name": "attributes",
                    "description": "Properties",
                    "type": "Object"
                }
            ],
            "references": [
                "JXG.Line#addTicks"
            ],
            "is_constructor": 1,
            "extends": "JXG.GeometryElement"
        },
        "Ticks": {
            "name": "Ticks",
            "shortname": "Ticks",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/ticks.js",
            "line": 1015,
            "description": "Ticks are used as distance markers on a line.\nThe class `Ticks` provides methods for creation and management\nof ticks on a line element.",
            "pseudo": true,
            "extends": "JXG.Ticks",
            "is_constructor": 1,
            "type": "JXG.Ticks",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "line,_distance,_generateLabelFunc",
                    "description": "The parents consist of the line the ticks are going to be attached to and the\ndistance between two major ticks.\nThe third parameter (optional) is a function which determines the tick label. It has as parameter a coords object containing the coordinates of the new tick.",
                    "type": "JXG.Line,Number,Function"
                }
            ],
            "example": [
                "\n\n        // Create an axis providing two coord pairs.\n      var p1 = board.create('point', [0, 3]);\n       var p2 = board.create('point', [1, 3]);\n     var l1 = board.create('line', [p1, p2]);\n     var t = board.create('ticks', [l1], {ticksDistance: 2});\n\n<div id=\"ee7f2d68-75fc-4ec0-9931-c76918427e63\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('ee7f2d68-75fc-4ec0-9931-c76918427e63', {boundingbox: [-1, 7, 7, -1], showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0, 3]);\n  var p2 = board.create('point', [1, 3]);\n  var l1 = board.create('line', [p1, p2]);\n  var t = board.create('ticks', [l1, 2], {ticksDistance: 2});\n})();\n</script>"
            ]
        },
        "Hatch": {
            "name": "Hatch",
            "shortname": "Hatch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/ticks.js",
            "line": 1077,
            "description": "Hashes can be used to mark congruent lines.",
            "pseudo": true,
            "extends": "JXG.Ticks",
            "is_constructor": 1,
            "type": "JXG.Ticks",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "line,numberofhashes",
                    "description": "The parents consist of the line the hatch marks are going to be attached to and the\nnumber of dashes.",
                    "type": "JXG.Line,Number"
                }
            ],
            "example": [
                "\n     // Create an axis providing two coord pairs.\n      var p1 = board.create('point', [0, 3]);\n       var p2 = board.create('point', [1, 3]);\n        var l1 = board.create('line', [p1, p2]);\n     var t = board.create('hatch', [l1, 3]);\n<div id=\"4a20af06-4395-451c-b7d1-002757cf01be\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('4a20af06-4395-451c-b7d1-002757cf01be', {boundingbox: [-1, 7, 7, -1], showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0, 3]);\n  var p2 = board.create('point', [1, 3]);\n  var l1 = board.create('line', [p1, p2]);\n  var t = board.create('hatch', [l1, 3]);\n})();\n</script>"
            ]
        },
        "JXG.Transformation": {
            "name": "JXG.Transformation",
            "shortname": "JXG.Transformation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/transformation.js",
            "line": 53,
            "description": "A transformation consists of a 3x3 matrix, i.e. it is a projective transformation.\nCreates a new transformation object. Do not use this constructor to create a transformation. Use {@link JXG.Board#create} with\ntype {@link Transformation} instead.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "board",
                    "description": "The board the new circle is drawn on.",
                    "type": "JXG.Board"
                },
                {
                    "name": "type",
                    "description": "Can be\n\n* 'translate'\n* 'scale'\n* 'reflect'\n* 'rotate'\n* 'shear'\n+ 'generic'",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "The parameters depend on the transformation type\n\n<p>\nTranslation matrix:\n<pre>\n( 1  0  0)   ( z )\n( a  1  0) * ( x )\n( b  0  1)   ( y )\n</pre>\n\n<p>\nScale matrix:\n<pre>\n( 1  0  0)   ( z )\n( 0  a  0) * ( x )\n( 0  0  b)   ( y )\n</pre>\n\n<p>\nA rotation matrix with angle a (in Radians)\n<pre>\n( 1    0        0      )   ( z )\n( 0    cos(a)   -sin(a)) * ( x )\n( 0    sin(a)   cos(a) )   ( y )\n</pre>\n\n<p>\nShear matrix:\n<pre>\n( 1  0  0)   ( z )\n( 0  1  a) * ( x )\n( 0  b  1)   ( y )\n</pre>\n\n<p>Generic transformation:\n<pre>\n( a  b  c )   ( z )\n( d  e  f ) * ( x )\n( g  h  i )   ( y )\n</pre>",
                    "type": "Object"
                }
            ]
        },
        "Transformation": {
            "name": "Transformation",
            "shortname": "Transformation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/transformation.js",
            "line": 479,
            "description": "This element is used to provide projective transformations.\nA transformation consists of a 3x3 matrix, i.e. it is a projective transformation.",
            "pseudo": true,
            "extends": "JXG.Transformation",
            "is_constructor": 1,
            "type": "JXG.Transformation",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "The",
                    "description": "parameters depend on the transformation type, supplied as attribute 'type'.\nPossible transformation types are\n<ul><li> 'translate'\n<li> 'scale'\n<li> 'reflect'\n<li> 'rotate'\n<li> 'shear'\n<li> 'generic'\n</ul>\nThe transformation matrix then looks like:\n<p>\nTranslation matrix:\n<pre>\n( 1  0  0)   ( z )\n( a  1  0) * ( x )\n( b  0  1)   ( y )\n</pre>\n\n<p>\nScale matrix:\n<pre>\n( 1  0  0)   ( z )\n( 0  a  0) * ( x )\n( 0  0  b)   ( y )\n</pre>\n\n<p>\nA rotation matrix with angle a (in Radians)\n<pre>\n( 1    0        0      )   ( z )\n( 0    cos(a)   -sin(a)) * ( x )\n( 0    sin(a)   cos(a) )   ( y )\n</pre>\n\n<p>\nShear matrix:\n<pre>\n( 1  0  0)   ( z )\n( 0  1  a) * ( x )\n( 0  b  1)   ( y )\n</pre>\n\n<p>Generic transformation:\n<pre>\n( a  b  c )   ( z )\n( d  e  f ) * ( x )\n( g  h  i )   ( y )\n</pre>",
                    "type": "Number,function"
                }
            ],
            "example": [
                "\n\n     // The point B is determined by taking twice the vector A from the origin\n\n     var p0 = board.create('point', [0, 3], {name: 'A'}),\n         t = board.create('transform', [function(){ return p0.X(); }, \"Y(A)\"], {type: 'translate'}),\n         p1 = board.create('point', [p0, t], {color: 'blue'});\n\n<div id=\"14167b0c-2ad3-11e5-8dd9-901b0e1b8723\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function() {\n   var board = JXG.JSXGraph.initBoard('14167b0c-2ad3-11e5-8dd9-901b0e1b8723',\n        {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n   var p0 = board.create('point', [0, 3], {name: 'A'}),\n       t = board.create('transform', [function(){ return p0.X(); }, \"Y(A)\"], {type:'translate'}),\n       p1 = board.create('point', [p0, t], {color: 'blue'});\n    })();\n</script>",
                "\n\n     // The point B is the result of scaling the point A with factor 2 in horizontal direction\n     // and with factor 0.5 in vertical direction.\n\n     var p1 = board.create('point', [1, 1]),\n         t = board.create('transform', [2, 0.5], {type: 'scale'}),\n         p2 = board.create('point', [p1, t], {color: 'blue'});\n\n<div id=\"a6827a72-2ad3-11e5-8dd9-901b0e1b8723\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function() {\n    var board = JXG.JSXGraph.initBoard('a6827a72-2ad3-11e5-8dd9-901b0e1b8723',\n        {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\nvar p1 = board.create('point', [1, 1]),\n    t = board.create('transform', [2, 0.5], {type: 'scale'}),\n    p2 = board.create('point', [p1, t], {color: 'blue'});\n})();\n</script>",
                "\n \n     // The point B is rotated around C which gives point D. The angle is determined\n     // by the vertical height of point A.\n\n     var p0 = board.create('point', [0, 3], {name: 'A'}),\n         p1 = board.create('point', [1, 1]),\n         p2 = board.create('point', [2, 1], {name:'C', fixed: true}),\n\n         // angle, rotation center:\n         t = board.create('transform', ['Y(A)', p2], {type: 'rotate'}),\n         p3 = board.create('point', [p1, t], {color: 'blue'});\n\n<div id=\"747cf11e-2ad4-11e5-8dd9-901b0e1b8723\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function() {\n var board = JXG.JSXGraph.initBoard('747cf11e-2ad4-11e5-8dd9-901b0e1b8723',\n        {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n var p0 = board.create('point', [0, 3], {name: 'A'}),\n  p1 = board.create('point', [1, 1]),\n  p2 = board.create('point', [2, 1], {name:'C', fixed: true}),\n  // angle, rotation center:\n  t = board.create('transform', ['Y(A)', p2], {type: 'rotate'}),\n  p3 = board.create('point', [p1, t], {color: 'blue'});\n})();\n</script>",
                "\n\n     // A concatenation of several transformations.\n     var p1 = board.create('point', [1, 1]),\n         t1 = board.create('transform', [-2, -1], {type: 'translate'}),\n         t2 = board.create('transform', [Math.PI/4], {type: 'rotate'}),\n         t3 = board.create('transform', [2, 1], {type: 'translate'}),\n         p2 = board.create('point', [p1, [t1, t2, t3]], {color: 'blue'});\n\n<div id=\"f516d3de-2ad5-11e5-8dd9-901b0e1b8723\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function() {\nvar board = JXG.JSXGraph.initBoard('f516d3de-2ad5-11e5-8dd9-901b0e1b8723',\n  {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\nvar p1 = board.create('point', [1, 1]),\n   t1 = board.create('transform', [-2, -1], {type:'translate'}),\n   t2 = board.create('transform', [Math.PI/4], {type:'rotate'}),\n   t3 = board.create('transform', [2, 1], {type:'translate'}),\n   p2 = board.create('point', [p1, [t1, t2, t3]], {color: 'blue'});\n})();\n</script>",
                "\n\n     // Reflection of point A\n     var p1 = board.create('point', [1, 1]),\n         p2 = board.create('point', [1, 3]),\n         p3 = board.create('point', [-2, 0]),\n         l = board.create('line', [p2, p3]),\n         t = board.create('transform', [l], {type: 'reflect'}),  // Possible are l, l.id, l.name\n         p4 = board.create('point', [p1, t], {color: 'blue'});\n\n<div id=\"6f374a04-2ad6-11e5-8dd9-901b0e1b8723\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function() {\n   var board = JXG.JSXGraph.initBoard('6f374a04-2ad6-11e5-8dd9-901b0e1b8723',\n       {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n var p1 = board.create('point', [1, 1]),\n     p2 = board.create('point', [1, 3]),\n     p3 = board.create('point', [-2, 0]),\n     l = board.create('line', [p2, p3]),\n     t = board.create('transform', [l], {type:'reflect'}),  // Possible are l, l.id, l.name\n     p4 = board.create('point', [p1, t], {color: 'blue'});\n })();\n</script>",
                "\n\n     // One time application of a transform to points A, B\n     var p1 = board.create('point', [1, 1]),\n         p2 = board.create('point', [1, 1]),\n         t = board.create('transform', [3, 2], {type: 'shear'});\n     t.applyOnce([p1, p2]);\n\n<div id=\"b6cee1c4-2ad6-11e5-8dd9-901b0e1b8723\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function() {\n var board = JXG.JSXGraph.initBoard('b6cee1c4-2ad6-11e5-8dd9-901b0e1b8723',\n     {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n var p1 = board.create('point', [1, 1]),\n p2 = board.create('point', [-1, -2]),\n t = board.create('transform', [3, 2], {type: 'shear'});\n t.applyOnce([p1, p2]);\n})();\n</script>",
                "\n\n     // Construct a square of side length 2 with the\n     // help of transformations\n     var sq = [],\n         right = board.create('transform', [2, 0], {type: 'translate'}),\n         up = board.create('transform', [0, 2], {type: 'translate'}),\n         pol, rot, p0;\n\n     // The first point is free\n     sq[0] = board.create('point', [0, 0], {name: 'Drag me'}),\n\n     // Construct the other free points by transformations\n     sq[1] = board.create('point', [sq[0], right]),\n     sq[2] = board.create('point', [sq[0], [right, up]]),\n     sq[3] = board.create('point', [sq[0], up]),\n\n     // Polygon through these four points\n     pol = board.create('polygon', sq, {\n            fillColor:'blue',\n            gradient:'radial',\n            gradientsecondcolor:'white',\n            gradientSecondOpacity:'0'\n     }),\n\n     p0 = board.create('point', [0, 3], {name: 'angle'}),\n     // Rotate the square around point sq[0] by dragging A\n     rot = board.create('transform', ['Y(angle)', sq[0]], {type: 'rotate'});\n\n     // Apply the rotation to all but the first point of the square\n     rot.bindTo(sq.slice(1));\n\n<div id=\"c7f9097e-2ad7-11e5-8dd9-901b0e1b8723\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function() {\n var board = JXG.JSXGraph.initBoard('c7f9097e-2ad7-11e5-8dd9-901b0e1b8723',\n     {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n // Construct a square of side length 2 with the\n // help of transformations\n var sq = [],\n   right = board.create('transform', [2, 0], {type: 'translate'}),\n   up = board.create('transform', [0, 2], {type: 'translate'}),\n   pol, rot, p0;\n  // The first point is free\n  sq[0] = board.create('point', [0, 0], {name: 'Drag me'}),\n  // Construct the other free points by transformations\n  sq[1] = board.create('point', [sq[0], right]),\n  sq[2] = board.create('point', [sq[0], [right, up]]),\n  sq[3] = board.create('point', [sq[0], up]),\n  // Polygon through these four points\n  pol = board.create('polygon', sq, {\n       fillColor:'blue',\n       gradient:'radial',\n       gradientsecondcolor:'white',\n       gradientSecondOpacity:'0'\n }),\n p0 = board.create('point', [0, 3], {name: 'angle'}),\n// Rotate the square around point sq[0] by dragging A\nrot = board.create('transform', ['Y(angle)', sq[0]], {type: 'rotate'});\n// Apply the rotation to all but the first point of the square\nrot.bindTo(sq.slice(1));\n})();\n</script>\n"
            ]
        },
        "JXG.Turtle": {
            "name": "JXG.Turtle",
            "shortname": "JXG.Turtle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/turtle.js",
            "line": 60,
            "description": "Constructs a new Turtle object.\n\nIt is derived from {@link JXG.GeometryElement}.\nIt stores all properties required\nto move a turtle.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "board",
                    "description": "The board the new turtle is drawn on.",
                    "type": "JXG.Board"
                },
                {
                    "name": "parents",
                    "description": "Start position and start direction of the turtle. Possible values are\n\n* [x, y, angle]\n* [[x, y], angle]\n* [x, y]\n* [[x, y]]",
                    "type": "Array"
                },
                {
                    "name": "attributes",
                    "description": "Attributes to change the visual properties of the turtle object\nAll angles are in degrees.",
                    "type": "Object"
                }
            ]
        },
        "Turtle": {
            "name": "Turtle",
            "shortname": "Turtle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/base/turtle.js",
            "line": 904,
            "description": "This element is used to provide a constructor for a turtle.",
            "pseudo": true,
            "extends": "JXG.Turtle",
            "is_constructor": 1,
            "type": "JXG.Turtle",
            "params": [
                {
                    "name": "parents",
                    "description": "Start position and start direction of the turtle. Possible values are\n\n* [x, y, angle]\n* [[x, y], angle]\n* [x, y]\n* [[x, y]]",
                    "type": "Array"
                },
                {
                    "name": "attributes",
                    "description": "Object containing properties for the element such as stroke-color and visibility. See {@link JXG.GeometryElement#setAttribute}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Reference to the created turtle object.",
                "type": "JXG.Turtle"
            },
            "example": [
                "\n\n    var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-300, 300, 300, -300]});\n    var t = board.create('turtle');\n\n    var side = function(size, level) {\n        if (level == 0) {\n            t.fd(size);\n            return;\n        }\n        side(size/3, level-1);\n        t.lt(60);\n        side(size/3, level-1);\n        t.rt(120);\n        side(size/3, level-1);\n        t.lt(60);\n        side(size/3, level-1);\n    };\n\n    var snowflake = function (size, level) {\n        var i;\n        for (i = 0; i < 3; i++) {\n            side(size, level);\n            t.rt(120);\n        };\n    }\n\n    t.clearScreen().hideTurtle();\n    t.setPenSize(1).setPenColor(\"#000000\");\n    t.lt(30).setPos(0, -100);\n\n    snowflake(250, 3);\n\n<div id=\"280aee5e-3c1c-11e5-8dd9-901b0e1b8723\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function() {\nvar board = JXG.JSXGraph.initBoard('280aee5e-3c1c-11e5-8dd9-901b0e1b8723',\n    {boundingbox: [-300, 300, 300, -300], axis: false, showcopyright: false, shownavigation: false});\nvar t = board.create('turtle');\nvar side = function(size, level) {\nif (level == 0) {\nt.fd(size);\nreturn;\n}\nside(size/3, level-1);\nt.lt(60);\nside(size/3, level-1);\nt.rt(120);\nside(size/3, level-1);\nt.lt(60);\nside(size/3, level-1);\n};\nvar snowflake = function (size, level) {\nvar i;\nfor (i = 0; i < 3; i++) {\nside(size, level);\nt.rt(120);\n};\n}\nt.clearScreen().hideTurtle();\nt.setPenSize(1).setPenColor(\"#000000\");\nt.lt(30).setPos(0, -100);\nsnowflake(250, 3);\n})();\n</script>",
                "\n    var board = JXG.JSXGraph.initBoard('box', {boundingbox: [-300, 300, 300, -300]});\n    var t = board.create('turtle');\n\n    var branch = function(length, level) {\n        if  (level == 0)\n            return;\n\n        t.fd(length).lt(45);\n        branch(length / 2, level - 1);\n        t.rt(90);\n        branch(length / 2, level - 1);\n        t.lt(45).bk(length);\n    };\n\n    var lbranch = function(length, angle, level) {\n        t.fd(2 * length);\n        node(length, angle, level);\n        t.bk(2 * length);\n    };\n\n    var rbranch = function (length, angle, level) {\n        t.fd(length);\n        node(length, angle, level);\n        t.bk(length);\n    };\n\n    var node = function (length, angle, level) {\n        if (level == 0)\n            return;\n\n        t.lt(angle);\n        lbranch(length, angle, level - 1);\n        t.rt(2 * angle);\n        rbranch(length, angle, level - 1);\n        t.lt(angle);\n    };\n\n    t.clearScreen().hideTurtle();\n    t.setPenSize(5).setPenColor(\"#008800\");\n    t.setPos(30, -150);\n    lbranch(25, 20, 7);\n\n<div id=\"092cf60c-3c1d-11e5-8dd9-901b0e1b8723\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function() {\nvar board = JXG.JSXGraph.initBoard('092cf60c-3c1d-11e5-8dd9-901b0e1b8723',\n    {boundingbox: [-300, 300, 300, -300], showcopyright: false, shownavigation: false});\nvar t = board.create('turtle');\nvar branch = function(length, level) {\nif  (level == 0)\nreturn;\nt.fd(length).lt(45);\nbranch(length / 2, level - 1);\nt.rt(90);\nbranch(length / 2, level - 1);\nt.lt(45).bk(length);\n};\nvar lbranch = function(length, angle, level) {\nt.fd(2 * length);\nnode(length, angle, level);\nt.bk(2 * length);\n};\nvar rbranch = function (length, angle, level) {\nt.fd(length);\nnode(length, angle, level);\nt.bk(length);\n};\nvar node = function (length, angle, level) {\nif (level == 0)\nreturn;\nt.lt(angle);\nlbranch(length, angle, level - 1);\nt.rt(2 * angle);\nrbranch(length, angle, level - 1);\nt.lt(angle);\n};\nt.clearScreen().hideTurtle();\nt.setPenSize(5).setPenColor(\"#008800\");\nt.setPos(30, -150);\nlbranch(25, 20, 7);\n})();\n</script>",
                "\n    var board = JXG.JSXGraph.initBoard('jxgbox',{boundingbox: [-250, 250, 250, -250]});\n    var t = brd.create('turtle', [0, 0], {strokeOpacity:0.5});\n    t.setPenSize(3);\n    t.right(90);\n    var alpha = 0;\n\n    var run = function() {\n       t.forward(2);\n       if (Math.floor(alpha / 360) % 2 === 0) {\n          t.left(1);        // turn left by 1 degree\n       } else {\n          t.right(1);       // turn right by 1 degree\n       }\n\n       alpha += 1;\n\n       if (alpha < 1440) {  // stop after two rounds\n           setTimeout(run, 20);\n       }\n    }\n\n    run();\n\n<div id=\"af9140b6-3c1d-11e5-8dd9-901b0e1b8723\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function() {\nvar board = JXG.JSXGraph.initBoard('af9140b6-3c1d-11e5-8dd9-901b0e1b8723',\n    {boundingbox: [-250, 250, 250, -250], showcopyright: false, shownavigation: false});\nvar t = board.create('turtle',[0, 0], {strokeOpacity:0.5});\nt.setPenSize(3);\nt.right(90);\nvar alpha = 0;\nvar run = function() {\nt.forward(2);\nif (Math.floor(alpha / 360) % 2 === 0) {\nt.left(1);        // turn left by 1 degree\n} else {\nt.right(1);       // turn right by 1 degree\n}\nalpha += 1;\nif (alpha < 1440) {  // stop after two rounds\nsetTimeout(run, 20);\n}\n}\nrun();\n})();\n</script>\n"
            ]
        },
        "Arc": {
            "name": "Arc",
            "shortname": "Arc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/arc.js",
            "line": 62,
            "description": "An arc is a segment of the circumference of a circle. It is defined by a center, one point that\ndefines the radius, and a third point that defines the angle of the arc.",
            "pseudo": true,
            "extends": "Curve",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": "The result will be an arc of a circle around p1 through p2. The arc is drawn\ncounter-clockwise from p2 to p3.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n    // Create an arc out of three free points\n    var p1 = board.create('point', [2.0, 2.0]);\n    var p2 = board.create('point', [1.0, 0.5]);\n    var p3 = board.create('point', [3.5, 1.0]);\n\n    var a = board.create('arc', [p1, p2, p3]);\n<div id=\"114ef584-4a5e-4686-8392-c97501befb5b\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n var board = JXG.JSXGraph.initBoard('114ef584-4a5e-4686-8392-c97501befb5b', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n p1 = board.create('point', [2.0, 2.0]),\n p2 = board.create('point', [1.0, 0.5]),\n p3 = board.create('point', [3.5, 1.0]),\n a = board.create('arc', [p1, p2, p3]);\n})();\n</script>"
            ]
        },
        "Semicircle": {
            "name": "Semicircle",
            "shortname": "Semicircle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/arc.js",
            "line": 366,
            "description": "A semicircle is a special arc defined by two points. The arc hits both points.",
            "pseudo": true,
            "extends": "Arc",
            "is_constructor": 1,
            "type": "Arc",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2",
                    "description": "The result will be a composition of an arc drawn clockwise from <tt>p1</tt> and\n<tt>p2</tt> and the midpoint of <tt>p1</tt> and <tt>p2</tt>.",
                    "type": "JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n      // Create an arc out of three free points\n      var p1 = board.create('point', [4.5, 2.0]);\n      var p2 = board.create('point', [1.0, 0.5]);\n\n      var a = board.create('semicircle', [p1, p2]);\n<div id=\"5385d349-75d7-4078-b732-9ae808db1b0e\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n var board = JXG.JSXGraph.initBoard('5385d349-75d7-4078-b732-9ae808db1b0e', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n p1 = board.create('point', [4.5, 2.0]),\n p2 = board.create('point', [1.0, 0.5]),\n sc = board.create('semicircle', [p1, p2]);\n})();\n</script>"
            ]
        },
        "CircumcircleArc": {
            "name": "CircumcircleArc",
            "shortname": "CircumcircleArc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/arc.js",
            "line": 429,
            "description": "A circumcircle arc is an {@link Arc} defined by three points. All three points lie on the arc.",
            "pseudo": true,
            "extends": "Arc",
            "is_constructor": 1,
            "type": "Arc",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": "The result will be a composition of an arc of the circumcircle of\n<tt>p1</tt>, <tt>p2</tt>, and <tt>p3</tt> and the midpoint of the circumcircle of the three points. The arc is drawn\ncounter-clockwise from <tt>p1</tt> over <tt>p2</tt> to <tt>p3</tt>.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n      // Create a circum circle arc out of three free points\n      var p1 = board.create('point', [2.0, 2.0]);\n      var p2 = board.create('point', [1.0, 0.5]);\n      var p3 = board.create('point', [3.5, 1.0]);\n\n      var a = board.create('arc', [p1, p2, p3]);\n<div id=\"87125fd4-823a-41c1-88ef-d1a1369504e3\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n var board = JXG.JSXGraph.initBoard('87125fd4-823a-41c1-88ef-d1a1369504e3', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n p1 = board.create('point', [2.0, 2.0]),\n p2 = board.create('point', [1.0, 0.5]),\n p3 = board.create('point', [3.5, 1.0]),\n cca = board.create('circumcirclearc', [p1, p2, p3]);\n})();\n</script>"
            ]
        },
        "MinorArc": {
            "name": "MinorArc",
            "shortname": "MinorArc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/arc.js",
            "line": 496,
            "description": "A minor arc is a segment of the circumference of a circle having measure less than or equal to\n180 degrees (pi radians). It is defined by a center, one point that\ndefines the radius, and a third point that defines the angle of the arc.",
            "pseudo": true,
            "extends": "Curve",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": ". Minor arc is an arc of a circle around p1 having measure less than or equal to\n180 degrees (pi radians) and starts at p2. The radius is determined by p2, the angle by p3.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n      // Create an arc out of three free points\n      var p1 = board.create('point', [2.0, 2.0]);\n      var p2 = board.create('point', [1.0, 0.5]);\n      var p3 = board.create('point', [3.5, 1.0]);\n\n      var a = board.create('arc', [p1, p2, p3]);\n<div id=\"64ba7ca2-8728-45f3-96e5-3c7a4414de2f\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('64ba7ca2-8728-45f3-96e5-3c7a4414de2f', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n  p1 = board.create('point', [2.0, 2.0]),\n  p2 = board.create('point', [1.0, 0.5]),\n  p3 = board.create('point', [3.5, 1.0]),\n  a = board.create('minorarc', [p1, p2, p3]);\n})();\n</script>"
            ]
        },
        "MajorArc": {
            "name": "MajorArc",
            "shortname": "MajorArc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/arc.js",
            "line": 534,
            "description": "A major arc is a segment of the circumference of a circle having measure greater than or equal to\n180 degrees (pi radians). It is defined by a center, one point that\ndefines the radius, and a third point that defines the angle of the arc.",
            "pseudo": true,
            "extends": "Curve",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": ". Major arc is an arc of a circle around p1 having measure greater than or equal to\n180 degrees (pi radians) and starts at p2. The radius is determined by p2, the angle by p3.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n     // Create an arc out of three free points\n     var p1 = board.create('point', [2.0, 2.0]);\n     var p2 = board.create('point', [1.0, 0.5]);\n     var p3 = board.create('point', [3.5, 1.0]);\n\n     var a = board.create('minorarc', [p1, p2, p3]);\n<div id=\"17a10d38-5629-40a4-b150-f41806edee9f\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n var board = JXG.JSXGraph.initBoard('17a10d38-5629-40a4-b150-f41806edee9f', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n p1 = board.create('point', [2.0, 2.0]),\n p2 = board.create('point', [1.0, 0.5]),\n p3 = board.create('point', [3.5, 1.0]),\n a = board.create('majorarc', [p1, p2, p3]);\n})();\n</script>"
            ]
        },
        "Button": {
            "name": "Button",
            "shortname": "Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/button.js",
            "line": 61,
            "description": "This element is used to provide a constructor for special texts containing a form button element.",
            "pseudo": true,
            "extends": "Text",
            "is_constructor": 1,
            "type": "JXG.Text",
            "params": [
                {
                    "name": "x,y,label,handler",
                    "description": "Parent elements for button elements.\n <p>\n x and y are the coordinates of the lower left corner of the text box.\n The position of the text is fixed,\n x and y are numbers. The position is variable if x or y are functions.\n <p>\n The label of the input element may be given  as string.\n <p>\n The (optional) handler function which is called when the button is pressed.",
                    "type": "Number,function_number,function_String_function"
                }
            ],
            "example": [
                "\n     var p = board.create('point', [0.5, 0.5], {id: 'p1'});\n\n     // Create a button element at position [1,2].\n     var button1 = board.create('button', [1, 2, 'Change Y with JavaScript', function() {\n                 p.moveTo([p.X(), p.Y() + 0.5], 100);\n     }], {});\n\n     // Create a button element at position [1,4].\n     var button2 = board.create('button', [1, 4, 'Change Y with JessieCode',\n             \"$('p1').Y = $('p1').Y() - 0.5;\"\n     ], {});\n\n<div id=\"f19b1bce-dd00-4e35-be97-ff1817d11514\" style=\"width: 500px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n var t1_board = JXG.JSXGraph.initBoard('f19b1bce-dd00-4e35-be97-ff1817d11514', {boundingbox: [-3, 6, 5, -3], axis: true, showcopyright: false, shownavigation: false});\n var p = t1_board.create('point', [0, -1], {id: 'p1'});\n // Create a button element at position [1,2].\n var button1 = t1_board.create('button', [1, 2, 'Change Y with JavaScript', function() {\n     p.moveTo([p.X(), p.Y() + 0.5], 100);\n }], {});\n // Create a button element at position [1,4].\n var button2 = t1_board.create('button', [1, 4, 'Change Y with JessieCode',\n     \"$('p1').Y = $('p1').Y() - 0.5;\"\n ], {});\n</script>"
            ]
        },
        "Checkbox": {
            "name": "Checkbox",
            "shortname": "Checkbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/checkbox.js",
            "line": 59,
            "description": "",
            "pseudo": true,
            "extends": "Text",
            "is_constructor": 1,
            "type": "JXG.Text",
            "params": [
                {
                    "name": "x,y,label",
                    "description": "Parent elements for checkbox elements.\n <p>\n x and y are the coordinates of the lower left corner of the text box.\n The position of the text is fixed,\n x and y are numbers. The position is variable if x or y are functions.\n  <p>\n The label of the input element may be given  as string.",
                    "type": "Number,function_number,function_String_String"
                }
            ],
            "example": [
                "\n    // Create a checkbox element at position [0,3].\n    var checkbox = board.create('checkbox', [0, 3, 'Change Y'], {});\n    var p = board.create('point', [\n              function(){ return 0.5;}, // X-coordinate\n              function() {\n                  y = 0.5;\n                  if (checkbox.Value()) {\n                       y += 0.5;\n                  }\n                  return y;\n              }]);\n<div id=\"0e835e0b-ed0c-4b85-b682-78158c0e6f5c\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n var t1_board = JXG.JSXGraph.initBoard('0e835e0b-ed0c-4b85-b682-78158c0e6f5c', {boundingbox: [-3, 6, 5, -3], axis: true, showcopyright: false, shownavigation: false});\n var checkbox = t1_board.create('checkbox', [0, 3, 'Change Y'], {});\n var p = t1_board.create('point', [\n  function(){ return 0.5;}, // X-coordinate\n function() {\n y = 0.5;\n  if (checkbox.Value()) {\n   y += 0.5;\n  }\n return y;\n}]);\n</script>\n\nThe checkbox can be supplied with custom-made events by using the property rendNodeCheckbox.",
                "\n    var checkbox = board.create('checkbox', [0, 4, 'Click me']),\n        p = board.create('point', [1, 1]);\n\n    JXG.addEvent(checkbox.rendNodeCheckbox, 'change', function() {\n        if (this.Value()) {\n            p.moveTo([4, 1]);\n        } else {\n            p.moveTo([1, 1]);\n        }\n    }, checkbox);\n<div id=\"b2f2345a-057d-44ce-bd7a-6aaff70bc810\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\nvar board = JXG.JSXGraph.initBoard('b2f2345a-057d-44ce-bd7a-6aaff70bc810', {boundingbox: [-3, 6, 5, -3], axis: true, showcopyright: false, shownavigation: false});\nvar checkbox = board.create('checkbox', [0, 4, 'Click me']),\n p = board.create('point', [1, 1]);\nJXG.addEvent(checkbox.rendNodeCheckbox, 'change', function() {\n    if (this.Value()) {\n        p.moveTo([4, 1]);\n    } else {\n        p.moveTo([1, 1]);\n    }\n}, checkbox);\n</script>"
            ]
        },
        "Orthogonalprojection": {
            "name": "Orthogonalprojection",
            "shortname": "Orthogonalprojection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 85,
            "description": "Construct a point that is the orthogonal projection of a point to a line.\n\nAn orthogonal projection is given by a point and a line. It is determined by projecting the given point\northogonal onto the given line.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Point",
            "extends": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p,l",
                    "description": "The constructed point is the orthogonal projection of p onto l.",
                    "type": "JXG.Line_JXG.Point"
                }
            ],
            "example": [
                "\n    var p1 = board.create('point', [0.0, 4.0]);\n    var p2 = board.create('point', [6.0, 1.0]);\n    var l1 = board.create('line', [p1, p2]);\n    var p3 = board.create('point', [3.0, 3.0]);\n\n    var pp1 = board.create('orthogonalprojection', [p3, l1]);\n<div id=\"7708b215-39fa-41b6-b972-19d73d77d791\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('7708b215-39fa-41b6-b972-19d73d77d791', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0.0, 4.0]);\n  var p2 = board.create('point', [6.0, 1.0]);\n  var l1 = board.create('line', [p1, p2]);\n  var p3 = board.create('point', [3.0, 3.0]);\n  var pp1 = board.create('orthogonalprojection', [p3, l1]);\n})();\n</script>"
            ]
        },
        "Perpendicular": {
            "name": "Perpendicular",
            "shortname": "Perpendicular",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 209,
            "description": "Constructor for a perpendicular line.\n\nA perpendicular is a composition of two elements: a line and a point. The line is orthogonal\nto a given line and contains a given point.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Line",
            "extends": "Segment",
            "return": {
                "description": "A  object through the given point that is orthogonal to the given line.",
                "type": "@link JXG.Line"
            },
            "throws": {
                "description": "If the elements cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "l,p",
                    "description": "The perpendicular line will be orthogonal to l and\nwill contain p.",
                    "type": "JXG.Line_JXG.Point"
                }
            ],
            "example": [
                "\n    // Create a perpendicular\n    var p1 = board.create('point', [0.0, 2.0]);\n    var p2 = board.create('point', [2.0, 1.0]);\n    var l1 = board.create('line', [p1, p2]);\n\n    var p3 = board.create('point', [3.0, 3.0]);\n    var perp1 = board.create('perpendicular', [l1, p3]);\n<div id=\"d5b78842-7b27-4d37-b608-d02519e6cd03\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('d5b78842-7b27-4d37-b608-d02519e6cd03', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0.0, 2.0]);\n  var p2 = board.create('point', [2.0, 1.0]);\n  var l1 = board.create('line', [p1, p2]);\n  var p3 = board.create('point', [3.0, 3.0]);\n  var perp1 = board.create('perpendicular', [l1, p3]);\n})();\n</script>"
            ]
        },
        "PerpendicularPoint": {
            "name": "PerpendicularPoint",
            "shortname": "PerpendicularPoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 281,
            "description": "Construct a perpendicular point.\n\nA perpendicular point is given by a point and a line. It is determined by projecting the given point\northogonal onto the given line. This element should be used in GEONExTReader only. All other applications should\nuse orthogonal projection {@link Orthogonalprojection}.\n\nThis construction may differ from Orthogonalprojection if the point lies on the line.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Point",
            "extends": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p,l",
                    "description": "The constructed point is the orthogonal projection of p onto l.",
                    "type": "JXG.Line_JXG.Point"
                }
            ],
            "example": [
                "\n    var p1 = board.create('point', [0.0, 4.0]);\n    var p2 = board.create('point', [6.0, 1.0]);\n    var l1 = board.create('line', [p1, p2]);\n    var p3 = board.create('point', [3.0, 3.0]);\n\n    var pp1 = board.create('perpendicularpoint', [p3, l1]);\n<div id=\"ded148c9-3536-44c0-ab81-1bb8fa48f3f4\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('ded148c9-3536-44c0-ab81-1bb8fa48f3f4', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0.0, 4.0]);\n  var p2 = board.create('point', [6.0, 1.0]);\n  var l1 = board.create('line', [p1, p2]);\n  var p3 = board.create('point', [3.0, 3.0]);\n  var pp1 = board.create('perpendicularpoint', [p3, l1]);\n})();\n</script>"
            ]
        },
        "PerpendicularSegment": {
            "name": "PerpendicularSegment",
            "shortname": "PerpendicularSegment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 402,
            "description": "This element is used to provide a constructor for a perpendicular segment.\n\nA perpendicular is a composition of two elements: a line segment and a point. The line segment is orthogonal\nto a given line and contains a given point and meets the given line in the perpendicular point.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Line",
            "extends": "Segment",
            "return": {
                "description": "An array containing two elements: A  object in the first component and a\n{@link JXG.Point} element in the second component. The line segment is orthogonal to the given line and meets it\nin the returned point.",
                "type": "@link JXG.Line"
            },
            "throws": {
                "description": "If the elements cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "l,p",
                    "description": "The perpendicular line will be orthogonal to l and\nwill contain p. The perpendicular point is the intersection point of the two lines.",
                    "type": "JXG.Line_JXG.Point"
                }
            ],
            "example": [
                "\n    // Create a perpendicular\n    var p1 = board.create('point', [0.0, 2.0]);\n    var p2 = board.create('point', [2.0, 1.0]);\n    var l1 = board.create('line', [p1, p2]);\n\n    var p3 = board.create('point', [3.0, 3.0]);\n    var perp1 = board.create('perpendicularsegment', [l1, p3]);\n<div id=\"037a6eb2-781d-4b71-b286-763619a63f22\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('037a6eb2-781d-4b71-b286-763619a63f22', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0.0, 2.0]);\n  var p2 = board.create('point', [2.0, 1.0]);\n  var l1 = board.create('line', [p1, p2]);\n  var p3 = board.create('point', [3.0, 3.0]);\n  var perp1 = board.create('perpendicularsegment', [l1, p3]);\n})();\n</script>"
            ]
        },
        "Midpoint": {
            "name": "Midpoint",
            "shortname": "Midpoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 489,
            "description": "The midpoint element constructs a point in the middle of two given points.\n\nA midpoint is given by two points. It is collinear to the given points and the distance\nis the same to each of the given points, i.e. it is in the middle of the given points.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Point",
            "extends": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2",
                    "description": "The constructed point will be in the middle of p1 and p2.",
                    "type": "JXG.Point_JXG.Point"
                },
                {
                    "name": "l",
                    "description": "The midpoint will be in the middle of {@link JXG.Line#point1} and {@link JXG.Line#point2} of\nthe given line l.",
                    "type": "JXG.Line"
                }
            ],
            "example": [
                "\n    // Create base elements: 2 points and 1 line\n    var p1 = board.create('point', [0.0, 2.0]);\n    var p2 = board.create('point', [2.0, 1.0]);\n    var l1 = board.create('segment', [[0.0, 3.0], [3.0, 3.0]]);\n\n    var mp1 = board.create('midpoint', [p1, p2]);\n    var mp2 = board.create('midpoint', [l1]);\n<div id=\"7927ef86-24ae-40cc-afb0-91ff61dd0de7\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var mboard = JXG.JSXGraph.initBoard('7927ef86-24ae-40cc-afb0-91ff61dd0de7', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var mp1 = mboard.create('point', [0.0, 2.0]);\n  var mp2 = mboard.create('point', [2.0, 1.0]);\n  var ml1 = mboard.create('segment', [[0.0, 3.0], [3.0, 3.0]]);\n  var mmp1 = mboard.create('midpoint', [mp1, mp2]);\n  var mmp2 = mboard.create('midpoint', [ml1]);\n})();\n</script>"
            ]
        },
        "Parallelpoint": {
            "name": "Parallelpoint",
            "shortname": "Parallelpoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 612,
            "description": "This element is used to construct a parallel point.\n\nA parallel point is given by three points. Taking the euclidean vector from the first to the\nsecond point, the parallel point is determined by adding that vector to the third point.\nThe line determined by the first two points is parallel to the line determined by the third point and the constructed point.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Point",
            "extends": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": "Taking the euclidean vector <tt>v=p2-p1</tt> the parallel point is determined by\n<tt>p4 = p3+v</tt>",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                },
                {
                    "name": "l,p",
                    "description": "The resulting point will together with p specify a line which is parallel to l.",
                    "type": "JXG.Line_JXG.Point"
                }
            ],
            "example": [
                "\n    var p1 = board.create('point', [0.0, 2.0]);\n    var p2 = board.create('point', [2.0, 1.0]);\n    var p3 = board.create('point', [3.0, 3.0]);\n\n    var pp1 = board.create('parallelpoint', [p1, p2, p3]);\n<div id=\"488c4be9-274f-40f0-a469-c5f70abe1f0e\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('488c4be9-274f-40f0-a469-c5f70abe1f0e', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0.0, 2.0]);\n  var p2 = board.create('point', [2.0, 1.0]);\n  var p3 = board.create('point', [3.0, 3.0]);\n  var pp1 = board.create('parallelpoint', [p1, p2, p3]);\n})();\n</script>"
            ]
        },
        "Parallel": {
            "name": "Parallel",
            "shortname": "Parallel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 753,
            "description": "A parallel is a line through a given point with the same slope as a given line.",
            "pseudo": true,
            "extends": "Line",
            "is_constructor": 1,
            "type": "JXG.Line",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "l,p",
                    "description": "The constructed line contains p and has the same slope as l.",
                    "type": "JXG.Line_JXG.Point"
                }
            ],
            "example": [
                "\n    // Create a parallel\n    var p1 = board.create('point', [0.0, 2.0]);\n    var p2 = board.create('point', [2.0, 1.0]);\n    var l1 = board.create('line', [p1, p2]);\n\n    var p3 = board.create('point', [3.0, 3.0]);\n    var pl1 = board.create('parallel', [l1, p3]);\n<div id=\"24e54f9e-5c4e-4afb-9228-0ef27a59d627\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('24e54f9e-5c4e-4afb-9228-0ef27a59d627', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0.0, 2.0]);\n  var p2 = board.create('point', [2.0, 1.0]);\n  var l1 = board.create('line', [p1, p2]);\n  var p3 = board.create('point', [3.0, 3.0]);\n  var pl1 = board.create('parallel', [l1, p3]);\n})();\n</script>"
            ]
        },
        "Arrowparallel": {
            "name": "Arrowparallel",
            "shortname": "Arrowparallel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 849,
            "description": "An arrow parallel is a parallel segment with an arrow attached.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "Parallel",
            "extends": "Parallel",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "l,p",
                    "description": "The constructed arrow contains p and has the same slope as l.",
                    "type": "JXG.Line_JXG.Point"
                }
            ],
            "example": [
                "\n    // Create a parallel\n    var p1 = board.create('point', [0.0, 2.0]);\n    var p2 = board.create('point', [2.0, 1.0]);\n    var l1 = board.create('line', [p1, p2]);\n\n    var p3 = board.create('point', [3.0, 3.0]);\n    var pl1 = board.create('arrowparallel', [l1, p3]);\n<div id=\"eeacdf99-036f-4e83-aeb6-f7388423e369\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('eeacdf99-036f-4e83-aeb6-f7388423e369', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0.0, 2.0]);\n  var p2 = board.create('point', [2.0, 1.0]);\n  var l1 = board.create('line', [p1, p2]);\n  var p3 = board.create('point', [3.0, 3.0]);\n  var pl1 = board.create('arrowparallel', [l1, p3]);\n})();\n</script>"
            ]
        },
        "Normal": {
            "name": "Normal",
            "shortname": "Normal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 899,
            "description": "Constructs a normal.\n\nA normal is a line through a given point on a element of type line, circle, curve, or turtle and orthogonal to that object.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Line",
            "extends": "JXG.Line",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "o,p",
                    "description": "The constructed line contains p which lies on the object and is orthogonal\nto the tangent to the object in the given point.",
                    "type": "JXG.Line,JXG.Circle,JXG.Curve,JXG.Turtle_JXG.Point"
                },
                {
                    "name": "p",
                    "description": "Works like above, however the object is given by {@link Glider#slideObject}.",
                    "type": "Glider"
                }
            ],
            "example": [
                "\n    // Create a normal to a circle.\n    var p1 = board.create('point', [2.0, 2.0]);\n    var p2 = board.create('point', [3.0, 2.0]);\n    var c1 = board.create('circle', [p1, p2]);\n\n    var norm1 = board.create('normal', [c1, p2]);\n<div id=\"4154753d-3d29-40fb-a860-0b08aa4f3743\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('4154753d-3d29-40fb-a860-0b08aa4f3743', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [2.0, 2.0]);\n  var p2 = board.create('point', [3.0, 2.0]);\n  var c1 = board.create('circle', [p1, p2]);\n  // var p3 = board.create('point', [1.0, 2.0]);\n  var norm1 = board.create('normal', [c1, p2]);\n})();\n</script>"
            ]
        },
        "Bisector": {
            "name": "Bisector",
            "shortname": "Bisector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 1141,
            "description": "A bisector is a line which divides an angle into two equal angles. It is given by three points A, B, and\nC and divides the angle ABC into two equal sized parts.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Line",
            "extends": "JXG.Line",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": "The angle described by <tt>p1</tt>, <tt>p2</tt> and <tt>p3</tt> will\nbe divided into two equal angles.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n    var p1 = board.create('point', [6.0, 4.0]);\n    var p2 = board.create('point', [3.0, 2.0]);\n    var p3 = board.create('point', [1.0, 7.0]);\n\n    var bi1 = board.create('bisector', [p1, p2, p3]);\n<div id=\"0d58cea8-b06a-407c-b27c-0908f508f5a4\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('0d58cea8-b06a-407c-b27c-0908f508f5a4', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [6.0, 4.0]);\n  var p2 = board.create('point', [3.0, 2.0]);\n  var p3 = board.create('point', [1.0, 7.0]);\n  var bi1 = board.create('bisector', [p1, p2, p3]);\n})();\n</script>"
            ]
        },
        "Bisectorlines": {
            "name": "Bisectorlines",
            "shortname": "Bisectorlines",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 1220,
            "description": "Bisector lines are similar to {@link Bisector} but takes two lines as parent elements. The resulting element is\na composition of two lines.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Composition",
            "extends": "JXG.Composition",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "l1,l2",
                    "description": "The four angles described by the lines <tt>l1</tt> and <tt>l2</tt> will each\nbe divided into two equal angles.",
                    "type": "JXG.Line_JXG.Line"
                }
            ],
            "example": [
                "\n    var p1 = board.create('point', [6.0, 4.0]);\n    var p2 = board.create('point', [3.0, 2.0]);\n    var p3 = board.create('point', [1.0, 7.0]);\n    var p4 = board.create('point', [3.0, 0.0]);\n    var l1 = board.create('line', [p1, p2]);\n    var l2 = board.create('line', [p3, p4]);\n\n    var bi1 = board.create('bisectorlines', [l1, l2]);\n<div id=\"3121ff67-44f0-4dda-bb10-9cda0b80bf18\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('3121ff67-44f0-4dda-bb10-9cda0b80bf18', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [6.0, 4.0]);\n  var p2 = board.create('point', [3.0, 2.0]);\n  var p3 = board.create('point', [1.0, 7.0]);\n  var p4 = board.create('point', [3.0, 0.0]);\n  var l1 = board.create('line', [p1, p2]);\n  var l2 = board.create('line', [p3, p4]);\n  var bi1 = board.create('bisectorlines', [l1, l2]);\n})();\n</script>"
            ]
        },
        "Circumcenter": {
            "name": "Circumcenter",
            "shortname": "Circumcenter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 1349,
            "description": "Constructs the midpoint of a {@link Circumcircle}. Like the circumcircle the circumcenter\nis constructed by providing three points.\n\nA circumcenter is given by three points which are all lying on the circle with the\nconstructed circumcenter as the midpoint.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Point",
            "extends": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": "The constructed point is the midpoint of the circle determined\nby p1, p2, and p3.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n    var p1 = board.create('point', [0.0, 2.0]);\n    var p2 = board.create('point', [2.0, 1.0]);\n    var p3 = board.create('point', [3.0, 3.0]);\n\n    var cc1 = board.create('circumcenter', [p1, p2, p3]);\n<div id=\"e8a40f95-bf30-4eb4-88a8-f4d5495261fd\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var ccmex1_board = JXG.JSXGraph.initBoard('e8a40f95-bf30-4eb4-88a8-f4d5495261fd', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var ccmex1_p1 = ccmex1_board.create('point', [0.0, 2.0]);\n  var ccmex1_p2 = ccmex1_board.create('point', [6.0, 1.0]);\n  var ccmex1_p3 = ccmex1_board.create('point', [3.0, 7.0]);\n  var ccmex1_cc1 = ccmex1_board.create('circumcenter', [ccmex1_p1, ccmex1_p2, ccmex1_p3]);\n})();\n</script>"
            ]
        },
        "Incenter": {
            "name": "Incenter",
            "shortname": "Incenter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 1438,
            "description": "Constructs the incenter of the triangle described by the three given points.{@link http://mathworld.wolfram.com/Incenter.html}",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Point",
            "extends": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": "The constructed point is the incenter of the triangle described\nby p1, p2, and p3.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n    var p1 = board.create('point', [0.0, 2.0]);\n    var p2 = board.create('point', [2.0, 1.0]);\n    var p3 = board.create('point', [3.0, 3.0]);\n\n    var ic1 = board.create('incenter', [p1, p2, p3]);\n<div id=\"e8a40f95-bf30-4eb4-88a8-a2d5495261fd\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('e8a40f95-bf30-4eb4-88a8-a2d5495261fd', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0.0, 2.0]);\n  var p2 = board.create('point', [6.0, 1.0]);\n  var p3 = board.create('point', [3.0, 7.0]);\n  var ic1 = board.create('incenter', [p1, p2, p3]);\n})();\n</script>"
            ]
        },
        "Circumcircle": {
            "name": "Circumcircle",
            "shortname": "Circumcircle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 1497,
            "description": "A circumcircle is circle through three given points.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Circle",
            "extends": "JXG.Circle",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": "The constructed element is the circle determined by <tt>p1</tt>, <tt>p2</tt>, and <tt>p3</tt>.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n    var p1 = board.create('point', [0.0, 2.0]);\n    var p2 = board.create('point', [2.0, 1.0]);\n    var p3 = board.create('point', [3.0, 3.0]);\n\n    var cc1 = board.create('circumcircle', [p1, p2, p3]);\n<div id=\"e65c9861-0bf0-402d-af57-3ab11962f5ac\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('e65c9861-0bf0-402d-af57-3ab11962f5ac', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0.0, 2.0]);\n  var p2 = board.create('point', [6.0, 1.0]);\n  var p3 = board.create('point', [3.0, 7.0]);\n  var cc1 = board.create('circumcircle', [p1, p2, p3]);\n})();\n</script>"
            ]
        },
        "Incircle": {
            "name": "Incircle",
            "shortname": "Incircle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 1562,
            "description": "An incircle is given by three points and is the incenter of\nthe triangle spanned by these three points.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Circle",
            "extends": "JXG.Circle",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": "The constructed point is the midpoint of the incircle of\n<tt>p1</tt>, <tt>p2</tt>, and <tt>p3</tt>.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n    var p1 = board.create('point', [0.0, 2.0]);\n    var p2 = board.create('point', [2.0, 1.0]);\n    var p3 = board.create('point', [3.0, 3.0]);\n\n    var ic1 = board.create('incircle', [p1, p2, p3]);\n<div id=\"e65c9861-0bf0-402d-af57-2ab12962f8ac\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('e65c9861-0bf0-402d-af57-2ab12962f8ac', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0.0, 2.0]);\n  var p2 = board.create('point', [6.0, 1.0]);\n  var p3 = board.create('point', [3.0, 7.0]);\n  var ic1 = board.create('incircle', [p1, p2, p3]);\n})();\n</script>"
            ]
        },
        "Reflection": {
            "name": "Reflection",
            "shortname": "Reflection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 1644,
            "description": "This element is used to construct a reflected point.\n\nA reflected point is given by a point and a line. It is determined by the reflection of the given point\nagainst the given line.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Point",
            "extends": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p,l",
                    "description": "The reflection point is the reflection of p against l.",
                    "type": "JXG.Point_JXG.Line"
                }
            ],
            "example": [
                "\n    var p1 = board.create('point', [0.0, 4.0]);\n    var p2 = board.create('point', [6.0, 1.0]);\n    var l1 = board.create('line', [p1, p2]);\n    var p3 = board.create('point', [3.0, 3.0]);\n\n    var rp1 = board.create('reflection', [p3, l1]);\n<div id=\"087a798e-a36a-4f52-a2b4-29a23a69393b\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var rboard = JXG.JSXGraph.initBoard('087a798e-a36a-4f52-a2b4-29a23a69393b', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var rp1 = rboard.create('point', [0.0, 4.0]);\n  var rp2 = rboard.create('point', [6.0, 1.0]);\n  var rl1 = rboard.create('line', [rp1, rp2]);\n  var rp3 = rboard.create('point', [3.0, 3.0]);\n  var rrp1 = rboard.create('reflection', [rp3, rl1]);\n})();\n</script>"
            ]
        },
        "Mirrorpoint": {
            "name": "Mirrorpoint",
            "shortname": "Mirrorpoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 1733,
            "description": "A mirror point will be constructed.\n\nA mirror point is determined by the reflection of a given point against another given point.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Point",
            "extends": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2",
                    "description": "The constructed point is the reflection of p2 against p1.",
                    "type": "JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n    var p1 = board.create('point', [3.0, 3.0]);\n    var p2 = board.create('point', [6.0, 1.0]);\n\n    var mp1 = board.create('mirrorpoint', [p1, p2]);\n<div id=\"7eb2a814-6c4b-4caa-8cfa-4183a948d25b\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var mboard = JXG.JSXGraph.initBoard('7eb2a814-6c4b-4caa-8cfa-4183a948d25b', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var mp1 = mboard.create('point', [3.0, 3.0]);\n  var mp2 = mboard.create('point', [6.0, 1.0]);\n  var mmp1 = mboard.create('mirrorpoint', [mp1, mp2]);\n})();\n</script>"
            ]
        },
        "Integral": {
            "name": "Integral",
            "shortname": "Integral",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 1789,
            "description": "This element is used to visualize the integral of a given curve over a given interval.\n\nThe Integral element is used to visualize the area under a given curve over a given interval\nand to calculate the area's value. For that a polygon and gliders are used. The polygon displays the area,\nthe gliders are used to change the interval dynamically.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Curve",
            "extends": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "i,c",
                    "description": "The constructed element covers the area between the curve <tt>c</tt> and the x-axis\nwithin the interval <tt>i</tt>.",
                    "type": "Array_JXG.Curve"
                }
            ],
            "example": [
                "\n    var c1 = board.create('functiongraph', [function (t) { return t*t*t; }]);\n    var i1 = board.create('integral', [[-1.0, 4.0], c1]);\n<div id=\"d45d7188-6624-4d6e-bebb-1efa2a305c8a\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var intex1_board = JXG.JSXGraph.initBoard('d45d7188-6624-4d6e-bebb-1efa2a305c8a', {boundingbox: [-5, 5, 5, -5], axis: true, showcopyright: false, shownavigation: false});\n  var intex1_c1 = intex1_board.create('functiongraph', [function (t) { return Math.cos(t)*t; }]);\n  var intex1_i1 = intex1_board.create('integral', [[-2.0, 2.0], intex1_c1]);\n})();\n</script>"
            ]
        },
        "Grid": {
            "name": "Grid",
            "shortname": "Grid",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 2115,
            "description": "Creates a grid to support the user with element placement.\n\nA grid is a set of vertical and horizontal lines to support the user with element placement. This method\ndraws such a grid on the given board. It uses options given in {@link JXG.Options#grid}. This method does not\ntake any parent elements. It is usually instantiated on the board's creation via the attribute <tt>grid</tt> set\nto true.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Curve",
            "extends": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "example": [
                "\n    grid = board.create('grid', []);\n<div id=\"a9a0671f-7a51-4fa2-8697-241142c00940\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n board = JXG.JSXGraph.initBoard('a9a0671f-7a51-4fa2-8697-241142c00940', {boundingbox:[-4, 6, 10, -6], axis: false, grid: false, keepaspectratio: true});\n grid = board.create('grid', []);\n})();\n</script>"
            ]
        },
        "Inequality": {
            "name": "Inequality",
            "shortname": "Inequality",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/composition.js",
            "line": 2238,
            "description": "Creates an area indicating the solution of a linear inequality.\n\nDisplay the solution set of a linear inequality (less than or equal to).",
            "pseudo": true,
            "params": [
                {
                    "name": "l",
                    "description": "The area drawn will be the area below this line. With the attribute\ninverse:true, the inequality 'greater than or equal to' is shown.",
                    "type": "JXG.Line"
                }
            ],
            "is_constructor": 1,
            "type": "JXG.Curve",
            "extends": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "example": [
                "\n    var p = board.create('point', [1, 3]),\n        q = board.create('point', [-2, -4]),\n        l = board.create('line', [p, q]),\n        ineq = board.create('inequality', [l]);\n    ineq = board.create('inequality', [l]);\n<div id=\"2b703006-fd98-11e1-b79e-ef9e591c002e\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n var board = JXG.JSXGraph.initBoard('2b703006-fd98-11e1-b79e-ef9e591c002e', {boundingbox:[-4, 6, 10, -6], axis: true, grid: false, keepaspectratio: true}),\n     p = board.create('point', [1, 3]),\n     q = board.create('point', [-2, -4]),\n     l = board.create('line', [p, q]),\n     ineq = board.create('inequality', [l]);\n})();\n</script>",
                "\n    // Plot the inequality\n    //     y >= 2/3 x + 1\n    // or\n    //     0 >= -3y + 2x +1\n    var l = board.create('line', [1, 2, -3]),\n        ineq = board.create('inequality', [l], {inverse:true});\n<div id=\"1ded3812-2da4-4323-abaf-1db4bad1bfbd\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n var board = JXG.JSXGraph.initBoard('1ded3812-2da4-4323-abaf-1db4bad1bfbd', {boundingbox:[-4, 6, 10, -6], axis: true, grid: false, keepaspectratio: true}),\n     l = board.create('line', [1, 2, -3]),\n     ineq = board.create('inequality', [l], {inverse:true});\n})();\n</script>"
            ]
        },
        "Ellipse": {
            "name": "Ellipse",
            "shortname": "Ellipse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/conic.js",
            "line": 58,
            "description": "This element is used to provide a constructor for an ellipse. An ellipse is given by two points (the foci) and a third point on the the ellipse or\nthe length of the major axis.",
            "pseudo": true,
            "extends": "Conic",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "point1,point2,point3",
                    "description": "Parent elements can be three elements either of type {@link JXG.Point} or array of\nnumbers describing the coordinates of a point. In the latter case the point will be constructed automatically as a fixed invisible point.",
                    "type": "JXG.Point,array_JXG.Point,array_JXG.Point,array"
                },
                {
                    "name": "point1,point2,number",
                    "description": "Parent elements can be two elements either of type {@link JXG.Point} or array of\nnumbers describing the coordinates of a point. The third parameter is a number/function which defines the length of the major axis\nOptional parameters four and five are numbers which define the curve length (e.g. start/end). Default values are -pi and pi.",
                    "type": "JXG.Point,array_JXG.Point,array_number,function"
                }
            ],
            "example": [
                "\n    // Create an Ellipse by three points\n    var A = board.create('point', [-1,4]);\n    var B = board.create('point', [-1,-4]);\n    var C = board.create('point', [1,1]);\n    var el = board.create('ellipse',[A,B,C]);\n<div id=\"a4d7fb6f-8708-4e45-87f2-2379ae2bd2c0\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('a4d7fb6f-8708-4e45-87f2-2379ae2bd2c0', {boundingbox:[-6,6,6,-6], axis:true, keepaspectratio:true, showcopyright: false, shownavigation: false});\n  var A = board.create('point', [-1,4]);\n  var B = board.create('point', [-1,-4]);\n  var C = board.create('point', [1,1]);\n  var el = board.create('ellipse',[A,B,C]);\n})();\n</script>"
            ]
        },
        "Hyperbola": {
            "name": "Hyperbola",
            "shortname": "Hyperbola",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/conic.js",
            "line": 277,
            "description": "This element is used to provide a constructor for an hyperbola. An hyperbola is given by two points (the foci) and a third point on the the hyperbola or\nthe length of the major axis.",
            "pseudo": true,
            "extends": "Conic",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "point1,point2,point3",
                    "description": "Parent elements can be three elements either of type {@link JXG.Point} or array of\nnumbers describing the coordinates of a point. In the latter case the point will be constructed automatically as a fixed invisible point.",
                    "type": "JXG.Point,array_JXG.Point,array_JXG.Point,array"
                },
                {
                    "name": "point1,point2,number",
                    "description": "Parent elements can be two elements either of type {@link JXG.Point} or array of\nnumbers describing the coordinates of a point. The third parameter is a number/function which defines the length of the major axis\nOptional parameters four and five are numbers which define the curve length (e.g. start/end). Default values are -pi and pi.",
                    "type": "JXG.Point,array_JXG.Point,array_number,function"
                }
            ],
            "example": [
                "\n    // Create an Hyperbola by three points\n    var A = board.create('point', [-1,4]);\n    var B = board.create('point', [-1,-4]);\n    var C = board.create('point', [1,1]);\n    var el = board.create('hyperbola',[A,B,C]);\n<div id=\"cf99049d-a3fe-407f-b936-27d76550f8c4\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('cf99049d-a3fe-407f-b936-27d76550f8c4', {boundingbox:[-6,6,6,-6], axis:true, keepaspectratio:true, showcopyright: false, shownavigation: false});\n  var A = board.create('point', [-1,4]);\n  var B = board.create('point', [-1,-4]);\n  var C = board.create('point', [1,1]);\n  var el = board.create('hyperbola',[A,B,C]);\n})();\n</script>"
            ]
        },
        "Parabola": {
            "name": "Parabola",
            "shortname": "Parabola",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/conic.js",
            "line": 465,
            "description": "This element is used to provide a constructor for a parabola. A parabola is given by one point (the focus) and a line (the directrix).",
            "pseudo": true,
            "extends": "Conic",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "point,line",
                    "description": "Parent elements are a point and a line.\nOptional parameters three and four are numbers which define the curve length (e.g. start/end). Default values are -pi and pi.",
                    "type": "JXG.Point,array_JXG.Line"
                }
            ],
            "example": [
                "\n    // Create a parabola by a point C and a line l.\n    var A = board.create('point', [-1,4]);\n    var B = board.create('point', [-1,-4]);\n    var l = board.create('line', [A,B]);\n    var C = board.create('point', [1,1]);\n    var el = board.create('parabola',[C,l]);\n<div id=\"524d1aae-217d-44d4-ac58-a19c7ab1de36\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('524d1aae-217d-44d4-ac58-a19c7ab1de36', {boundingbox:[-6,6,6,-6], axis:true, keepaspectratio:true, showcopyright: false, shownavigation: false});\n  var A = board.create('point', [-1,4]);\n  var B = board.create('point', [-1,-4]);\n  var l = board.create('line', [A,B]);\n  var C = board.create('point', [1,1]);\n  var el = board.create('parabola',[C,l]);\n})();\n</script>"
            ]
        },
        "Conic": {
            "name": "Conic",
            "shortname": "Conic",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/conic.js",
            "line": 631,
            "description": "This element is used to provide a constructor for a generic conic section uniquely defined by five points.",
            "pseudo": true,
            "extends": "JXG.Curve",
            "is_constructor": 1,
            "type": "JXG.Conic",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "a,b,c,d,e",
                    "description": "Parent elements are five points.",
                    "type": "JXG.Point,Array_JXG.Point,Array_JXG.Point,Array_JXG.Point,Array_JXG.Point,Array"
                },
                {
                    "name": "a_00,a_11,a_22,a_01,a_12,a_22",
                    "description": "6 numbers",
                    "type": "Number_Number_Number_Number_Number_Number"
                }
            ],
            "example": [
                "\n     // Create a conic section through the points A, B, C, D, and E.\n     var A = board.create('point', [1,5]);\n     var B = board.create('point', [1,2]);\n     var C = board.create('point', [2,0]);\n     var D = board.create('point', [0,0]);\n     var E = board.create('point', [-1,5]);\n     var conic = board.create('conic',[A,B,C,D,E]);\n <div id=\"2d79bd6a-db9b-423c-9cba-2497f0b06320\" style=\"width: 300px; height: 300px;\"></div>\n <script type=\"text/javascript\">\n (function(){\n   var board = JXG.JSXGraph.initBoard('2d79bd6a-db9b-423c-9cba-2497f0b06320', {boundingbox:[-6,6,6,-6], axis:true, keepaspectratio:true, showcopyright: false, shownavigation: false});\n   var A = board.create('point', [1,5]);\n   var B = board.create('point', [1,2]);\n   var C = board.create('point', [2,0]);\n   var D = board.create('point', [0,0]);\n   var E = board.create('point', [-1,5]);\n   var conic = board.create('conic',[A,B,C,D,E]);\n })();\n </script>"
            ]
        },
        "Input": {
            "name": "Input",
            "shortname": "Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/input.js",
            "line": 59,
            "description": "",
            "pseudo": true,
            "extends": "Text",
            "is_constructor": 1,
            "type": "JXG.Text",
            "params": [
                {
                    "name": "x,y,value,label",
                    "description": "Parent elements for input elements.\n<p>\nx and y are the coordinates of the lower left corner of the text box. The position of the text is fixed,\nx and y are numbers. The position is variable if x or y are functions.\n<p>\nThe default value of the input element may be given as string.\n<p>\nThe label of the input element may be given  as string.",
                    "type": "Number,function_number,function_String_String"
                }
            ],
            "example": [
                "\n     // Create an input element at position [1,4].\n     var input = board.create('input', [0, 1, 'x^2', 'f(x)='], {});\n     var f = board.jc.snippet('sin(x)', true, 'x', false);\n     var graph = board.create('functiongraph',[f,\n             function() {\n               var c = new JXG.Coords(JXG.COORDS_BY_SCREEN,[0,0],board);\n               return c.usrCoords[1];\n             },\n             function() {\n                var c = new JXG.Coords(JXG.COORDS_BY_SCREEN,[board.canvasWidth,0],board);\n                return c.usrCoords[1];\n             }\n        ]);\n\n     var updateGraph = function() {\n         graph.Y = board.jc.snippet(input.Value(), true, 'x', false);\n         graph.updateCurve();\n         board.update();\n     }\n     \n     var button = board.create('button', [2, 2.5, 'Update graph', updateGraph]);\n<div id=\"c70f55f1-21ba-4719-a37d-a93ae2943faa\" style=\"width: 500px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n  var board = JXG.JSXGraph.initBoard('c70f55f1-21ba-4719-a37d-a93ae2943faa', {boundingbox: [-3, 6, 5, -3], axis: true, showcopyright: false, shownavigation: false});\n  var input = board.create('input', [1, 4, 'x^2', 'f(x)='], {});\n  var f = board.jc.snippet('sin(x)', true, 'x', false);\n  var graph = board.create('functiongraph',[f,\n   function() {\n     var c = new JXG.Coords(JXG.COORDS_BY_SCREEN,[0,0],board);\n     return c.usrCoords[1];\n   },\n   function() {\n     var c = new JXG.Coords(JXG.COORDS_BY_SCREEN,[board.canvasWidth,0],board);\n     return c.usrCoords[1];\n   }\n ]);\n var updateGraph = function() {\n     graph.Y = board.jc.snippet(input.Value(), true, 'x', false);\n     graph.updateCurve();\n     board.update();\n };\n var button = board.create('button', [2, 2.5, 'Update graph', updateGraph]);\n})();\n</script>"
            ]
        },
        "Locus": {
            "name": "Locus",
            "shortname": "Locus",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/locus.js",
            "line": 63,
            "description": "The locus element is used to visualize the curve a given point describes.",
            "pseudo": true,
            "is_constructor": 1,
            "type": "JXG.Curve",
            "extends": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p",
                    "description": "The constructed curve is the geometric locus of the given point.",
                    "type": "JXG.Point"
                }
            ],
            "example": [
                "\n    // This examples needs JXG.Server up and running, otherwise it won't work.\n    p1 = board.create('point', [0, 0]);\n    p2 = board.create('point', [6, -1]);\n    c1 = board.create('circle', [p1, 2]);\n    c2 = board.create('circle', [p2, 1.5]);\n    g1 = board.create('glider', [6, 3, c1]);\n    c3 = board.create('circle', [g1, 4]);\n    g2 = board.create('intersection', [c2,c3,0]);\n    m1 = board.create('midpoint', [g1,g2]);\n    loc = board.create('locus', [m1], {strokeColor: 'red'});\n<div id=\"d45d7188-6624-4d6e-bebb-1efa2a305c8a\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function(){\n board = JXG.JSXGraph.initBoard('d45d7188-6624-4d6e-bebb-1efa2a305c8a', {boundingbox:[-4, 6, 10, -6], axis: true, grid: false, keepaspectratio: true});\n p1 = board.create('point', [0, 0]);\n p2 = board.create('point', [6, -1]);\n c1 = board.create('circle', [p1, 2]);\n c2 = board.create('circle', [p2, 1.5]);\n g1 = board.create('glider', [6, 3, c1]);\n c3 = board.create('circle', [g1, 4]);\n g2 = board.create('intersection', [c2,c3,0]);\n m1 = board.create('midpoint', [g1,g2]);\n loc = board.create('locus', [m1], {strokeColor: 'red'});\n})();\n</script>"
            ]
        },
        "Tapemeasure": {
            "name": "Tapemeasure",
            "shortname": "Tapemeasure",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/measure.js",
            "line": 58,
            "description": "A tape measure can be used to measure distances between points.",
            "pseudo": true,
            "extends": "Segment",
            "is_constructor": 1,
            "type": "JXG.Segment",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "start,end,",
                    "description": "The two arrays give the initial position where the tape measure\nis drawn on the board.",
                    "type": "Array_Array"
                }
            ],
            "example": [
                "\n    // Create atape measure\n    var p1 = board.create('point', [0,0]);\n    var p2 = board.create('point', [1,1]);\n    var p3 = board.create('point', [3,1]);\n    var tape = board.create('tapemeasure', [[1, 2], [4, 2]], {name:'dist'});\n<div id=\"6d9a2cda-22fe-4cd1-9d94-34283b1bdc01\" style=\"width: 200px; height: 200px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('6d9a2cda-22fe-4cd1-9d94-34283b1bdc01', {boundingbox: [-1, 5, 5, -1], axis: true, showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0,0]);\n  var p2 = board.create('point', [1,1]);\n  var p3 = board.create('point', [3,1]);\n  var tape = board.create('tapemeasure', [[1, 2], [4, 2]], {name:'dist'} );\n})();\n</script>"
            ]
        },
        "Sector": {
            "name": "Sector",
            "shortname": "Sector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/sector.js",
            "line": 57,
            "description": "A circular sector is a subarea of the area enclosed by a circle. It is enclosed by two radii and an arc.",
            "pseudo": true,
            "extends": "JXG.Curve",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.\n\nFirst possiblity of input parameters are:",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p1",
                    "description": "A sector is defined by three points: The sector's center <tt>p1</tt>,\na second point <tt>p2</tt> defining the radius and a third point <tt>p3</tt> defining the angle of the sector. The\nSector is always drawn counter clockwise from <tt>p2</tt> to <tt>p3</tt>\n\nSecond possibility of input parameters are:",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                },
                {
                    "name": "line,",
                    "description": "line2, coords1 or direction1, coords2 or direction2, radius The sector is defined by two lines.\nThe two legs which define the sector are given by two coordinates arrays which are project initially two the two lines or by two directions (+/- 1).\nThe last parameter is the radius of the sector.",
                    "type": "JXG.Line_JXG.Line_array,number_array,number_number,function"
                }
            ],
            "example": [
                "\n    // Create a sector out of three free points\n    var p1 = board.create('point', [1.5, 5.0]),\n        p2 = board.create('point', [1.0, 0.5]),\n        p3 = board.create('point', [5.0, 3.0]),\n\n        a = board.create('sector', [p1, p2, p3]);\n<div id=\"49f59123-f013-4681-bfd9-338b89893156\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('49f59123-f013-4681-bfd9-338b89893156', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n  p1 = board.create('point', [1.5, 5.0]),\n  p2 = board.create('point', [1.0, 0.5]),\n  p3 = board.create('point', [5.0, 3.0]),\n  a = board.create('sector', [p1, p2, p3]);\n})();\n</script>",
                "\n    // Create a sector out of two lines, two directions and a radius\n    var p1 = board.create('point', [-1, 4]),\n        p2 = board.create('point', [4, 1]),\n        q1 = board.create('point', [-2, -3]),\n        q2 = board.create('point', [4,3]),\n\n        li1 = board.create('line', [p1,p2], {strokeColor:'black', lastArrow:true}),\n        li2 = board.create('line', [q1,q2], {lastArrow:true}),\n\n        sec1 = board.create('sector', [li1, li2, [5.5, 0], [4, 3], 3]),\n        sec2 = board.create('sector', [li1, li2, 1, -1, 4]);\n\n<div id=\"bb9e2809-9895-4ff1-adfa-c9c71d50aa53\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('bb9e2809-9895-4ff1-adfa-c9c71d50aa53', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n p1 = board.create('point', [-1, 4]),\n p2 = board.create('point', [4, 1]),\n q1 = board.create('point', [-2, -3]),\n q2 = board.create('point', [4,3]),\n li1 = board.create('line', [p1,p2], {strokeColor:'black', lastArrow:true}),\n li2 = board.create('line', [q1,q2], {lastArrow:true}),\n sec1 = board.create('sector', [li1, li2, [5.5, 0], [4, 3], 3]),\n sec2 = board.create('sector', [li1, li2, 1, -1, 4]);\n})();\n</script>"
            ]
        },
        "CircumcircleSector": {
            "name": "CircumcircleSector",
            "shortname": "CircumcircleSector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/sector.js",
            "line": 551,
            "description": "A circumcircle sector is different from a {@link Sector} mostly in the way the parent elements are interpreted.\nAt first, the circum centre is determined from the three given points. Then the sector is drawn from <tt>p1</tt> through\n<tt>p2</tt> to <tt>p3</tt>.",
            "pseudo": true,
            "extends": "Sector",
            "is_constructor": 1,
            "type": "Sector",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p1",
                    "description": "A circumcircle sector is defined by the circumcircle which is determined\nby these three given points. The circumcircle sector is always drawn from <tt>p1</tt> through <tt>p2</tt> to <tt>p3</tt>.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n    // Create an arc out of three free points\n    var p1 = board.create('point', [1.5, 5.0]),\n        p2 = board.create('point', [1.0, 0.5]),\n        p3 = board.create('point', [5.0, 3.0]),\n\n        a = board.create('circumcirclesector', [p1, p2, p3]);\n<div id=\"695cf0d6-6d7a-4d4d-bfc9-34c6aa28cd04\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('695cf0d6-6d7a-4d4d-bfc9-34c6aa28cd04', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n  p1 = board.create('point', [1.5, 5.0]),\n  p2 = board.create('point', [1.0, 0.5]),\n  p3 = board.create('point', [5.0, 3.0]),\n  a = board.create('circumcirclesector', [p1, p2, p3]);\n})();\n</script>"
            ]
        },
        "MinorSector": {
            "name": "MinorSector",
            "shortname": "MinorSector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/sector.js",
            "line": 616,
            "description": "A minor sector is a sector of a circle having measure less than or equal to\n180 degrees (&pi; radians). It is defined by a center, one point that\ndefines the radius, and a third point that defines the angle of the sector.",
            "pseudo": true,
            "extends": "Curve",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": ". Minor sector is a sector of a circle around p1 having measure less than or equal to\n180 degrees (&pi; radians) and starts at p2. The radius is determined by p2, the angle by p3.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n    // Create sector out of three free points\n    var p1 = board.create('point', [2.0, 2.0]);\n    var p2 = board.create('point', [1.0, 0.5]);\n    var p3 = board.create('point', [3.5, 1.0]);\n\n    var a = board.create('minorsector', [p1, p2, p3]);\n<div id=\"af27ddcc-265f-428f-90dd-d31ace945800\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('af27ddcc-265f-428f-90dd-d31ace945800', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n p1 = board.create('point', [2.0, 2.0]),\n p2 = board.create('point', [1.0, 0.5]),\n p3 = board.create('point', [3.5, 1.0]),\n a = board.create('minorsector', [p1, p2, p3]);\n})();\n</script>"
            ]
        },
        "Angle": {
            "name": "Angle",
            "shortname": "Angle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/sector.js",
            "line": 691,
            "description": "The angle element is used to denote an angle defined by three points. Visually it is just a {@link Sector}\nelement with a radius not defined by the parent elements but by an attribute <tt>radius</tt>. As opposed to the sector,\nan angle has two angle points and no radius point.\nSector is displayed if type==\"sector\".\nIf type==\"square\", instead of a sector a parallelogram is displayed.\nIn case of type==\"auto\", a square is displayed if the angle is near orthogonal.\nIf no name is provided the angle label is automatically set to a lower greek letter.",
            "pseudo": true,
            "extends": "Sector",
            "is_constructor": 1,
            "type": "Sector",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.\nFirst possiblity of input parameters are:",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p1",
                    "description": "An angle is always drawn counterclockwise from <tt>p1</tt> to\n<tt>p3</tt> around <tt>p2</tt>.\n\nSecond possibility of input parameters are:",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                },
                {
                    "name": "line,",
                    "description": "line2, coords1 or direction1, coords2 or direction2, radius The angle is defined by two lines.\nThe two legs which define the angle are given by two coordinate arrays.\nThe points given by these coordinate arrays are projected initially (i.e. only once) onto the two lines.\nThe other possibility is to supply directions (+/- 1).",
                    "type": "JXG.Line_JXG.Line_array|number_array|number"
                }
            ],
            "example": [
                "\n    // Create an angle out of three free points\n    var p1 = board.create('point', [5.0, 3.0]),\n        p2 = board.create('point', [1.0, 0.5]),\n        p3 = board.create('point', [1.5, 5.0]),\n\n        a = board.create('angle', [p1, p2, p3]),\n        t = board.create('text', [4, 4, function() { return a.Value().toFixed(2); }]);\n<div id=\"a34151f9-bb26-480a-8d6e-9b8cbf789ae5\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('a34151f9-bb26-480a-8d6e-9b8cbf789ae5', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n p1 = board.create('point', [5.0, 3.0]),\n p2 = board.create('point', [1.0, 0.5]),\n p3 = board.create('point', [1.5, 5.0]),\n a = board.create('angle', [p1, p2, p3]),\n t = board.create('text', [4, 4, function() { return a.Value().toFixed(2); }]);\n})();\n</script>",
                "\n    // Create an angle out of two lines and two directions\n     var p1 = board.create('point', [-1, 4]),\n         p2 = board.create('point', [4, 1]),\n         q1 = board.create('point', [-2, -3]),\n         q2 = board.create('point', [4,3]),\n\n         li1 = board.create('line', [p1,p2], {strokeColor:'black', lastArrow:true}),\n         li2 = board.create('line', [q1,q2], {lastArrow:true}),\n\n         a1 = board.create('angle', [li1, li2, [5.5, 0], [4, 3]], { radius:1 }),\n         a2 = board.create('angle', [li1, li2, 1, -1], { radius:2 });\n\n<div id=\"3a667ddd-63dc-4594-b5f1-afac969b371f\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('3a667ddd-63dc-4594-b5f1-afac969b371f', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n  p1 = board.create('point', [-1, 4]),\n p2 = board.create('point', [4, 1]),\n q1 = board.create('point', [-2, -3]),\n q2 = board.create('point', [4,3]),\n li1 = board.create('line', [p1,p2], {strokeColor:'black', lastArrow:true}),\n li2 = board.create('line', [q1,q2], {lastArrow:true}),\n a1 = board.create('angle', [li1, li2, [5.5, 0], [4, 3]], { radius:1 }),\n a2 = board.create('angle', [li1, li2, 1, -1], { radius:2 });\n})();\n</script>"
            ]
        },
        "NonReflexAngle": {
            "name": "NonReflexAngle",
            "shortname": "NonReflexAngle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/sector.js",
            "line": 1119,
            "description": "A non-reflex angle is the acute or obtuse instance of an angle.\nIt is defined by a center, one point that\ndefines the radius, and a third point that defines the angle of the sector.",
            "pseudo": true,
            "extends": "Angle",
            "is_constructor": 1,
            "type": "Sector",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": ". Minor sector is a sector of a circle around p1 having measure less than or equal to\n180 degrees (&pi; radians) and starts at p2. The radius is determined by p2, the angle by p3.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n    // Create a non-reflex angle out of three free points\n    var p1 = board.create('point', [5.0, 3.0]),\n        p2 = board.create('point', [1.0, 0.5]),\n        p3 = board.create('point', [1.5, 5.0]),\n\n        a = board.create('nonreflexangle', [p1, p2, p3], {radius: 2}),\n        t = board.create('text', [4, 4, function() { return a.Value().toFixed(2); }]);\n<div id=\"d0ab6d6b-63a7-48b2-8749-b02bb5e744f9\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('d0ab6d6b-63a7-48b2-8749-b02bb5e744f9', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n  p1 = board.create('point', [5.0, 3.0]),\n  p2 = board.create('point', [1.0, 0.5]),\n  p3 = board.create('point', [1.5, 5.0]),\n  a = board.create('nonreflexangle', [p1, p2, p3], {radius: 2}),\n  t = board.create('text', [4, 4, function() { return a.Value().toFixed(2); }]);\n})();\n</script>"
            ]
        },
        "ReflexAngle": {
            "name": "ReflexAngle",
            "shortname": "ReflexAngle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/sector.js",
            "line": 1167,
            "description": "A reflex angle is the neither acute nor obtuse instance of an angle.\nIt is defined by a center, one point that\ndefines the radius, and a third point that defines the angle of the sector.",
            "pseudo": true,
            "extends": "Angle",
            "is_constructor": 1,
            "type": "Sector",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "p1,p2,p3",
                    "description": ". Minor sector is a sector of a circle around p1 having measure less than or equal to\n180 degrees (&pi; radians) and starts at p2. The radius is determined by p2, the angle by p3.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ],
            "example": [
                "\n    // Create a non-reflex angle out of three free points\n    var p1 = board.create('point', [5.0, 3.0]),\n        p2 = board.create('point', [1.0, 0.5]),\n        p3 = board.create('point', [1.5, 5.0]),\n\n        a = board.create('reflexangle', [p1, p2, p3], {radius: 2}),\n        t = board.create('text', [4, 4, function() { return a.Value().toFixed(2); }]);\n<div id=\"f2a577f2-553d-4f9f-a895-2d6d4b8c60e8\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\nvar board = JXG.JSXGraph.initBoard('f2a577f2-553d-4f9f-a895-2d6d4b8c60e8', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\np1 = board.create('point', [5.0, 3.0]),\np2 = board.create('point', [1.0, 0.5]),\np3 = board.create('point', [1.5, 5.0]),\na = board.create('reflexangle', [p1, p2, p3], {radius: 2}),\nt = board.create('text', [4, 4, function() { return a.Value().toFixed(2); }]);\n})();\n</script>"
            ]
        },
        "Slider": {
            "name": "Slider",
            "shortname": "Slider",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/slider.js",
            "line": 64,
            "description": "",
            "pseudo": true,
            "extends": "Glider",
            "is_constructor": 1,
            "type": "JXG.Point",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Exception"
            },
            "params": [
                {
                    "name": "start,end,data",
                    "description": "The first two arrays give the start and the end where the slider is drawn\non the board. The third array gives the start and the end of the range the slider operates as the first resp. the\nthird component of the array. The second component of the third array gives its start value.",
                    "type": "Array_Array_Array"
                }
            ],
            "example": [
                "\n    // Create a slider with values between 1 and 10, initial position is 5.\n    var s = board.create('slider', [[1, 2], [3, 2], [1, 5, 10]]);\n<div id=\"cfb51cde-2603-4f18-9cc4-1afb452b374d\" style=\"width: 200px; height: 200px;\"></div>\n<script type=\"text/javascript\">\n(function () {\nvar board = JXG.JSXGraph.initBoard('cfb51cde-2603-4f18-9cc4-1afb452b374d', {boundingbox: [-1, 5, 5, -1], axis: true, showcopyright: false, shownavigation: false});\nvar s = board.create('slider', [[1, 2], [3, 2], [1, 5, 10]]);\n})();\n</script>",
                "\n    // Create a slider taking integer values between 1 and 50. Initial value is 50.\n    var s = board.create('slider', [[1, 3], [3, 1], [1, 10, 50]], {snapWidth: 1});\n<div id=\"e17128e6-a25d-462a-9074-49460b0d66f4\" style=\"width: 200px; height: 200px;\"></div>\n<script type=\"text/javascript\">\n (function () {\n var board = JXG.JSXGraph.initBoard('e17128e6-a25d-462a-9074-49460b0d66f4', {boundingbox: [-1, 5, 5, -1], axis: true, showcopyright: false, shownavigation: false});\n var s = board.create('slider', [[1, 3], [3, 1], [1, 10, 50]], {snapWidth: 1});\n })();\n</script>"
            ]
        },
        "Slopetriangle": {
            "name": "Slopetriangle",
            "shortname": "Slopetriangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/element/slopetriangle.js",
            "line": 67,
            "description": "Slope triangle for a point on a line.",
            "pseudo": true,
            "extends": "JXG.Line",
            "is_constructor": 1,
            "type": "JXG.Polygon",
            "params": [
                {
                    "name": "t",
                    "description": "A tangent based on a glider on some object, e.g. curve, circle, line or turtle.\n\n**Variant 2:**",
                    "type": "JXG.Line"
                },
                {
                    "name": "li",
                    "description": "A line",
                    "type": "JXG.Line"
                },
                {
                    "name": "p",
                    "description": "A point on that line.\n The user has to take care that the point is a member of the line.",
                    "type": "JXG.Point"
                }
            ],
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "example": [
                "\n    // Create a slopetriangle on a tangent\n    var f = board.create('plot', ['sin(x)']),\n        g = board.create('glider', [1, 2, f]),\n        t = board.create('tangent', [g]),\n\n        st = board.create('slopetriangle', [t]);\n\n<div id=\"951ccb6a-52bc-4dc2-80e9-43db064f0f1b\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('951ccb6a-52bc-4dc2-80e9-43db064f0f1b', {boundingbox: [-5, 5, 5, -5], axis: true, showcopyright: false, shownavigation: false}),\n  f = board.create('plot', ['sin(x)']),\n  g = board.create('glider', [1, 2, f]),\n  t = board.create('tangent', [g]),\n  st = board.create('slopetriangle', [t]);\n})();\n</script>",
                "\n    // Create a glider on a line and a slope triangle on that line\n    var p1 = board.create('point', [-2, 3]),\n        p2 = board.create('point', [2, -3]),\n        li = board.create('line', [p1, p2]),\n        p = board.create('glider', [0, 0, li]),\n\n        st = board.create('slopetriangle', [li, p]);\n\n<div id=\"b52f451c-22cf-4677-852a-0bb9d764ee95\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('b52f451c-22cf-4677-852a-0bb9d764ee95', {boundingbox: [-5, 5, 5, -5], axis: true, showcopyright: false, shownavigation: false}),\n  p1 = board.create('point', [-2, 3]),\n  p2 = board.create('point', [2, -3]),\n  li = board.create('line', [p1, p2]),\n  p = board.create('glider', [0, 0, li]),\n  st = board.create('slopetriangle', [li, p]);\n})();\n</script>"
            ]
        },
        "JXG.Complex": {
            "name": "JXG.Complex",
            "shortname": "JXG.Complex",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/math/complex.js",
            "line": 44,
            "description": "This class is for calculating with complex numbers.\nA class for complex arithmetics JXG.Complex is defined in this\nfile. Also a namespace JXG.C is included to provide instance-independent\narithmetic functions.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "Real part.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "Imaginary part.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ]
        },
        "JXG.C": {
            "name": "JXG.C",
            "shortname": "JXG.C",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/math/complex.js",
            "line": 242,
            "description": "JXG.C is the complex number (name)space. It provides functions to calculate with\ncomplex numbers (defined in {@link JXG.Complex}). With this namespace you don't have to modify\nyour existing complex numbers, e.g. to add two complex numbers:\n\n    var z1 = new JXG.Complex(1, 0);\n    var z2 = new JXG.Complex(0, 1);\n    z = JXG.C.add(z1, z1);\n\nz1 and z2 here remain unmodified. With the object oriented approach above this\nsection the code would look like:\n\n    var z1 = new JXG.Complex(1, 0);\n    var z2 = new JXG.Complex(0, 1);\n    var z = new JXG.Complex(z1);\n    z.add(z2);",
            "static": 1
        },
        "JXG.Math.Geometry": {
            "name": "JXG.Math.Geometry",
            "shortname": "JXG.Math.Geometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/math/geometry.js",
            "line": 56,
            "description": "Math.Geometry namespace definition",
            "static": 1
        },
        "JXG.Math": {
            "name": "JXG.Math",
            "shortname": "JXG.Math",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/math/math.js",
            "line": 82,
            "description": "Mathematics subroutines\n\nHere, the namespace JXG.Math is defined, which is the base namespace\nfor namespaces like Math.Numerics, Math.Algebra, Math.Statistics etc.",
            "static": 1
        },
        "JXG.Math.Numerics": {
            "name": "JXG.Math.Numerics",
            "shortname": "JXG.Math.Numerics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/math/numerics.js",
            "line": 80,
            "description": "The JXG.Math.Numerics namespace holds numerical algorithms, constants, and variables.",
            "static": 1
        },
        "JXG.Math.Poly": {
            "name": "JXG.Math.Poly",
            "shortname": "JXG.Math.Poly",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/math/poly.js",
            "line": 51,
            "description": "The JXG.Math.Poly namespace holds algorithms to create and manipulate multi-variate polynomials.",
            "static": 1
        },
        "JXG.Math.Poly.Ring": {
            "name": "JXG.Math.Poly.Ring",
            "shortname": "JXG.Math.Poly.Ring",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/math/poly.js",
            "line": 58,
            "description": "Define a polynomial ring over R.",
            "params": [
                {
                    "name": "variables",
                    "description": "List of indeterminates.",
                    "type": "Array"
                }
            ]
        },
        "JXG.Math.Poly.Monomial": {
            "name": "JXG.Math.Poly.Monomial",
            "shortname": "JXG.Math.Poly.Monomial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/math/poly.js",
            "line": 77,
            "description": "Define a monomial over the polynomial ring <tt>ring</tt>.",
            "params": [
                {
                    "name": "ring",
                    "description": "",
                    "type": "JXG.Math.Poly.Ring"
                },
                {
                    "name": "coefficient",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "exponents",
                    "description": "An array of exponents, corresponding to ring",
                    "type": "Array"
                }
            ]
        },
        "JXG.Math.Poly.Polynomial": {
            "name": "JXG.Math.Poly.Polynomial",
            "shortname": "JXG.Math.Poly.Polynomial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/math/poly.js",
            "line": 159,
            "description": "A polynomial is a sum of monomials.",
            "params": [
                {
                    "name": "ring",
                    "description": "A polynomial ring.",
                    "type": "JXG.Math.Poly.Ring"
                },
                {
                    "name": "str",
                    "description": "TODO String representation of the polynomial, will be parsed.",
                    "type": "String"
                }
            ]
        },
        "JXG.Math.Quadtree": {
            "name": "JXG.Math.Quadtree",
            "shortname": "JXG.Math.Quadtree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/math/qdt.js",
            "line": 46,
            "description": "Instantiate a new quad tree.",
            "params": [
                {
                    "name": "bbox",
                    "description": "Bounding box of the new quad (sub)tree.",
                    "type": "Array"
                }
            ],
            "is_constructor": 1
        },
        "JXG.Math.Statistics": {
            "name": "JXG.Math.Statistics",
            "shortname": "JXG.Math.Statistics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/math/statistics.js",
            "line": 46,
            "description": "Functions for mathematical statistics. Most functions are like in the statistics package R.",
            "static": 1
        },
        "JXG.Math.Symbolic": {
            "name": "JXG.Math.Symbolic",
            "shortname": "JXG.Math.Symbolic",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "file": "src/math/symbolic.js",
            "line": 60,
            "description": "The JXG.Math.Symbolic namespace holds algorithms for symbolic computations.",
            "static": 1
        },
        "JXG.AbstractRenderer": {
            "name": "JXG.AbstractRenderer",
            "shortname": "JXG.AbstractRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "namespace": "",
            "file": "src/renderer/abstract.js",
            "line": 67,
            "description": "This class defines the interface to the graphics part of JSXGraph. This class is an abstract class, it\nactually does not render anything. This is up to the {@link JXG.SVGRenderer}, {@link JXG.VMLRenderer},\nand {@link JXG.CanvasRenderer} classes. We strongly discourage you from using the methods in these classes\ndirectly. Only the methods which are defined in this class and are not marked as private are guaranteed\nto exist in any renderer instance you can access via {@link JXG.Board#renderer}. But not all methods may\nwork as expected.</p>\n<p>The methods of this renderer can be divided into different categories:\n<dl>\n    <dt>Draw basic elements</dt>\n    <dd>In this category we find methods to draw basic elements like {@link JXG.Point}, {@link JXG.Line},\n    and {@link JXG.Curve} as well as assisting methods tightly bound to these basic painters. You do not\n    need to implement these methods in a descendant renderer but instead implement the primitive drawing\n    methods described below. This approach is encouraged when you're using a XML based rendering engine\n    like VML and SVG. If you want to use a bitmap based rendering technique you are supposed to override\n    these methods instead of the primitive drawing methods.</dd>\n    <dt>Draw primitives</dt>\n    <dd>This category summarizes methods to handle primitive nodes. As creation and management of these nodes\n    is different among different the rendering techniques most of these methods are purely virtual and need\n    proper implementation if you choose to not overwrite the basic element drawing methods.</dd>\n    <dt>Attribute manipulation</dt>\n    <dd>In XML based renders you have to manipulate XML nodes and their attributes to change the graphics.\n    For that purpose attribute manipulation methods are defined to set the color, opacity, and other things.\n    Please note that some of these methods are required in bitmap based renderers, too, because some elements\n    like {@link JXG.Text} can be HTML nodes floating over the construction.</dd>\n    <dt>Renderer control</dt>\n    <dd>Methods to clear the drawing board or to stop and to resume the rendering engine.</dd>\n</dl></p>",
            "is_constructor": 1,
            "references": [
                "JXG.SVGRenderer",
                "JXG.VMLRenderer",
                "JXG.CanvasRenderer"
            ]
        },
        "JXG.CanvasRenderer": {
            "name": "JXG.CanvasRenderer",
            "shortname": "JXG.CanvasRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "namespace": "",
            "file": "src/renderer/canvas.js",
            "line": 57,
            "description": "Uses HTML Canvas to implement the rendering methods defined in {@link JXG.AbstractRenderer}.",
            "extends": "JXG.AbstractRenderer",
            "params": [
                {
                    "name": "container",
                    "description": "Reference to a DOM node containing the board.",
                    "type": "Node"
                },
                {
                    "name": "dim",
                    "description": "The dimensions of the board",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "references": [
                "JXG.AbstractRenderer"
            ]
        },
        "JXG.NoRenderer": {
            "name": "JXG.NoRenderer",
            "shortname": "JXG.NoRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "namespace": "",
            "file": "src/renderer/no.js",
            "line": 53,
            "description": "This renderer draws nothing. It is intended to be used in environments where none of our rendering engines\nare available, e.g. WebWorkers.",
            "extends": "JXG.AbstractRenderer"
        },
        "JXG.SVGRenderer": {
            "name": "JXG.SVGRenderer",
            "shortname": "JXG.SVGRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "namespace": "",
            "file": "src/renderer/svg.js",
            "line": 52,
            "description": "Uses SVG to implement the rendering methods defined in {@link JXG.AbstractRenderer}.",
            "extends": "JXG.AbstractRenderer",
            "params": [
                {
                    "name": "container",
                    "description": "Reference to a DOM node containing the board.",
                    "type": "Node"
                },
                {
                    "name": "dim",
                    "description": "The dimensions of the board",
                    "type": "Object",
                    "props": [
                        {
                            "name": "width",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "references": [
                "JXG.AbstractRenderer"
            ]
        },
        "JXG.VMLRenderer": {
            "name": "JXG.VMLRenderer",
            "shortname": "JXG.VMLRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "namespace": "",
            "file": "src/renderer/vml.js",
            "line": 52,
            "description": "Uses VML to implement the rendering methods defined in {@link JXG.AbstractRenderer}.",
            "extends": "JXG.AbstractRenderer",
            "params": [
                {
                    "name": "container",
                    "description": "Reference to a DOM node containing the board.",
                    "type": "Node"
                }
            ],
            "references": [
                "JXG.AbstractRenderer"
            ]
        },
        "JXG.Util.Base64": {
            "name": "JXG.Util.Base64",
            "shortname": "JXG.Util.Base64",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "namespace": "",
            "file": "src/utils/base64.js",
            "line": 81,
            "description": "Base64 routines",
            "static": 1
        },
        "EventEmitter": {
            "name": "EventEmitter",
            "shortname": "EventEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "namespace": "",
            "file": "src/utils/event.js",
            "line": 49,
            "static": 1
        },
        "JXG.Util.Unzip": {
            "name": "JXG.Util.Unzip",
            "shortname": "JXG.Util.Unzip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "namespace": "",
            "file": "src/utils/zip.js",
            "line": 120,
            "description": "Unzip class\n\nClass for gunzipping, unzipping and base64 decoding of files.\nIt is used for reading GEONExT, Geogebra and Intergeo files.\n\nOnly Huffman codes are decoded in gunzip.\nThe code is based on the source code for gunzip.c by Pasi Ojala",
            "references": [
                "http://www.cs.tut.fi/~albert/Dev/gunzip/gunzip.c",
                "http://www.cs.tut.fi/~albert"
            ]
        },
        "JXG.JSXGraph": {
            "name": "JXG.JSXGraph",
            "shortname": "JXG.JSXGraph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "namespace": "",
            "file": "src/jsxgraph.js",
            "line": 63,
            "description": "Constructs a new JSXGraph singleton object.\nThe JXG.JSXGraph singleton stores all properties required.\nto load, save, create and free a board."
        },
        "JXG": {
            "name": "JXG",
            "shortname": "JXG",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "namespace": ""
        },
        "registerReader": {
            "name": "registerReader",
            "shortname": "registerReader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "namespace": ""
        },
        "JXG.Options": {
            "name": "JXG.Options",
            "shortname": "JXG.Options",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "JXG",
            "namespace": "",
            "file": "src/options.js",
            "line": 50,
            "description": "Options Namespace\n\nThese are the default options of the board and of all geometry elements.",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "src/base/board.js",
            "line": 60,
            "fileoverview": "The JXG.Board class is defined in this file. JXG.Board controls all properties and methods\nused to manage a geonext board like managing geometric elements, managing mouse and touch events, etc.",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 99,
            "description": "Board is in no special mode, objects are highlighted on mouse over and objects may be\nclicked to start drag&drop.",
            "type": "Number",
            "itemtype": "property",
            "name": "BOARD_MODE_NONE",
            "final": 1,
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 108,
            "description": "Board is in drag mode, objects aren't highlighted on mouse over and the object referenced in\n{JXG.Board#mouse} is updated on mouse movement.",
            "type": "Number",
            "itemtype": "property",
            "name": "BOARD_MODE_DRAG",
            "final": 1,
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 117,
            "description": "In this mode a mouse move changes the origin's screen coordinates.",
            "type": "Number",
            "itemtype": "property",
            "name": "BOARD_MODE_MOVE_ORIGIN",
            "final": 1,
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 125,
            "description": "Update is made with low quality, e.g. graphs are evaluated at a lesser amount of points.",
            "type": "Number",
            "itemtype": "property",
            "name": "BOARD_QUALITY_LOW",
            "final": 1,
            "references": [
                "JXG.Board#updateQuality"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 134,
            "description": "Update is made with high quality, e.g. graphs are evaluated at much more points.",
            "type": "Number",
            "itemtype": "property",
            "name": "BOARD_QUALITY_HIGH",
            "final": 1,
            "references": [
                "JXG.Board#updateQuality"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 143,
            "description": "Update is made with high quality, e.g. graphs are evaluated at much more points.\n{{#crossLink \"JXG.Board/updateQuality\"}}{{/crossLink}}",
            "type": "Number",
            "itemtype": "property",
            "name": "BOARD_MODE_ZOOM",
            "final": 1,
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 152,
            "description": "Pointer to the document element containing the board.",
            "type": "Object",
            "itemtype": "property",
            "name": "document",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 165,
            "description": "The html-id of the html element containing the board.",
            "type": "String",
            "itemtype": "property",
            "name": "container",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 172,
            "description": "Pointer to the html element containing the board.",
            "type": "Object",
            "itemtype": "property",
            "name": "containerObj",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 183,
            "description": "A reference to this boards renderer.",
            "type": "JXG.AbstractRenderer",
            "itemtype": "property",
            "name": "renderer",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 190,
            "description": "Grids keeps track of all grids attached to this board.",
            "type": "Array",
            "itemtype": "property",
            "name": "grids",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 197,
            "description": "Some standard options",
            "type": "JXG.Options",
            "itemtype": "property",
            "name": "options",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 204,
            "description": "TODO",
            "type": "{Object}",
            "itemtype": "property",
            "name": "attr",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 211,
            "description": "Dimension of the board.",
            "default": "2",
            "type": "Number",
            "itemtype": "property",
            "name": "dimension",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 219,
            "description": "The board's jessie code interpreter/rte instance",
            "type": "JXG.JessieCode",
            "itemtype": "property",
            "name": "jc",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 227,
            "description": "Coordinates of the boards origin. This a object with the two properties\nusrCoords and scrCoords. usrCoords always equals [1, 0, 0] and scrCoords\nstores the boards origin in homogeneous screen coordinates.",
            "type": "Object",
            "itemtype": "property",
            "name": "origin",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 238,
            "description": "Zoom factor in X direction. It only stores the zoom factor to be able\nto get back to 100% in zoom100().",
            "type": "Number",
            "itemtype": "property",
            "name": "zoomX",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 246,
            "description": "Zoom factor in Y direction. It only stores the zoom factor to be able\nto get back to 100% in zoom100().",
            "type": "Number",
            "itemtype": "property",
            "name": "zoomY",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 254,
            "description": "The number of pixels which represent one unit in user-coordinates in x direction.",
            "type": "Number",
            "itemtype": "property",
            "name": "unitX",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 261,
            "description": "The number of pixels which represent one unit in user-coordinates in y direction.",
            "type": "Number",
            "itemtype": "property",
            "name": "unitY",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 268,
            "description": "Keep aspect ratio if bounding box is set and the width/height ratio differs from the\nwidth/height ratio of the canvas.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "keepaspectratio",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 276,
            "description": "Canvas width.",
            "type": "Number",
            "itemtype": "property",
            "name": "canvasWidth",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 283,
            "description": "Canvas Height",
            "type": "Number",
            "itemtype": "property",
            "name": "canvasHeight",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 301,
            "description": "An array containing all other boards that are updated after this board has been updated.",
            "type": "Array",
            "itemtype": "property",
            "name": "dependentBoards",
            "references": [
                "JXG.Board#addChild",
                "JXG.Board#removeChild"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 310,
            "description": "During the update process this is set to false to prevent an endless loop.",
            "default": "false",
            "type": "Boolean",
            "itemtype": "property",
            "name": "inUpdate",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 318,
            "description": "An associative array containing all geometric objects belonging to the board. Key is the id of the object and value is a reference to the object.",
            "type": "Object",
            "itemtype": "property",
            "name": "objects",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 325,
            "description": "An array containing all geometric objects on the board in the order of construction.",
            "type": "{Array}",
            "itemtype": "property",
            "name": "ObjectsList",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 332,
            "description": "An associative array containing all groups belonging to the board. Key is the id of the group and value is a reference to the object.",
            "type": "Object",
            "itemtype": "property",
            "name": "groups",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 339,
            "description": "Stores all the objects that are currently running an animation.",
            "type": "Object",
            "itemtype": "property",
            "name": "animationObjects",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 346,
            "description": "An associative array containing all highlighted elements belonging to the board.",
            "type": "Object",
            "itemtype": "property",
            "name": "highlightedObjects",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 353,
            "description": "Number of objects ever created on this board. This includes every object, even invisible and deleted ones.",
            "type": "Number",
            "itemtype": "property",
            "name": "numObjects",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 360,
            "description": "An associative array to store the objects of the board by name. the name of the object is the key and value is a reference to the object.",
            "type": "Object",
            "itemtype": "property",
            "name": "elementsByName",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 367,
            "description": "The board mode the board is currently in. Possible values are\n<ul>\n<li>JXG.Board.BOARD_MODE_NONE</li>\n<li>JXG.Board.BOARD_MODE_DRAG</li>\n<li>JXG.Board.BOARD_MODE_MOVE_ORIGIN</li>\n</ul>",
            "type": "Number",
            "itemtype": "property",
            "name": "mode",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 379,
            "description": "The update quality of the board. In most cases this is set to {@link JXG.Board#BOARD_QUALITY_HIGH}.\nIf {@link JXG.Board#mode} equals {@link JXG.Board#BOARD_MODE_DRAG} this is set to\n{@link JXG.Board#BOARD_QUALITY_LOW} to speed up the update process by e.g. reducing the number of\nevaluation points when plotting functions. Possible values are\n<ul>\n<li>BOARD_QUALITY_LOW</li>\n<li>BOARD_QUALITY_HIGH</li>\n</ul>",
            "type": "Number",
            "itemtype": "property",
            "name": "updateQuality",
            "references": [
                "JXG.Board#mode"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 394,
            "description": "If true updates are skipped.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "isSuspendedRedraw",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 403,
            "description": "The distance from the mouse to the dragged object in x direction when the user clicked the mouse button.",
            "type": "Number",
            "itemtype": "property",
            "name": "drag_dx",
            "references": [
                "JXG.Board#drag_dy"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 411,
            "description": "The distance from the mouse to the dragged object in y direction when the user clicked the mouse button.",
            "type": "Number",
            "itemtype": "property",
            "name": "drag_dy",
            "references": [
                "JXG.Board#drag_dx"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 419,
            "description": "The last position where a drag event has been fired.",
            "type": "Array",
            "itemtype": "property",
            "name": "drag_position",
            "references": [
                "JXG.Board#moveObject"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 427,
            "description": "References to the object that is dragged with the mouse on the board.",
            "type": "{@link JXG.GeometryElement}.",
            "itemtype": "property",
            "name": "mouse",
            "references": [
                "{JXG.Board#touches}"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 435,
            "description": "Keeps track on touched elements, like {@link JXG.Board#mouse} does for mouse events.",
            "type": "Array",
            "itemtype": "property",
            "name": "touches",
            "references": [
                "{JXG.Board#mouse}"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 443,
            "description": "A string containing the XML text of the construction. This is set in {@link JXG.FileReader#parseString}.\nOnly useful if a construction is read from a GEONExT-, Intergeo-, Geogebra-, or Cinderella-File.",
            "type": "String",
            "itemtype": "property",
            "name": "xmlString",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 451,
            "description": "Cached result of getCoordsTopLeftCorner for touch/mouseMove-Events to save some DOM operations.",
            "type": "Array",
            "itemtype": "property",
            "name": "cPos",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 458,
            "description": "Contains the last time (epoch, msec) since the last touchMove event which was not thrown away or since\ntouchStart because Android's Webkit browser fires too much of them.",
            "type": "Number",
            "itemtype": "property",
            "name": "touchMoveLast",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 466,
            "description": "Contains the last time (epoch, msec) since the last getCoordsTopLeftCorner call which was not thrown away.",
            "type": "Number",
            "itemtype": "property",
            "name": "positionAccessLast",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 473,
            "description": "Collects all elements that triggered a mouse down event.",
            "type": "Array",
            "itemtype": "property",
            "name": "downObjects",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 484,
            "description": "Full updates are needed after zoom and axis translates. This saves some time during an update.",
            "default": "false",
            "type": "Boolean",
            "itemtype": "property",
            "name": "needsFullUpdate",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 492,
            "description": "If reducedUpdate is set to true then only the dragged element and few (e.g. 2) following\nelements are updated during mouse move. On mouse up the whole construction is\nupdated. This enables us to be fast even on very slow devices.",
            "type": "Boolean",
            "default": "false",
            "itemtype": "property",
            "name": "reducedUpdate",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 502,
            "description": "The current color blindness deficiency is stored in this property. If color blindness is not emulated\nat the moment, it's value is 'none'.",
            "type": "String",
            "itemtype": "property",
            "name": "currentCBDef",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 510,
            "description": "If GEONExT constructions are displayed, then this property should be set to true.\nAt the moment there should be no difference. But this may change.\nThis is set in {@link JXG.GeonextReader#readGeonext}.",
            "type": "Boolean",
            "default": "false",
            "itemtype": "property",
            "name": "geonextCompatibilityMode",
            "references": [
                "JXG.GeonextReader#readGeonext"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 527,
            "description": "A flag which tells if the board registers mouse events.",
            "type": "Boolean",
            "default": "false",
            "itemtype": "property",
            "name": "hasMouseHandlers",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 535,
            "description": "A flag which tells if the board registers touch events.",
            "type": "Boolean",
            "default": "false",
            "itemtype": "property",
            "name": "hasTouchHandlers",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 543,
            "description": "A flag which stores if the board registered pointer events.",
            "type": "{Boolean}",
            "default": "false",
            "itemtype": "property",
            "name": "hasPointerHandlers",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 551,
            "description": "This bool flag stores the current state of the mobile Safari specific gesture event handlers.",
            "type": "{boolean}",
            "default": "false",
            "itemtype": "property",
            "name": "hasGestureHandlers",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 559,
            "description": "A flag which tells if the board the JXG.Board#mouseUpListener is currently registered.",
            "type": "Boolean",
            "default": "false",
            "itemtype": "property",
            "name": "hasMouseUp",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 567,
            "description": "A flag which tells if the board the JXG.Board#touchEndListener is currently registered.",
            "type": "Boolean",
            "default": "false",
            "itemtype": "property",
            "name": "hasTouchEnd",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 575,
            "description": "A flag which tells us if the board has a pointerUp event registered at the moment.",
            "type": "{Boolean}",
            "default": "false",
            "itemtype": "property",
            "name": "hasPointerUp",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 583,
            "description": "Offset for large coords elements like images",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "default": "[0, 0]",
            "itemtype": "property",
            "name": "_drag_offset",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 624,
            "description": "Generates an unique name for the given object. The result depends on the objects type, if the\nobject is a {@link JXG.Point}, capital characters are used, if it is of type {@link JXG.Line}\nonly lower case characters are used. If object is of type {@link JXG.Polygon}, a bunch of lower\ncase characters prefixed with P_ are used. If object is of type {@link JXG.Circle} the name is\ngenerated using lower case characters. prefixed with k_ is used. In any other case, lower case\nchars prefixed with s_ is used.",
            "itemtype": "method",
            "name": "generateName",
            "params": [
                {
                    "name": "object",
                    "description": "Reference of an JXG.GeometryElement that is to be named.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Unique name for the object.",
                "type": "String"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 706,
            "description": "Generates unique id for a board. The result is randomly generated and prefixed with 'jxgBoard'.",
            "itemtype": "method",
            "name": "generateId",
            "return": {
                "description": "Unique id for a board.",
                "type": "String"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 722,
            "description": "Composes an id for an element. If the ID is empty ('' or null) a new ID is generated, depending on the\nobject type. Additionally, the id of the label is set. As a side effect {@link JXG.Board#numObjects}\nis updated.",
            "itemtype": "method",
            "name": "setId",
            "params": [
                {
                    "name": "obj",
                    "description": "Reference of an geometry object that needs an id.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Type of the object.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Unique id for an element.",
                "type": "String"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 750,
            "description": "After construction of the object the visibility is set\nand the label is constructed if necessary.",
            "itemtype": "method",
            "name": "finalizeAdding",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to add.",
                    "type": "Object"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 774,
            "description": "Calculates mouse coordinates relative to the boards container.",
            "itemtype": "method",
            "name": "getCoordsTopLeftCorner",
            "return": {
                "description": "Array of coordinates relative the boards container top left corner.",
                "type": "Array"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 888,
            "description": "Get the position of the mouse in screen coordinates, relative to the upper left corner\nof the host tag.",
            "itemtype": "method",
            "name": "getMousePosition",
            "params": [
                {
                    "name": "e",
                    "description": "Event object given by the browser.",
                    "type": "Event"
                },
                {
                    "name": "i",
                    "description": "Only use in case of touch events. This determines which finger to use and should not be set\nfor mouseevents.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Contains the mouse coordinates in user coordinates, ready  for {@link JXG.Coords}",
                "type": "Array"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 930,
            "description": "Initiate moving the origin. This is used in mouseDown and touchStart listeners.",
            "itemtype": "method",
            "name": "initMoveOrigin",
            "params": [
                {
                    "name": "x",
                    "description": "Current mouse/touch coordinates",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Current mouse/touch coordinates",
                    "type": "Number"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 944,
            "description": "Collects all elements below the current mouse pointer and fulfilling the following constraints:\n<ul><li>isDraggable</li><li>visible</li><li>not fixed</li><li>not frozen</li></ul>",
            "itemtype": "method",
            "name": "initMoveObject",
            "params": [
                {
                    "name": "x",
                    "description": "Current mouse/touch coordinates",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "current mouse/touch coordinates",
                    "type": "Number"
                },
                {
                    "name": "evt",
                    "description": "An event object",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "What type of event? 'touch' or 'mouse'.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A list of geometric elements.",
                "type": "Array"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1031,
            "description": "Moves an object.",
            "itemtype": "method",
            "name": "moveObject",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate",
                    "type": "Number"
                },
                {
                    "name": "o",
                    "description": "The touch object that is dragged: {JXG.Board#mouse} or {JXG.Board#touches}.",
                    "type": "Object"
                },
                {
                    "name": "evt",
                    "description": "The event object.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "Mouse or touch event?",
                    "type": "String"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1086,
            "description": "Moves elements in multitouch mode.",
            "itemtype": "method",
            "name": "twoFingerMove",
            "params": [
                {
                    "name": "p1",
                    "description": "x,y coordinates of first touch",
                    "type": "Array"
                },
                {
                    "name": "p2",
                    "description": "x,y coordinates of second touch",
                    "type": "Array"
                },
                {
                    "name": "o",
                    "description": "The touch object that is dragged: {JXG.Board#touches}.",
                    "type": "Object"
                },
                {
                    "name": "evt",
                    "description": "The event object that lead to this movement.",
                    "type": "Object"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1121,
            "description": "Moves a line or polygon with two fingers",
            "itemtype": "method",
            "name": "twoFingerTouchObject",
            "params": [
                {
                    "name": "np1c",
                    "description": "x,y coordinates of first touch",
                    "type": "JXG.Coords"
                },
                {
                    "name": "np2c",
                    "description": "x,y coordinates of second touch",
                    "type": "JXG.Coords"
                },
                {
                    "name": "o",
                    "description": "The touch object that is dragged: {JXG.Board#touches}.",
                    "type": "Object"
                },
                {
                    "name": "drag",
                    "description": "The object that is dragged:",
                    "type": "Object"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1195,
            "description": "Moves a circle with two fingers",
            "itemtype": "method",
            "name": "twoFingerTouchCircle",
            "params": [
                {
                    "name": "np1c",
                    "description": "x,y coordinates of first touch",
                    "type": "JXG.Coords"
                },
                {
                    "name": "np2c",
                    "description": "x,y coordinates of second touch",
                    "type": "JXG.Coords"
                },
                {
                    "name": "o",
                    "description": "The touch object that is dragged: {JXG.Board#touches}.",
                    "type": "Object"
                },
                {
                    "name": "drag",
                    "description": "The object that is dragged:",
                    "type": "Object"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1253,
            "description": "TODO",
            "itemtype": "method",
            "name": "highlightElements",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "evt",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1301,
            "description": "Helper function which returns a reasonable starting point for the object being dragged.\nFormerly known as initXYstart().",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "saveStartPos",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to be dragged",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "targets",
                    "description": "Array of targets. It is changed by this function.",
                    "type": "Array"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1356,
            "description": "TODO",
            "itemtype": "method",
            "name": "mouseOriginMoveStart",
            "params": [
                {
                    "name": "evt",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*|boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1374,
            "description": "TODO",
            "itemtype": "method",
            "name": "mouseOriginMove",
            "params": [
                {
                    "name": "evt",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1392,
            "description": "TODO",
            "itemtype": "method",
            "name": "touchOriginMoveStart",
            "params": [
                {
                    "name": "evt",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*|boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1412,
            "description": "TODO",
            "itemtype": "method",
            "name": "touchOriginMove",
            "params": [
                {
                    "name": "evt",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1430,
            "description": "TODO",
            "itemtype": "method",
            "name": "originMoveEnd",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1445,
            "description": "Add all possible event handlers to the board object",
            "itemtype": "method",
            "name": "addEventHandlers",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1458,
            "description": "Registers the MSPointer* event handlers.",
            "itemtype": "method",
            "name": "addPointerEventHandlers",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1478,
            "description": "Registers mouse move, down and wheel event handlers.",
            "itemtype": "method",
            "name": "addMouseEventHandlers",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1507,
            "description": "Register touch start and move and gesture start and change event handlers.",
            "itemtype": "method",
            "name": "addTouchEventHandlers",
            "params": [
                {
                    "name": "appleGestures",
                    "description": "If set to false the gesturestart and gesturechange event handlers\nwill not be registered.",
                    "type": "Boolean"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1528,
            "description": "Remove MSPointer* Event handlers.",
            "itemtype": "method",
            "name": "removePointerEventHandlers",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1558,
            "description": "De-register mouse event handlers.",
            "itemtype": "method",
            "name": "removeMouseEventHandlers",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1579,
            "description": "Remove all registered touch event handlers.",
            "itemtype": "method",
            "name": "removeTouchEventHandlers",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1603,
            "description": "Remove all event handlers from the board object",
            "itemtype": "method",
            "name": "removeEventHandlers",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1613,
            "description": "Handler for click on left arrow in the navigation bar",
            "itemtype": "method",
            "name": "clickLeftArrow",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1623,
            "description": "Handler for click on right arrow in the navigation bar",
            "itemtype": "method",
            "name": "clickRightArrow",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1633,
            "description": "Handler for click on up arrow in the navigation bar",
            "itemtype": "method",
            "name": "clickUpArrow",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1643,
            "description": "Handler for click on down arrow in the navigation bar",
            "itemtype": "method",
            "name": "clickDownArrow",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1653,
            "description": "Triggered on iOS/Safari while the user inputs a gesture (e.g. pinch) and is used to zoom into the board. Only works on iOS/Safari.",
            "itemtype": "method",
            "name": "gestureChangeListener",
            "params": [
                {
                    "name": "evt",
                    "description": "Browser event object",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1686,
            "description": "Called by iOS/Safari as soon as the user starts a gesture (only works on iOS/Safari).",
            "itemtype": "method",
            "name": "gestureStartListener",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1712,
            "description": "This method is called by the browser when a pointing device is pressed on the screen.",
            "itemtype": "method",
            "name": "pointerDownListener",
            "params": [
                {
                    "name": "evt",
                    "description": "The browsers event object.",
                    "type": "Event"
                },
                {
                    "name": "object",
                    "description": "If the object to be dragged is already known, it can be submitted via this parameter",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "...",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1850,
            "description": "Called periodically by the browser while the user moves a pointing device across the screen.",
            "itemtype": "method",
            "name": "pointerMoveListener",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 1933,
            "description": "Triggered as soon as the user stops touching the device with at least one finger.",
            "itemtype": "method",
            "name": "pointerUpListener",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2000,
            "description": "This method is called by the browser when a finger touches the surface of the touch-device.",
            "itemtype": "method",
            "name": "touchStartListener",
            "params": [
                {
                    "name": "evt",
                    "description": "The browsers event object.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "...",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2176,
            "description": "Called periodically by the browser while the user moves his fingers across the device.",
            "itemtype": "method",
            "name": "touchMoveListener",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2262,
            "description": "Triggered as soon as the user stops touching the device with at least one finger.",
            "itemtype": "method",
            "name": "touchEndListener",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2390,
            "description": "This method is called by the browser when the mouse button is clicked.",
            "itemtype": "method",
            "name": "mouseDownListener",
            "params": [
                {
                    "name": "evt",
                    "description": "The browsers event object.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "True if no element is found under the current mouse pointer, false otherwise.",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2463,
            "description": "This method is called by the browser when the mouse button is released.",
            "itemtype": "method",
            "name": "mouseUpListener",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2501,
            "description": "This method is called by the browser when the mouse is moved.",
            "itemtype": "method",
            "name": "mouseMoveListener",
            "params": [
                {
                    "name": "evt",
                    "description": "The browsers event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2537,
            "description": "Handler for mouse wheel events. Used to zoom in and out of the board.",
            "itemtype": "method",
            "name": "mouseWheelListener",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2568,
            "description": "Updates and displays a little info box to show coordinates of current selected points.",
            "itemtype": "method",
            "name": "updateInfobox",
            "params": [
                {
                    "name": "el",
                    "description": "A GeometryElement",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2608,
            "description": "Changes the text of the info box to what is provided via text.",
            "itemtype": "method",
            "name": "highlightcustomInfobox",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "el",
                    "description": "",
                    "type": "JXG.GeometryElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "Reference to the board.",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2620,
            "description": "Changes the text of the info box to show the given coordinates.",
            "itemtype": "method",
            "name": "highlightInfobox",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "el",
                    "description": "The element the mouse is pointing at",
                    "type": "JXG.GeometryElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "Reference to the board.",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2633,
            "description": "Remove highlighting of all elements.",
            "itemtype": "method",
            "name": "dehighlightAll",
            "return": {
                "description": "Reference to the board.",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2674,
            "description": "Returns the input parameters in an array. This method looks pointless and it really is, but it had a purpose\nonce.",
            "itemtype": "method",
            "name": "getScrCoordsOfMouse",
            "params": [
                {
                    "name": "x",
                    "description": "X coordinate in screen coordinates",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y coordinate in screen coordinates",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Coordinates of the mouse in screen coordinates.",
                "type": "Array"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2686,
            "description": "This method calculates the user coords of the current mouse coordinates.",
            "itemtype": "method",
            "name": "getUsrCoordsOfMouse",
            "params": [
                {
                    "name": "evt",
                    "description": "Event object containing the mouse coordinates.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "Coordinates of the mouse in screen coordinates.",
                "type": "Array"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2702,
            "description": "Collects all elements under current mouse position plus current user coordinates of mouse cursor.",
            "itemtype": "method",
            "name": "getAllUnderMouse",
            "params": [
                {
                    "name": "evt",
                    "description": "Event object containing the mouse coordinates.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "Array of elements at the current mouse position plus current user coordinates of mouse.",
                "type": "Array"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2715,
            "description": "Collects all elements under current mouse position.",
            "itemtype": "method",
            "name": "getAllObjectsUnderMouse",
            "params": [
                {
                    "name": "evt",
                    "description": "Event object containing the mouse coordinates.",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "Array of elements at the current mouse position.",
                "type": "Array"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2741,
            "description": "Update the coords object of all elements which possess this\nproperty. This is necessary after changing the viewport.",
            "itemtype": "method",
            "name": "updateCoords",
            "return": {
                "description": "Reference to this board.",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2764,
            "description": "Moves the origin and initializes an update of all elements.",
            "itemtype": "method",
            "name": "moveOrigin",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "diff",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Reference to this board.",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2790,
            "description": "Add conditional updates to the elements.",
            "itemtype": "method",
            "name": "addConditions",
            "params": [
                {
                    "name": "str",
                    "description": "String containing coniditional update in geonext syntax",
                    "type": "String"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2934,
            "description": "Computes the commands in the conditions-section of the gxt file.\nIt is evaluated after an update, before the unsuspendRedraw.\nThe function is generated in {{#crossLink \"JXG.Board/addConditions\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "updateConditions",
            "access": "private",
            "tagname": "",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2945,
            "description": "Calculates adequate snap sizes.",
            "itemtype": "method",
            "name": "calculateSnapSize",
            "return": {
                "description": "Reference to the board.",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2971,
            "description": "Apply update on all objects with the new zoom-factors. Clears all traces.",
            "itemtype": "method",
            "name": "applyZoom",
            "return": {
                "description": "Reference to the board.",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 2982,
            "description": "Zooms into the board by the factors board.attr.zoom.factorX and board.attr.zoom.factorY and applies the zoom.",
            "itemtype": "method",
            "name": "zoomIn",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3009,
            "description": "Zooms out of the board by the factors board.attr.zoom.factorX and board.attr.zoom.factorY and applies the zoom.",
            "itemtype": "method",
            "name": "zoomOut",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3041,
            "description": "Resets zoom factor to 100%.",
            "itemtype": "method",
            "name": "zoom100",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3057,
            "description": "Zooms the board so every visible point is shown. Keeps aspect ratio.",
            "itemtype": "method",
            "name": "zoomAllPoints",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3099,
            "description": "Reset the bounding box and the zoom level to 100% such that a given set of elements is within the board's viewport.",
            "itemtype": "method",
            "name": "zoomElements",
            "params": [
                {
                    "name": "elements",
                    "description": "A set of elements given by id, reference, or name.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Reference to the board.",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3144,
            "description": "Sets the zoom level to <tt>fX</tt> resp <tt>fY</tt>.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "fX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "fY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Reference to the board.",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3166,
            "description": "Removes object from board and renderer.",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object to remove.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3236,
            "description": "Removes the ancestors of an object an the object itself from board and renderer.",
            "itemtype": "method",
            "name": "removeAncestors",
            "params": [
                {
                    "name": "object",
                    "description": "The object to remove.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3256,
            "description": "Initialize some objects which are contained in every GEONExT construction by default,\nbut are not contained in the gxt files.",
            "itemtype": "method",
            "name": "initGeonextBoard",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3306,
            "description": "Initialize the info box object which is used to display\nthe coordinates of points near the mouse pointer.",
            "itemtype": "method",
            "name": "initInfobox",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3329,
            "description": "Change the height and width of the board's container.\nAfter doing so, {@link JXG.JSXGraph#setBoundingBox} is called using\nthe actual size of the bounding box and the actual value of keepaspectratio.\nIf setBoundingbox() should not be called automatically,\ncall resizeContainer with dontSetBoundingBox == true.",
            "itemtype": "method",
            "name": "resizeContainer",
            "params": [
                {
                    "name": "canvasWidth",
                    "description": "New width of the container.",
                    "type": "Number"
                },
                {
                    "name": "canvasHeight",
                    "description": "New height of the container.",
                    "type": "Number"
                },
                {
                    "name": "dontset",
                    "description": "If true do not set the height of the DOM element.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "dontSetBoundingBox",
                    "description": "If true do not call setBoundingBox().",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3365,
            "description": "Lists the dependencies graph in a new HTML-window.",
            "itemtype": "method",
            "name": "showDependencies",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3402,
            "description": "Lists the XML code of the construction in a new HTML-window.",
            "itemtype": "method",
            "name": "showXML",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3415,
            "description": "Sets for all objects the needsUpdate flag to \"true\".",
            "itemtype": "method",
            "name": "prepareUpdate",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3444,
            "description": "Runs through all elements and calls their update() method.",
            "itemtype": "method",
            "name": "updateElements",
            "params": [
                {
                    "name": "drag",
                    "description": "Element that caused the update.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3494,
            "description": "Runs through all elements and calls their update() method.",
            "itemtype": "method",
            "name": "updateRenderer",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3527,
            "description": "Runs through all elements and calls their update() method.\nThis is a special version for the CanvasRenderer.\nHere, we have to do our own layer handling.",
            "itemtype": "method",
            "name": "updateRendererCanvas",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3565,
            "description": "Please use {@link JXG.Board#on} instead.",
            "itemtype": "method",
            "name": "addHook",
            "params": [
                {
                    "name": "hook",
                    "description": "A function to be called by the board after an update occured.",
                    "type": "Function"
                },
                {
                    "name": "m",
                    "description": "When the hook is to be called. Possible values are <i>mouseup</i>, <i>mousedown</i> and <i>update</i>.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'update'"
                },
                {
                    "name": "context",
                    "description": "Determines the execution context the hook is called. This parameter is optional, default is the\nboard object the hook is attached to.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "board"
                }
            ],
            "return": {
                "description": "Id of the hook, required to remove the hook from the board.",
                "type": "Number"
            },
            "deprecated": true,
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3587,
            "description": "Alias of {@link JXG.Board#on}.",
            "itemtype": "method",
            "name": "addEvent",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3593,
            "description": "Please use {@link JXG.Board#off} instead.",
            "itemtype": "method",
            "name": "removeHook",
            "params": [
                {
                    "name": "id",
                    "description": "The number you got when you added the hook or a reference to the event handler.",
                    "type": "Number|function"
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "deprecated": true,
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3610,
            "description": "Alias of {@link JXG.Board#off}.",
            "itemtype": "method",
            "name": "removeEvent",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3616,
            "description": "Runs through all hooked functions and calls them.",
            "itemtype": "method",
            "name": "updateHooks",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "deprecated": true,
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3633,
            "description": "Adds a dependent board to this board.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "board",
                    "description": "A reference to board which will be updated after an update of this board occured.",
                    "type": "JXG.Board"
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3647,
            "description": "Deletes a board from the list of dependent boards.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "board",
                    "description": "Reference to the board which will be removed.",
                    "type": "JXG.Board"
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3664,
            "description": "Runs through most elements and calls their update() method and update the conditions.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "drag",
                    "description": "Element that caused the update.",
                    "type": "JXG.GeometryElement",
                    "optional": true
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3717,
            "description": "Runs through all elements and calls their update() method and update the conditions.\nThis is necessary after zooming and changing the bounding box.",
            "itemtype": "method",
            "name": "fullUpdate",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3730,
            "description": "Adds a grid to the board according to the settings given in board.options.",
            "itemtype": "method",
            "name": "addGrid",
            "return": {
                "description": "Reference to the board.",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3741,
            "description": "Removes all grids assigned to this board. Warning: This method also removes all objects depending on one or\nmore of the grids.",
            "itemtype": "method",
            "name": "removeGrids",
            "return": {
                "description": "Reference to the board object.",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3760,
            "description": "Creates a new geometric element of type elementType.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "elementType",
                    "description": "Type of the element to be constructed given as a string e.g. 'point' or 'circle'.",
                    "type": "String"
                },
                {
                    "name": "parents",
                    "description": "Array of parent elements needed to construct the element e.g. coordinates for a point or two\npoints to construct a line. This highly depends on the elementType that is constructed. See the corresponding JXG.create*\nmethods for a list of possible parameters.",
                    "type": "Array"
                },
                {
                    "name": "attributes",
                    "description": "An object containing the attributes to be set. This also depends on the elementType.\nCommon attributes are name, visible, strokeColor.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Reference to the created element. This is usually a GeometryElement, but can be an array containing\ntwo or more elements.",
                "type": "Object"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3808,
            "description": "Deprecated name for {@link JXG.Board#create}.",
            "itemtype": "method",
            "name": "createElement",
            "deprecated": true,
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3818,
            "description": "Delete the elements drawn as part of a trace of an element.",
            "itemtype": "method",
            "name": "clearTraces",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3834,
            "description": "Stop updates of the board.",
            "itemtype": "method",
            "name": "suspendUpdate",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3846,
            "description": "Enable updates of the board.",
            "itemtype": "method",
            "name": "unsuspendUpdate",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3859,
            "description": "Set the bounding box of the board.",
            "itemtype": "method",
            "name": "setBoundingBox",
            "params": [
                {
                    "name": "bbox",
                    "description": "New bounding box [x1,y1,x2,y2]",
                    "type": "Array"
                },
                {
                    "name": "keepaspectratio",
                    "description": "If set to true, the aspect ratio will be 1:1, but\nthe resulting viewport may be larger.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3902,
            "description": "Get the bounding box of the board.",
            "itemtype": "method",
            "name": "getBoundingBox",
            "return": {
                "description": "bounding box [x1,y1,x2,y2] upper left corner, lower right corner",
                "type": "Array"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3914,
            "description": "Adds an animation. Animations are controlled by the boards, so the boards need to be aware of the\nanimated elements. This function tells the board about new elements to animate.",
            "itemtype": "method",
            "name": "addAnimation",
            "params": [
                {
                    "name": "element",
                    "description": "The element which is to be animated.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3935,
            "description": "Cancels all running animations.",
            "itemtype": "method",
            "name": "stopAllAnimation",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 3956,
            "description": "General purpose animation function. This currently only supports moving points from one place to another. This\nis faster than managing the animation per point, especially if there is more than one animated point at the same time.",
            "itemtype": "method",
            "name": "animate",
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4033,
            "description": "Migrate the dependency properties of the point src\nto the point dest and  delete the point src.\nFor example, a circle around the point src\nreceives the new center dest. The old center src\nwill be deleted.",
            "itemtype": "method",
            "name": "migratePoint",
            "params": [
                {
                    "name": "src",
                    "description": "Original point which will be deleted",
                    "type": "JXG.Point"
                },
                {
                    "name": "dest",
                    "description": "New point with the dependencies of src.",
                    "type": "JXG.Point"
                },
                {
                    "name": "copyName",
                    "description": "Flag which decides if the name of the src element is copied to the\n dest element.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4116,
            "description": "Initializes color blindness simulation.",
            "itemtype": "method",
            "name": "emulateColorblindness",
            "params": [
                {
                    "name": "deficiency",
                    "description": "Describes the color blindness deficiency which is simulated. Accepted values are 'protanopia', 'deuteranopia', and 'tritanopia'.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Reference to the board",
                "type": "JXG.Board"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4167,
            "description": "Select a single or multiple elements at once.",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "str",
                    "description": "The name, id or a reference to a JSXGraph element on this board. An object will\nbe used as a filter to return multiple elements at once filtered by the properties of the object.",
                    "type": "String|Object|function"
                }
            ],
            "return": {
                "description": "",
                "type": "JXG.GeometryElement|JXG.Composition"
            },
            "example": [
                "\n// select the element with name A\nboard.select('A');\n\n// select all elements with strokecolor set to 'red' (but not '#ff0000')\nboard.select({\n  strokeColor: 'red'\n});\n\n// select all points on or below the x axis and make them black.\nboard.select({\n  elementClass: JXG.OBJECT_CLASS_POINT,\n  Y: function (v) {\n    return v <= 0;\n  }\n}).setAttribute({color: 'black'});\n\n// select all elements\nboard.select(function (el) {\n  return true;\n});"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4234,
            "description": "Checks if the given point is inside the boundingbox.",
            "itemtype": "method",
            "name": "hasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "User coordinate or {@link JXG.Coords} object.",
                    "type": "Number|JXG.Coords"
                },
                {
                    "name": "y",
                    "description": "User coordinate. May be omitted in case <tt>x</tt> is a {@link JXG.Coords} object.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4257,
            "description": "Update CSS transformations of sclaing type. It is used to correct the mouse position\nin {@link JXG.Board#getMousePosition}.\nThe inverse transformation matrix is updated on each mouseDown and touchStart event.\n\nIt is up to the user to call this method after an update of the CSS transformation\nin the DOM.",
            "itemtype": "method",
            "name": "updateCSSTransforms",
            "chainable": 1,
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4306,
            "itemtype": "event",
            "name": "down",
            "description": "Whenever the user starts to touch or click the board.",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4313,
            "itemtype": "event",
            "name": "mousedown",
            "description": "Whenever the user starts to click on the board.",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4320,
            "itemtype": "event",
            "name": "touchstart",
            "description": "Whenever the user starts to touch the board.",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4327,
            "itemtype": "event",
            "name": "up",
            "description": "Whenever the user stops to touch or click the board.",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4334,
            "itemtype": "event",
            "name": "mouseup",
            "description": "Whenever the user releases the mousebutton over the board.",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4341,
            "itemtype": "event",
            "name": "touchend",
            "description": "Whenever the user stops touching the board.",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4348,
            "itemtype": "event",
            "name": "move",
            "description": "This event is fired whenever the user is moving the finger or mouse pointer over the board.",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                },
                {
                    "name": "mode",
                    "description": "The mode the board currently is in",
                    "type": "Number"
                }
            ],
            "references": [
                "{JXG.Board#mode}"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4357,
            "itemtype": "event",
            "name": "mousemove",
            "description": "This event is fired whenever the user is moving the mouse over the board.",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                },
                {
                    "name": "mode",
                    "description": "The mode the board currently is in",
                    "type": "Number"
                }
            ],
            "references": [
                "{JXG.Board#mode}"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4366,
            "itemtype": "event",
            "name": "touchmove",
            "description": "This event is fired whenever the user is moving the finger over the board.",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                },
                {
                    "name": "mode",
                    "description": "The mode the board currently is in",
                    "type": "Number"
                }
            ],
            "references": [
                "{JXG.Board#mode}"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4375,
            "itemtype": "event",
            "name": "hit",
            "description": "Whenever an element is highlighted this event is fired.",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                },
                {
                    "name": "el",
                    "description": "The hit element.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4384,
            "itemtype": "event",
            "name": "mousehit",
            "description": "Whenever an element is highlighted this event is fired.",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                },
                {
                    "name": "el",
                    "description": "The hit element.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "target",
                    "description": ""
                }
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4393,
            "itemtype": "event",
            "name": "update",
            "description": "This board is updated.",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4399,
            "itemtype": "event",
            "name": "boundingbox",
            "description": "The bounding box of the board has changed.",
            "class": "JXG.Board"
        },
        {
            "file": "src/base/board.js",
            "line": 4412,
            "description": "Function to animate a curve rolling on another curve.",
            "itemtype": "method",
            "name": "Roulette",
            "pseudo": true,
            "params": [
                {
                    "name": "c1",
                    "description": "JSXGraph curve building the floor where c2 rolls",
                    "type": "Curve"
                },
                {
                    "name": "c2",
                    "description": "JSXGraph curve which rolls on c1.",
                    "type": "Curve"
                },
                {
                    "name": "start_c1",
                    "description": "The parameter t such that c1(t) touches c2. This is the start position of the\n                         rolling process",
                    "type": "Number"
                },
                {
                    "name": "stepsize",
                    "description": "Increase in t in each step for the curve c1",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "Delay time for setInterval()",
                    "type": "Number"
                },
                {
                    "name": "pointlist",
                    "description": "Array of points which are rolled in each step. This list should contain\n     all points which define c2 and gliders on c2.",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\n// Line which will be the floor to roll upon.\nvar line = brd.create('curve', [function (t) { return t;}, function (t){ return 1;}], {strokeWidth:6});\n// Center of the rolling circle\nvar C = brd.create('point',[0,2],{name:'C'});\n// Starting point of the rolling circle\nvar P = brd.create('point',[0,1],{name:'P', trace:true});\n// Circle defined as a curve. The circle \"starts\" at P, i.e. circle(0) = P\nvar circle = brd.create('curve',[\n          function (t){var d = P.Dist(C),\n                          beta = JXG.Math.Geometry.rad([C.X()+1,C.Y()],C,P);\n                      t += beta;\n                      return C.X()+d*Math.cos(t);\n          },\n          function (t){var d = P.Dist(C),\n                          beta = JXG.Math.Geometry.rad([C.X()+1,C.Y()],C,P);\n                      t += beta;\n                      return C.Y()+d*Math.sin(t);\n          },\n          0,2*Math.PI],\n          {strokeWidth:6, strokeColor:'green'});\n\n// Point on circle\nvar B = brd.create('glider',[0,2,circle],{name:'B', color:'blue',trace:false});\nvar roll = brd.createRoulette(line, circle, 0, Math.PI/20, 1, 100, [C,P,B]);\nroll.start() // Start the rolling, to be stopped by roll.stop()\n\n<div id=\"e5e1b53c-a036-4a46-9e35-190d196beca5\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\nvar brd = JXG.JSXGraph.initBoard('e5e1b53c-a036-4a46-9e35-190d196beca5', {boundingbox: [-5, 5, 5, -5], axis: true, showcopyright:false, shownavigation: false});\n// Line which will be the floor to roll upon.\nvar line = brd.create('curve', [function (t) { return t;}, function (t){ return 1;}], {strokeWidth:6});\n// Center of the rolling circle\nvar C = brd.create('point',[0,2],{name:'C'});\n// Starting point of the rolling circle\nvar P = brd.create('point',[0,1],{name:'P', trace:true});\n// Circle defined as a curve. The circle \"starts\" at P, i.e. circle(0) = P\nvar circle = brd.create('curve',[\n          function (t){var d = P.Dist(C),\n                          beta = JXG.Math.Geometry.rad([C.X()+1,C.Y()],C,P);\n                      t += beta;\n                      return C.X()+d*Math.cos(t);\n          },\n          function (t){var d = P.Dist(C),\n                          beta = JXG.Math.Geometry.rad([C.X()+1,C.Y()],C,P);\n                      t += beta;\n                      return C.Y()+d*Math.sin(t);\n          },\n          0,2*Math.PI],\n          {strokeWidth:6, strokeColor:'green'});\n\n// Point on circle\nvar B = brd.create('glider',[0,2,circle],{name:'B', color:'blue',trace:false});\nvar roll = brd.createRoulette(line, circle, 0, Math.PI/20, 1, 100, [C,P,B]);\nroll.start() // Start the rolling, to be stopped by roll.stop()\n</script>"
            ],
            "class": "JXG.Board"
        },
        {
            "file": "src/base/chart.js",
            "line": 84,
            "description": "Contains pointers to the various subelements of the chart.",
            "itemtype": "property",
            "name": "",
            "class": "JXG.Chart"
        },
        {
            "file": "src/base/chart.js",
            "line": 744,
            "description": "Then, the update function of the renderer\nis called.  Since a chart is only an abstract element,\ncontaining other elements, this function is empty.",
            "class": "JXG.Chart"
        },
        {
            "file": "src/base/chart.js",
            "line": 753,
            "description": "Update of the defining points",
            "class": "JXG.Chart"
        },
        {
            "file": "src/base/chart.js",
            "line": 764,
            "description": "For dynamic charts update\ncan be used to compute new entries\nfor the arrays this.dataX and\nthis.dataY. It is used in @see update.\nDefault is an empty method, can be overwritten\nby the user.",
            "class": "JXG.Chart"
        },
        {
            "file": "src/base/chart.js",
            "line": 884,
            "description": "Legend for chart",
            "class": "JXG.Chart"
        },
        {
            "file": "src/base/circle.js",
            "line": 96,
            "description": "Stores the given method.\nCan be\n\n * **'twoPoints'** which means the circle is defined by its center and a point on the circle.\n * **'pointRadius'** which means the circle is defined by its center and its radius given in user units or as term.\n * **'pointLine'** which means the circle is defined by its center and its radius given by the distance from the startpoint and the endpoint of the line.\n * **'pointCircle'** which means the circle is defined by its center and its radius given by the radius of another circle.",
            "itemtype": "property",
            "name": "method",
            "type": "string",
            "references": [
                "#center",
                "#point2",
                "#radius",
                "#line",
                "#circle"
            ],
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 118,
            "description": "The circles center. Do not set this parameter directly as it will break JSXGraph's update system.",
            "itemtype": "property",
            "name": "center",
            "type": "JXG.Point",
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 126,
            "itemtype": "property",
            "name": "point2",
            "access": "private",
            "tagname": "",
            "type": "JXG.Point",
            "references": [
                "#method"
            ],
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 135,
            "description": "only set if method equals 'pointRadius'",
            "itemtype": "property",
            "name": "radius",
            "type": "Number",
            "default": "null",
            "references": [
                "#method"
            ],
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 145,
            "description": "only set if method equals 'pointLine'. Do not set this parameter directly as it will break JSXGraph's update system.",
            "itemtype": "property",
            "name": "line",
            "type": "JXG.Line",
            "default": "null",
            "references": [
                "#method"
            ],
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 155,
            "description": "only set if method equals 'pointLine'. Do not set this parameter directly as it will break JSXGraph's update system.",
            "itemtype": "property",
            "name": "circle",
            "type": "JXG.Circle",
            "default": "null",
            "references": [
                "#method"
            ],
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 220,
            "description": "Checks whether (x,y) is near the circle line or inside of the ellipse\n(in case JXG.Options.conic#hasInnerPoints is true).",
            "itemtype": "method",
            "name": "hasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y direction, screen coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if (x,y) is near the circle, False otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 244,
            "description": "Used to generate a polynomial for a point p that lies on this circle.",
            "itemtype": "method",
            "name": "generatePolynomial",
            "params": [
                {
                    "name": "p",
                    "description": "The point for which the polynomial is generated.",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "An array containing the generated polynomial.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 299,
            "description": "Generate symbolic radius calculation for loci determination with Groebner basis algorithm.",
            "itemtype": "method",
            "name": "generateRadiusSquared",
            "return": {
                "description": "String containing symbolic calculation of the circle's radius or an empty string\nif the radius can't be expressed in a polynomial equation.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 367,
            "description": "Updates this circle's {@link JXG.Circle#quadraticform}.",
            "itemtype": "method",
            "name": "updateQuadraticform",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 389,
            "description": "Updates the stdform derived from the position of the center and the circle's radius.",
            "itemtype": "method",
            "name": "updateStdform",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 449,
            "description": "Finds dependencies in a given term and resolves them by adding the elements referenced in this\nstring to the circle's list of ancestors.",
            "itemtype": "method",
            "name": "notifyParents",
            "params": [
                {
                    "name": "contentStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 465,
            "description": "Set a new radius, then update the board.",
            "itemtype": "method",
            "name": "setRadius",
            "params": [
                {
                    "name": "r",
                    "description": "A string, function or number describing the new radius.",
                    "type": "String|Number|function"
                }
            ],
            "return": {
                "description": "Reference to this circle",
                "type": "JXG.Circle"
            },
            "chainable": 1,
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 480,
            "description": "Calculates the radius of the circle or sets the radius.",
            "itemtype": "method",
            "name": "Radius",
            "params": [
                {
                    "name": "value",
                    "description": "Set new radius",
                    "type": "String|Number|function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The radius of the circle",
                "type": "Number"
            },
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 514,
            "description": "Use {@link JXG.Circle#Radius}.",
            "itemtype": "method",
            "name": "getRadius",
            "deprecated": true,
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 610,
            "description": "Add transformations to this circle.",
            "itemtype": "method",
            "name": "addTransform",
            "params": [
                {
                    "name": "transform",
                    "description": "Either one {@link JXG.Transformation} or an array of {@link JXG.Transformation}s.",
                    "type": "JXG.Transformation|Array"
                }
            ],
            "return": {
                "description": "Reference to this circle object.",
                "type": "JXG.Circle"
            },
            "chainable": 1,
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 658,
            "description": "Treats the circle as parametric curve running from 0 to 1 and calculates its X coordinate.",
            "itemtype": "method",
            "name": "X",
            "params": [
                {
                    "name": "t",
                    "description": "Number between 0 and 1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<tt>X(t)= radius*cos(t)+centerX</tt>.",
                "type": "Number"
            },
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 669,
            "description": "Treats the circle as parametric curve running from 0 to 1 and calculates its Y coordinate.",
            "itemtype": "method",
            "name": "Y",
            "params": [
                {
                    "name": "t",
                    "description": "Number between 0 and 1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<tt>X(t)= radius*sin(t)+centerY</tt>.",
                "type": "Number"
            },
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 680,
            "description": "Treat the circle as parametric curve running from 0 to 1 and calculates its Z coordinate.",
            "itemtype": "method",
            "name": "Z",
            "params": [
                {
                    "name": "t",
                    "description": "ignored",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "1.0",
                "type": "Number"
            },
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 691,
            "description": "Returns 0.",
            "itemtype": "method",
            "name": "minX",
            "access": "private",
            "tagname": "",
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 701,
            "description": "Returns 1.",
            "itemtype": "method",
            "name": "maxX",
            "access": "private",
            "tagname": "",
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 711,
            "description": "Circle area",
            "itemtype": "method",
            "name": "Area",
            "return": {
                "description": "area of the circle.",
                "type": "Number"
            },
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 723,
            "description": "Get bounding box of the circle.",
            "itemtype": "method",
            "name": "bounds",
            "return": {
                "description": "[x1, y1, x2, y2]",
                "type": "Array"
            },
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/circle.js",
            "line": 736,
            "description": "Get data to construct this element. Data consists of the parent elements\nand static data like radius.",
            "itemtype": "method",
            "name": "getParents",
            "return": {
                "description": "data necessary to construct this element",
                "type": "Array"
            },
            "class": "JXG.Circle"
        },
        {
            "file": "src/base/composition.js",
            "line": 67,
            "description": "Invokes setAttribute for every stored element with a setAttribute method and hands over the given arguments.\nSee {@link JXG.GeometryElement#setAttribute} for further description, valid parameters and return values.",
            "itemtype": "method",
            "name": "setAttribute",
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/composition.js",
            "line": 74,
            "description": "Invokes prepareUpdate for every stored element with a prepareUpdate method and hands over the given arguments.\nSee {@link JXG.GeometryElement#prepareUpdate} for further description, valid parameters and return values.",
            "itemtype": "method",
            "name": "prepareUpdate",
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/composition.js",
            "line": 81,
            "description": "Invokes updateRenderer for every stored element with a updateRenderer method and hands over the given arguments.\nSee {@link JXG.GeometryElement#updateRenderer} for further description, valid parameters and return values.",
            "itemtype": "method",
            "name": "updateRenderer",
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/composition.js",
            "line": 88,
            "description": "Invokes update for every stored element with a update method and hands over the given arguments.\nSee {@link JXG.GeometryElement#update} for further description, valid parameters and return values.",
            "itemtype": "method",
            "name": "update",
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/composition.js",
            "line": 95,
            "description": "Invokes highlight for every stored element with a highlight method and hands over the given arguments.\nSee {@link JXG.GeometryElement#highlight} for further description, valid parameters and return values.",
            "itemtype": "method",
            "name": "highlight",
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/composition.js",
            "line": 102,
            "description": "Invokes noHighlight for every stored element with a noHighlight method and hands over the given arguments.\nSee {@link JXG.GeometryElement#noHighlight} for further description, valid parameters and return values.",
            "itemtype": "method",
            "name": "noHighlight",
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/composition.js",
            "line": 157,
            "description": "Adds an element to the composition container.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "what",
                    "description": "Descriptive name for the element, e.g. <em>startpoint</em> or <em>area</em>. This is used to\naccess the element later on. There are some reserved names: <em>elements, add, remove, update, prepareUpdate,\nupdateRenderer, highlight, noHighlight</em>, and all names that would form invalid object property names in\nJavaScript.",
                    "type": "String"
                },
                {
                    "name": "element",
                    "description": "A reference to the element that is to be added. This can be\nanother composition, too.",
                    "type": "JXG.GeometryElement|JXG.Composition"
                }
            ],
            "return": {
                "description": "True, if the element was added successfully. Reasons why adding the element failed include\nusing a reserved name and providing an invalid element.",
                "type": "Boolean"
            },
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/composition.js",
            "line": 196,
            "description": "Remove an element from the composition container.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "what",
                    "description": "The name used to access the element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True, if the element has been removed successfully.",
                "type": "Boolean"
            },
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/composition.js",
            "line": 224,
            "description": "Change element list of composition",
            "itemtype": "method",
            "name": "nameListener",
            "params": [
                {
                    "name": "oval",
                    "description": "Name of old entry, will be removed from composition",
                    "type": "String"
                },
                {
                    "name": "nval",
                    "description": "Name of new entry",
                    "type": "String"
                },
                {
                    "name": "el",
                    "description": "New entry",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "this",
                "type": "Object"
            },
            "chainable": 1,
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/composition.js",
            "line": 241,
            "description": "Select elements of the composition.\nFor the filter {@see JXG.Board}",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "filter",
                    "description": "The name, id or a reference to a JSXGraph element on this board.\n  An object will be used as a filter to return multiple elements at once filtered by the properties of the object.",
                    "type": "String|Object|Function"
                }
            ],
            "return": {
                "description": "Composition or element",
                "type": "JXG.GeometryElement|JXG.Composition"
            },
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/composition.js",
            "line": 259,
            "description": "List of the element ids resp. values. Unused.",
            "itemtype": "method",
            "name": "getParents",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/composition.js",
            "line": 270,
            "description": "Type of composition. Unused.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "Empty sring",
                "type": "String"
            },
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/composition.js",
            "line": 281,
            "description": "Return list of attributes. Unused",
            "itemtype": "method",
            "name": "getAttributes",
            "return": {
                "description": "List of attributes",
                "type": "Object"
            },
            "class": "JXG.Composition"
        },
        {
            "file": "src/base/constants.js",
            "line": 51,
            "description": "Constants for JSXGraph",
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/constants.js",
            "line": 57,
            "description": "Represents the currently used JSXGraph version.",
            "itemtype": "property",
            "name": "version",
            "type": "{String}",
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/constants.js",
            "line": 65,
            "description": "The small gray version indicator in the top left corner of every JSXGraph board (if\nshowCopyright is not set to false on board creation).",
            "itemtype": "property",
            "name": "licenseText",
            "type": "String",
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/coords.js",
            "line": 72,
            "description": "Stores the board the object is used on.",
            "itemtype": "property",
            "name": "board",
            "type": "JXG.Board",
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/coords.js",
            "line": 80,
            "description": "Stores coordinates for user view as homogeneous coordinates.",
            "itemtype": "property",
            "name": "usrCoords",
            "type": "Array",
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/coords.js",
            "line": 89,
            "description": "Stores coordinates for screen view as homogeneous coordinates. The values are pixels.",
            "itemtype": "property",
            "name": "scrCoords",
            "type": "Array",
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/coords.js",
            "line": 98,
            "description": "If true, this coordinates object will emit update events every time\nthe coordinates are set.",
            "itemtype": "property",
            "name": "emitter",
            "type": "{Boolean}",
            "default": "true",
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/coords.js",
            "line": 114,
            "description": "Normalize homogeneous coordinates",
            "itemtype": "method",
            "name": "normalizeUsrCoords",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/coords.js",
            "line": 131,
            "description": "Compute screen coordinates out of given user coordinates.",
            "itemtype": "method",
            "name": "usr2screen",
            "params": [
                {
                    "name": "doRound",
                    "description": "Force rounding of the pixel values to the next integer.\nThis is necessary for old IE versions.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/coords.js",
            "line": 158,
            "description": "Compute user coordinates out of given screen coordinates.",
            "itemtype": "method",
            "name": "screen2usr",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/coords.js",
            "line": 176,
            "description": "Calculate distance of one point to another either in screen view or in user view.",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "coord_type",
                    "description": "The type of coordinates used here.\n   Possible values are `JXG.COORDS_BY_USER` and `JXG.COORDS_BY_SCREEN`.",
                    "type": "Number"
                },
                {
                    "name": "coordinates",
                    "description": "The `JXG.Coords` object to which the distance is calculated.",
                    "type": "JXG.Coords"
                }
            ],
            "return": {
                "description": "The distance between the two coordinates.",
                "type": "Number"
            },
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/coords.js",
            "line": 217,
            "description": "Set coordinates by either user coordinates or screen coordinates and recalculate the other one.",
            "itemtype": "method",
            "name": "setCoordinates",
            "params": [
                {
                    "name": "coord_type",
                    "description": "The type of coordinates used here.\n   Possible values are `JXG.COORDS_BY_USER` and `COORDS_BY_SCREEN`.",
                    "type": "Number"
                },
                {
                    "name": "coordinates",
                    "description": "An array of affine coordinates the Coords object is set to.",
                    "type": "Array"
                },
                {
                    "name": "doRound",
                    "description": "flag If true or null round the coordinates in usr2screen.\nThis is used in smooth curve plotting.\nThe IE needs rounded coordinates. If doRound==false we have to round in updatePathString.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "noevent",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Reference to the coords object.",
                "type": "JXG.Coords"
            },
            "chainable": 1,
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/coords.js",
            "line": 262,
            "description": "Copy array, either `JXG.Coords.srcCoords` or `JXG.Coords.usrCoords`\nUses slice() in case of standard arrays and set() in case of\ntyped arrays.",
            "itemtype": "method",
            "name": "copy",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "Either `JXG.Coords.srcCoords` or `JXG.Coords.usrCoords`",
                    "type": "Array"
                },
                {
                    "name": "offset",
                    "description": "Offset, defaults to 0 if not given",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns copy of the coords array either as standard array or as\n  typed array.",
                "type": "Array"
            },
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/coords.js",
            "line": 283,
            "description": "Triggered whenever the coordinates change.",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "ou",
                    "description": "Old user coordinates",
                    "type": "Array"
                },
                {
                    "name": "os",
                    "description": "Old screen coordinates",
                    "type": "Array"
                }
            ],
            "class": "JXG.Coords"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 85,
            "description": "Coordinates of the element.",
            "itemtype": "property",
            "name": "coords",
            "type": "JXG.Coords",
            "access": "private",
            "tagname": "",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 94,
            "description": "Initial coordinates of the element. Needed for transformations",
            "itemtype": "property",
            "name": "initialCoords",
            "type": "JXG.Coords",
            "access": "private",
            "tagname": "",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 103,
            "description": "Relative position on a slide element (line, circle, curve) if element is a glider on this element.",
            "itemtype": "property",
            "name": "position",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 112,
            "description": "Determines whether the element slides on a polygon if point is a glider.",
            "itemtype": "property",
            "name": "onPolygon",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 122,
            "description": "When used as a glider this member stores the object, where to glide on.\nTo set the object to glide on use the method\n{@link JXG.Point#makeGlider} and DO NOT set this property directly\nas it will break the dependency tree.",
            "itemtype": "property",
            "name": "slideObject",
            "type": "JXG.GeometryElement",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 133,
            "description": "List of elements the element is bound to, i.e. the element glides on.\nOnly the last entry is active.\nUse {@link JXG.Point#popSlideObject} to remove the currently active slideObject.",
            "itemtype": "property",
            "name": "slideObjects",
            "type": "Array",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 144,
            "description": "A {@link JXG.CoordsElement#updateGlider} call is usually followed\nby a general {@link JXG.Board#update} which calls\n{@link JXG.CoordsElement#updateGliderFromParent}.\nTo prevent double updates, {@link JXG.CoordsElement#needsUpdateFromParent}\nis set to false in updateGlider() and reset to true in the following call to\n{@link JXG.CoordsElement#updateGliderFromParent}",
            "itemtype": "property",
            "name": "needsUpdateFromParent",
            "type": "{Boolean}",
            "default": "true",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 158,
            "description": "Dummy function for unconstrained points or gliders.",
            "itemtype": "method",
            "name": "updateConstraint",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 169,
            "description": "Stores the groups of this element in an array of Group.",
            "itemtype": "property",
            "name": "groups",
            "type": "array",
            "references": [
                "JXG.Group"
            ],
            "access": "private",
            "tagname": "",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 216,
            "description": "Updates the coordinates of the element. This method is called by the update method\nof the object. If the object is an image or text, in `update` the content of the object is updated\nand it's coordinates.",
            "itemtype": "method",
            "name": "updateCoords",
            "params": [
                {
                    "name": "fromParents",
                    "description": "True if the update is a \"regular\" update, false if the element itself is dragged.\nIn the latter case - and if the element is a glider - the relative position of the element,\ni.e. the properpty `position` has to be adjusted.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 261,
            "description": "Update of glider in case of dragging the glider or setting the postion of the glider.\nThe relative position of the glider has to be updated.\n\nIn case of a glider on a line:\nIf the second point is an ideal point, then -1 < this.position < 1,\nthis.position==+/-1 equals point2, this.position==0 equals point1\n\nIf the first point is an ideal point, then 0 < this.position < 2\nthis.position==0  or 2 equals point1, this.position==1 equals point2",
            "itemtype": "method",
            "name": "updateGlider",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 503,
            "description": "Update of a glider in case a parent element has been updated. That means the\nrelative position of the glider stays the same.",
            "itemtype": "method",
            "name": "updategliderFromParent",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 637,
            "description": "This is the genneric method for calling the update emthod of the renderer (SVG, VML, ...).\nAdditionally, it is checked if the coords are real.",
            "itemtype": "method",
            "name": "updateRendererGeneric",
            "params": [
                {
                    "name": "rendererMethod",
                    "description": "The update method of the renderer (SVG, VML, ...) for this object.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 691,
            "description": "Getter method for x, this is used by for CAS-points to access point coordinates.",
            "itemtype": "method",
            "name": "X",
            "return": {
                "description": "User coordinate of point in x direction.",
                "type": "Number"
            },
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 701,
            "description": "Getter method for y, this is used by CAS-points to access point coordinates.",
            "itemtype": "method",
            "name": "Y",
            "return": {
                "description": "User coordinate of point in y direction.",
                "type": "Number"
            },
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 711,
            "description": "Getter method for z, this is used by CAS-points to access point coordinates.",
            "itemtype": "method",
            "name": "Z",
            "return": {
                "description": "User coordinate of point in z direction.",
                "type": "Number"
            },
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 721,
            "description": "Evaluation of the function term defining the x coordinate of the element.\nThe value is stored in the `coords` object and returned by `X()`. This saves\nevaluation calls for CAS-points. Their XTerm() method is overwritten in {@link #addConstraint}",
            "itemtype": "method",
            "name": "XEval",
            "return": {
                "description": "User coordinate of point in x direction.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 734,
            "description": "Evaluation of the function term defining the y coordinate of the element.\nThe value is stored in the `coords` object and returned by `Y()`. This saves\nevaluation calls for CAS-points. Their YTerm() method is overwritten in {@link #addConstraint}",
            "itemtype": "method",
            "name": "YEval",
            "return": {
                "description": "User coordinate of point in y direction.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 747,
            "description": "Evaluation of the function term defining the z coordinate of the element.\nThe value is stored in the `coords` object and returned by `Z()`. This saves\nevaluation calls for CAS-points. Their ZTerm() method is overwritten in {@link #addConstraint}",
            "itemtype": "method",
            "name": "ZEval",
            "return": {
                "description": "User coordinate of point in z direction.",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 760,
            "description": "Getter method for the distance to a second `JXG.CoordsElement` (point, image, text).",
            "itemtype": "method",
            "name": "Dist",
            "params": [
                {
                    "name": "point2",
                    "description": "The `JXG.CoordsElement` to which the distance shall be calculated.",
                    "type": "JXG.CoordsElement"
                }
            ],
            "return": {
                "description": "Distance in user coordinate to the given `JXG.CoordsElement`.",
                "type": "Number"
            },
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 779,
            "description": "Let a `JXG.CoordsElement` snap to the nearest `JXG.CoordsElement` in distance of\n{@link JXG.Point#attractorDistance}.\nThe function uses the coords object of the `JXG.CoordsElement` as\nits actual position.",
            "itemtype": "method",
            "name": "handleSnapToPoints",
            "params": [
                {
                    "name": "force",
                    "description": "force snapping independent from what the snaptogrid attribute says",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Reference to this element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 849,
            "description": "A `JXG.CoordsElement` can change its type from free `JXG.CoordsElement` to glider\nand vice versa. If it is given an array of attractor elements\n(attribute attractors) and the attribute attractorDistance\nthen the `JXG.CoordsElement` will be made a glider if it less than attractorDistance\napart from one of its attractor elements.\nIf attractorDistance is equal to zero, the `JXG.CoordsElement` stays in its\ncurrent form.",
            "itemtype": "method",
            "name": "handleAttractors",
            "return": {
                "description": "Reference to this element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 910,
            "description": "Sets coordinates and calls the point's update() method.",
            "itemtype": "method",
            "name": "setPositionDirectly",
            "params": [
                {
                    "name": "method",
                    "description": "The type of coordinates used here.\nPossible values are {@link JXG.COORDS_BY_USER} and {@link JXG.COORDS_BY_SCREEN}.",
                    "type": "Number"
                },
                {
                    "name": "coords",
                    "description": "coordinates <tt>([z], x, y)</tt> in screen/user units",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "this element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 970,
            "description": "Translates the point by <tt>tv = (x, y)</tt>.",
            "itemtype": "method",
            "name": "setPositionByTransform",
            "params": [
                {
                    "name": "method",
                    "description": "The type of coordinates used here.\nPossible values are `JXG.COORDS_BY_USER` and `JXG.COORDS_BY_SCREEN`.",
                    "type": "Number"
                },
                {
                    "name": "tv",
                    "description": "Array containing the translation vector [x, y]",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 998,
            "description": "Sets coordinates and calls the point's update() method.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "method",
                    "description": "The type of coordinates used here.\nPossible values are `JXG.COORDS_BY_USER` and `JXG.COORDS_BY_SCREEN`.",
                    "type": "Number"
                },
                {
                    "name": "coords",
                    "description": "coordinates in screen/user units",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1012,
            "description": "Sets the position of a glider relative to the defining elements\nof the {@link JXG.Point#slideObject}.",
            "itemtype": "method",
            "name": "setGliderPosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1030,
            "description": "Convert the `JXG.CoordsElement` to glider and update the construction.\nTo move the `JXG.CoordsElement` visual onto the glider, a subsequent\ncall of `board.update()` is necessary.",
            "itemtype": "method",
            "name": "makeGlider",
            "params": [
                {
                    "name": "slide",
                    "description": "The object the point will be bound to.",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1092,
            "description": "Remove the last slideObject. If there are more than one elements to which the `JXG.CoordsElement` is bound to,\nthe second last element is the new active slideObject.",
            "itemtype": "method",
            "name": "popSlideObject",
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1129,
            "description": "Converts a calculated element into a free element,\ni.e. it will delete all ancestors and transformations and,\nif the element is currently a glider, will remove the slideObject reference.",
            "itemtype": "method",
            "name": "free",
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1211,
            "description": "Convert the point to CAS point and call update().",
            "itemtype": "method",
            "name": "addConstraint",
            "params": [
                {
                    "name": "terms",
                    "description": "[[zterm], xterm, yterm] defining terms for the z, x and y coordinate.\nThe z-coordinate is optional and it is used for homogeneous coordinates.\nThe coordinates may be either\n  * a JavaScript function,\n  * a string containing GEONExT syntax. This string will be converted into a JavaScript\n    function here,\n  * a Number\n  * pointer to a slider object. This will be converted into a call of the Value()-method\n    of this slider.",
                    "type": "Array"
                }
            ],
            "references": [
                "JXG.GeonextParser#geonext2JS"
            ],
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1325,
            "description": "In case there is an attribute \"anchor\", the element is bound to\nthis anchor element.\nThis is handled with this.relativeCoords. If the element is a label\nrelativeCoords are given in scrCoords, otherwise in usrCoords.",
            "itemtype": "method",
            "name": "addAnchor",
            "params": [
                {
                    "name": "coordinates",
                    "description": "Offset from th anchor element. These are the values for this.relativeCoords.\nIn case of a label, coordinates are screen coordinates. Otherwise, coordinates are user coordinates.",
                    "type": "Array"
                },
                {
                    "name": "isLabel",
                    "description": "Yes/no",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1391,
            "description": "Applies the transformations of the element.\nThis method applies to text and images. Point transformations are handled differently.",
            "itemtype": "method",
            "name": "updateTransform",
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1413,
            "description": "Add transformations to this `JXG.CoordsElement`.",
            "itemtype": "method",
            "name": "addTransform",
            "params": [
                {
                    "name": "el",
                    "description": "",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "transform",
                    "description": "Either one {@link JXG.Transformation}\nor an array of {@link JXG.Transformation}s.",
                    "type": "JXG.Transformation|Array"
                }
            ],
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1440,
            "description": "Animate the point.",
            "itemtype": "method",
            "name": "startAnimation",
            "params": [
                {
                    "name": "direction",
                    "description": "The direction the glider is animated. Can be +1 or -1.",
                    "type": "Number"
                },
                {
                    "name": "stepCount",
                    "description": "The number of steps.",
                    "type": "Number"
                }
            ],
            "references": [
                "Glider#stopAnimation"
            ],
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1465,
            "description": "Stop animation.",
            "itemtype": "method",
            "name": "stopAnimation",
            "references": [
                "Glider#startAnimation"
            ],
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1482,
            "description": "Starts an animation which moves the `JXG.CoordsElement` along a given path in given time.",
            "itemtype": "method",
            "name": "moveAlong",
            "params": [
                {
                    "name": "path",
                    "description": "The path the `JXG.CoordsElement` is moved on.\nThis can be either an array of arrays containing x and y values of the points of\nthe path, or function taking the amount of elapsed time since the animation\nhas started and returns an array containing a x and a y value or NaN.\nIn case of NaN the animation stops.",
                    "type": "Array|function"
                },
                {
                    "name": "time",
                    "description": "The time in milliseconds in which to finish the animation",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Optional settings for the animation.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "callback",
                            "description": "A function that is called as soon as the animation is finished.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "interpolate",
                            "description": "If <tt>path</tt> is an array moveAlong()\nwill interpolate the path\nusing {@link JXG.Math.Numerics#Neville}. Set this flag to false if you don't want to use interpolation.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1561,
            "description": "Starts an animated `JXG.CoordsElement` movement towards the given coordinates <tt>where</tt>.\nThe animation is done after <tt>time</tt> milliseconds.\nIf the second parameter is not given or is equal to 0, setPosition() is called, see #setPosition.",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "where",
                    "description": "Array containing the x and y coordinate of the target location.",
                    "type": "Array"
                },
                {
                    "name": "time",
                    "description": "Number of milliseconds the animation should last.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "Optional settings for the animation",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "callback",
                            "description": "A function that is called as soon as the animation is finished.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "effect",
                            "description": "animation effects like speed fade in and out. possible values are\n'<>' for speed increase on start and slow down at the end (default) and '--' for constant speed during\nthe whole animation.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'<>'"
                        }
                    ]
                }
            ],
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "references": [
                "#animate"
            ],
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1620,
            "description": "Starts an animated `JXG.CoordsElement` movement towards the given coordinates <tt>where</tt>. After arriving at\n<tt>where</tt> the `JXG.CoordsElement` moves back to where it started. The animation is done after <tt>time</tt>\nmilliseconds.",
            "itemtype": "method",
            "name": "visit",
            "params": [
                {
                    "name": "where",
                    "description": "Array containing the x and y coordinate of the target location.",
                    "type": "Array"
                },
                {
                    "name": "time",
                    "description": "Number of milliseconds the animation should last.",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Optional settings for the animation",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "callback",
                            "description": "A function that is called as soon as the animation is finished.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "effect",
                            "description": "animation effects like speed fade in and out. possible values are\n'<>' for speed increase on start and slow down at the end (default) and '--' for constant speed during\nthe whole animation.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'<>'"
                        },
                        {
                            "name": "repeat",
                            "description": "How often this animation should be repeated.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ],
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "references": [
                "#animate"
            ],
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1684,
            "description": "Animates a glider. Is called by the browser after startAnimation is called.",
            "itemtype": "method",
            "name": "_anim",
            "params": [
                {
                    "name": "direction",
                    "description": "The direction the glider is animated.",
                    "type": "Number"
                },
                {
                    "name": "stepCount",
                    "description": "The number of steps.",
                    "type": "Number"
                }
            ],
            "references": [
                "#startAnimation",
                "#stopAnimation"
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "This element",
                "type": "JXG.CoordsElement"
            },
            "chainable": 1,
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/coordselement.js",
            "line": 1799,
            "description": "Generic method to create point, text or image.\nDetermines the type of the construction, i.e. free, or constrained by function,\ntransformation or of glider type.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "Callback",
                    "description": "Object type, e.g. JXG.Point, JXG.Text or JXG.Image",
                    "type": "Object"
                },
                {
                    "name": "board",
                    "description": "Link to the board object",
                    "type": "Object"
                },
                {
                    "name": "coords",
                    "description": "Array with coordinates. This may be: array of numbers, function\nreturning an array of numbers, array of functions returning a number, object and transformation.\nIf the attribute \"slideObject\" exists, a glider element is constructed.",
                    "type": "Array"
                },
                {
                    "name": "attr",
                    "description": "Attributes object",
                    "type": "Object"
                },
                {
                    "name": "arg1",
                    "description": "Optional argument 1: in case of text this is the text content,\nin case of an image this is the url.",
                    "type": "Object"
                },
                {
                    "name": "arg2",
                    "description": "Optional argument 2: in case of image this is an array containing the size of\nthe image.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "returns the created object or false.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.CoordsElement"
        },
        {
            "file": "src/base/curve.js",
            "line": 80,
            "description": "Number of points on curves when plotted with `updateParametricCurveNaive`.\nThis value changes between the attribute values `numberPointsLow` and `numberPointsHigh`.\nThe first value is taken during drag events, the latter one is taken in the up event.\nIt is set in {@link JXG.Curve#updateCurve}.",
            "itemtype": "property",
            "name": "numberPoints",
            "type": "Number",
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 96,
            "description": "Stores a quad tree if it is required. The quad tree is generated in the curve\nupdates and can be used to speed up the hasPoint method.",
            "itemtype": "property",
            "name": "qdt",
            "type": "{JXG.Math.Quadtree}",
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 147,
            "description": "Gives the default value of the left bound for the curve.\nMay be overwritten in {@link JXG.Curve#generateTerm}.",
            "itemtype": "method",
            "name": "minX",
            "return": {
                "description": "Left bound for the curve.",
                "type": "Number"
            },
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 165,
            "description": "Gives the default value of the right bound for the curve.\nMay be overwritten in {@link JXG.Curve#generateTerm}.",
            "itemtype": "method",
            "name": "maxX",
            "return": {
                "description": "Right bound for the curve.",
                "type": "Number"
            },
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 183,
            "description": "Treat the curve as curve with homogeneous coordinates.",
            "itemtype": "method",
            "name": "Z",
            "params": [
                {
                    "name": "t",
                    "description": "A number between 0.0 and 1.0.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Always 1.0",
                "type": "Number"
            },
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 194,
            "description": "Checks whether (x,y) is near the curve.",
            "itemtype": "method",
            "name": "hasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "Optional start index for search on data plots.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if (x,y) is near the curve, False otherwise.",
                "type": "Boolean"
            },
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 307,
            "description": "Allocate points in the Coords array this.points",
            "itemtype": "method",
            "name": "allocatePoints",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 327,
            "description": "Computes for equidistant points on the x-axis the values of the function",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "Reference to the curve object.",
                "type": "JXG.Curve"
            },
            "chainable": 1,
            "references": [
                "JXG.Curve#updateCurve"
            ],
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 385,
            "description": "For dynamic dat aplots, `updateDataArray` can be used to compute new entries\nfor the arrays `JXG.Curve#dataX` and `JXG.Curve#dataY`. It\nis used in {@link JXG.Curve#updateCurve}. Default is an empty method, can\nbe overwritten by the user.",
            "itemtype": "method",
            "name": "updateDataArray",
            "example": [
                "\nIn this example the filled curve which shows the intersection of two polygons\nis plotted. The curve is defined by the coordinates in `dataX` and `dataY`.\n\n    var i,\n        board = JXG.JSXGraph.initBoard('box', {boundingbox: [-8,8,8,-8], axis: true}),\n        pts1 = [[-2, 3], [-4, -3], [2, 0], [4, 4]],\n        pts2 = [[-2, -3], [-4, 1], [0, 4], [5, 1]];\n\n    // Clipping polygon\n    var pol = board.create('polygon', pts1,\n                {hasInnerPoints: true,\n                 borders: {names: ['', '', '', '']},\n                 name:'Polygon1', withLabel: true, visible: true,\n                 fillColor: 'yellow'});\n\n    // Polygon to be clipped\n    var pol2 = board.create('polygon', pts2,\n                {hasInnerPoints: false,\n                 borders: {names: ['', '', '', '']},\n                 name:'Polygon2', withLabel: true, visible: true\n                 });\n\n    var curve = board.create('curve', [[],[]], {fillColor: 'blue', fillOpacity: 0.4});\n    curve.updateDataArray = function() {\n        var mat = JXG.Math.transpose(pol.intersect(pol2));\n\n        if (mat.length == 3) {\n            this.dataX = mat[1];\n            this.dataY = mat[2];\n        } else {\n            this.dataX = [];\n            this.dataY = [];\n        }\n\n    };\n\n    board.update();\n\n<div id=\"13a51406-3b65-11e5-8dd9-901b0e1b8723\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n    (function() {\n        var board = JXG.JSXGraph.initBoard('13a51406-3b65-11e5-8dd9-901b0e1b8723',\n            {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n        var i,\n            pts1 = [[-2, 3], [-4, -3], [2, 0], [4, 4]],\n            pts2 = [[-2, -3], [-4, 1], [0, 4], [5, 1]];\n        // Clipping polygon\n        var pol = board.create('polygon', pts1,\n                    {hasInnerPoints: true,\n                     borders: {names: ['', '', '', '']},\n                     name:'Polygon1', withLabel: true, visible: true,\n                     fillColor: 'yellow'});\n        // Polygon to be clipped\n        var pol2 = board.create('polygon', pts2,\n                    {hasInnerPoints: false,\n                     borders: {names: ['', '', '', '']},\n                     name:'Polygon2', withLabel: true, visible: true\n                     });\n        var curve = board.create('curve', [[],[]], {fillColor: 'blue', fillOpacity: 0.4});\n        curve.updateDataArray = function() {\n            var mat = JXG.Math.transpose(pol.intersect(pol2));\n            if (mat.length == 3) {\n                this.dataX = mat[1];\n                this.dataY = mat[2];\n            } else {\n                this.dataX = [];\n                this.dataY = [];\n            }\n        };\n        board.update();\n    })();\n</script>"
            ],
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 471,
            "description": "Computes the path of coordinates defining the curve. For this various\nmethods are used, depending whether the curve is defined by a data array\nof by function terms.\nIf the mousemove event triggers this update, we use only few\npoints. Otherwise, e.g. on mouseup, many points are used.",
            "itemtype": "method",
            "name": "updateCurve",
            "chainable": 1,
            "return": {
                "description": "Reference to the curve object.",
                "type": "JXG.Curve"
            },
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 566,
            "description": "Update the transfomration matrices bound to this curve.",
            "itemtype": "method",
            "name": "updateTransformMatrix",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Reference to the curve object.",
                "type": "JXG.Curve"
            },
            "chainable": 1,
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 589,
            "description": "Check if at least one point on the curve is finite and real and\nsets the property `isReal`.",
            "itemtype": "method",
            "name": "checkReal",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Reference to the curve object.",
                "type": "JXG.Curve"
            },
            "chainable": 1,
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 613,
            "description": "Updates the data points of a parametric curve using a fixed set of equidistant points.\nThis version is used if {@link JXG.Curve#doadvancedplot} is <tt>false</tt>.",
            "itemtype": "method",
            "name": "updateParametricCurveNaive",
            "params": [
                {
                    "name": "mi",
                    "description": "Left bound of curve",
                    "type": "Number"
                },
                {
                    "name": "ma",
                    "description": "Right bound of curve",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "Number of data points",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Reference to the curve object.",
                "type": "JXG.Curve"
            },
            "chainable": 1,
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 638,
            "description": "Updates the data points of a parametric curve. This version is used if {@link JXG.Curve#doadvancedplot} is <tt>true</tt>.\nSince 0.99 this algorithm is deprecated. It still can be used if {@link JXG.Curve#doadvancedplotold} is <tt>true</tt>.",
            "itemtype": "method",
            "name": "updateParametricCurveOld",
            "deprecated": true,
            "params": [
                {
                    "name": "mi",
                    "description": "Left bound of curve",
                    "type": "Number"
                },
                {
                    "name": "ma",
                    "description": "Right bound of curve",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Reference to the curve object.",
                "type": "JXG.Curve"
            },
            "chainable": 1,
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 784,
            "description": "Crude and cheap test if the segment defined by the two points <tt>(x0, y0)</tt> and <tt>(x1, y1)</tt> is\noutside the viewport of the board. All parameters have to be given in screen coordinates.",
            "itemtype": "method",
            "name": "isSegmentOutside",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<tt>true</tt> if the given segment is outside the visible area.",
                "type": "Boolean"
            },
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 801,
            "description": "Compares the absolute value of <tt>dx</tt> with <tt>MAXX</tt> and the absolute value of <tt>dy</tt>\nwith <tt>MAXY</tt>.",
            "itemtype": "method",
            "name": "isDistOK",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "dx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "MAXX",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "MAXY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<tt>true</tt>, if <tt>|dx| &lt; MAXX</tt> and <tt>|dy| &lt; MAXY</tt>.",
                "type": "Boolean"
            },
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 817,
            "itemtype": "method",
            "name": "isSegmentDefined",
            "access": "private",
            "tagname": "",
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 825,
            "description": "Add a point to the curve plot. If the new point is too close to the previously inserted point,\nit is skipped.\nUsed in {@link JXG.Curve._plotRecursive}.",
            "itemtype": "method",
            "name": "_insertPoint",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pnt",
                    "description": "Coords to add to the list of points",
                    "type": "JXG.Coords"
                }
            ],
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 857,
            "description": "Investigate a function term at the bounds of intervals where\nthe function is not defined, e.g. log(x) at x = 0.\n\nc is between a and b",
            "itemtype": "method",
            "name": "_borderCase",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "a",
                    "description": "Screen coordinates of the left interval bound",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "Screen coordinates of the right interval bound",
                    "type": "Array"
                },
                {
                    "name": "c",
                    "description": "Screen coordinates of the bisection point at (ta + tb) / 2",
                    "type": "Array"
                },
                {
                    "name": "ta",
                    "description": "Parameter which evaluates to a, i.e. [1, X(ta), Y(ta)] = a in screen coordinates",
                    "type": "Number"
                },
                {
                    "name": "tb",
                    "description": "Parameter which evaluates to b, i.e. [1, X(tb), Y(tb)] = b in screen coordinates",
                    "type": "Number"
                },
                {
                    "name": "tc",
                    "description": "(ta + tb) / 2 = tc. Parameter which evaluates to b, i.e. [1, X(tc), Y(tc)] = c in screen coordinates",
                    "type": "Number"
                },
                {
                    "name": "depth",
                    "description": "Actual recursion depth. The recursion stops if depth is equal to 0.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the point is inserted and the recursion should stop, false otherwise.",
                "type": "JXG.Boolean"
            },
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 942,
            "description": "Compute distances in screen coordinates between the points ab,\nac, cb, and cd, where d = (a + b)/2.\ncd is used for the smoothness test, ab, ac, cb are used to detect jumps, cusps and poles.",
            "itemtype": "method",
            "name": "_triangleDists",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "a",
                    "description": "Screen coordinates of the left interval bound",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "Screen coordinates of the right interval bound",
                    "type": "Array"
                },
                {
                    "name": "c",
                    "description": "Screen coordinates of the bisection point at (ta + tb) / 2",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of distances in screen coordinates between: ab, ac, cb, and cd.",
                "type": "Array"
            },
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 967,
            "description": "Test if the function is undefined on an interval:\nIf the interval borders a and b are undefined, 20 random values\nare tested if they are undefined, too.\nOnly if all values are undefined, we declare the function to be undefined in this interval.",
            "itemtype": "method",
            "name": "_isUndefined",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "a",
                    "description": "Screen coordinates of the left interval bound",
                    "type": "Array"
                },
                {
                    "name": "ta",
                    "description": "Parameter which evaluates to a, i.e. [1, X(ta), Y(ta)] = a in screen coordinates",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Screen coordinates of the right interval bound",
                    "type": "Array"
                },
                {
                    "name": "tb",
                    "description": "Parameter which evaluates to b, i.e. [1, X(tb), Y(tb)] = b in screen coordinates",
                    "type": "Number"
                }
            ],
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 1000,
            "description": "Determines if a segment is outside of the visible canvas (plus a certain border).",
            "itemtype": "method",
            "name": "_isOutside",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "a",
                    "description": "First point of the segement",
                    "type": "Number"
                },
                {
                    "name": "ta",
                    "description": "Parameter of the curve for first point",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Second point of the segment",
                    "type": "Number"
                },
                {
                    "name": "tb",
                    "description": "Parameter of the curve for second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if segment is visible.",
                "type": "Boolean"
            },
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 1022,
            "description": "Recursive interval bisection algorithm for curve plotting.\nUsed in {@link JXG.Curve.updateParametricCurve}.",
            "itemtype": "method",
            "name": "_plotRecursive",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "a",
                    "description": "Screen coordinates of the left interval bound",
                    "type": "Array"
                },
                {
                    "name": "ta",
                    "description": "Parameter which evaluates to a, i.e. [1, X(ta), Y(ta)] = a in screen coordinates",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Screen coordinates of the right interval bound",
                    "type": "Array"
                },
                {
                    "name": "tb",
                    "description": "Parameter which evaluates to b, i.e. [1, X(tb), Y(tb)] = b in screen coordinates",
                    "type": "Number"
                },
                {
                    "name": "depth",
                    "description": "Actual recursion depth. The recursion stops if depth is equal to 0.",
                    "type": "Number"
                },
                {
                    "name": "delta",
                    "description": "If the distance of the bisection point at (ta + tb) / 2 from the point (a + b) / 2 is less then delta,\n                the segment [a,b] is regarded as straight line.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Reference to the curve object.",
                "type": "JXG.Curve"
            },
            "chainable": 1,
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 1094,
            "description": "Updates the data points of a parametric curve.\nThis version is used if {@link JXG.Curve#doadvancedplot} is <tt>true</tt>.",
            "itemtype": "method",
            "name": "updateParametricCurve",
            "params": [
                {
                    "name": "mi",
                    "description": "Left bound of curve",
                    "type": "Number"
                },
                {
                    "name": "ma",
                    "description": "Right bound of curve",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Reference to the curve object.",
                "type": "JXG.Curve"
            },
            "chainable": 1,
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 1152,
            "description": "Applies the transformations of the curve to the given point <tt>p</tt>.\nBefore using it, {@link JXG.Curve#updateTransformMatrix} has to be called.",
            "itemtype": "method",
            "name": "updateTransform",
            "params": [
                {
                    "name": "p",
                    "description": "",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "The given point.",
                "type": "JXG.Point"
            },
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 1172,
            "description": "Add transformations to this curve.",
            "itemtype": "method",
            "name": "addTransform",
            "params": [
                {
                    "name": "transform",
                    "description": "Either one {@link JXG.Transformation} or an array of {@link JXG.Transformation}s.",
                    "type": "JXG.Transformation|Array"
                }
            ],
            "return": {
                "description": "Reference to the curve object.",
                "type": "JXG.Curve"
            },
            "chainable": 1,
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 1192,
            "description": "Generate the method curve.X() in case curve.dataX is an array\nand generate the method curve.Y() in case curve.dataY is an array.",
            "itemtype": "method",
            "name": "interpolationFunctionFromArray",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "which",
                    "description": "Either 'X' or 'Y'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 1271,
            "description": "Converts the GEONExT syntax of the defining function term into JavaScript.\n New methods X() and Y() for the Curve object are generated, further\n new methods for minX() and maxX().",
            "references": [
                "JXG.GeonextParser.geonext2JS."
            ],
            "itemtype": "method",
            "name": "generateTerm",
            "params": [
                {
                    "name": "varname",
                    "description": "Name of the parameter, e.g. 't' or 'x'",
                    "type": "String"
                },
                {
                    "name": "xterm",
                    "description": "[description]",
                    "type": "Array|String|Function"
                },
                {
                    "name": "yterm",
                    "description": "[description]",
                    "type": "Array|String|Function"
                },
                {
                    "name": "mi",
                    "description": "[description]",
                    "type": "String|Function"
                },
                {
                    "name": "ma",
                    "description": "[description]",
                    "type": "String|Function"
                }
            ],
            "return": {
                "description": "Reference to the curve object.",
                "type": "JXG.Curve"
            },
            "chainable": 1,
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/curve.js",
            "line": 1349,
            "description": "Finds dependencies in a given term and notifies the parents by adding the\ndependent object to the found objects child elements.",
            "itemtype": "method",
            "name": "notifyParents",
            "params": [
                {
                    "name": "contentStr",
                    "description": "String containing dependencies for the given object.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Reference to the curve object.",
                "type": "JXG.Curve"
            },
            "chainable": 1,
            "class": "JXG.Curve"
        },
        {
            "file": "src/base/element.js",
            "line": 73,
            "description": "Controls if updates are necessary",
            "itemtype": "property",
            "name": "needsUpdate",
            "type": "Boolean",
            "default": "true",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 82,
            "description": "Controls if this element can be dragged. In GEONExT only\nfree points and gliders can be dragged.",
            "itemtype": "property",
            "name": "isDraggable",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 92,
            "description": "If element is in two dimensional real space this is true, else false.",
            "itemtype": "property",
            "name": "isReal",
            "type": "Boolean",
            "default": "true",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 101,
            "description": "Stores all dependent objects to be updated when this point is moved.",
            "itemtype": "property",
            "name": "childElements",
            "type": "Object",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 109,
            "description": "If element has a label subelement then this property will be set to true.",
            "itemtype": "property",
            "name": "hasLabel",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 118,
            "description": "True, if the element is currently highlighted.",
            "itemtype": "property",
            "name": "highlighted",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 127,
            "description": "Stores all Intersection Objects which in this moment are not real and\nso hide this element.",
            "itemtype": "property",
            "name": "notExistingParents",
            "type": "Object",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 136,
            "description": "Keeps track of all objects drawn as part of the trace of the element.",
            "references": [
                "JXG.GeometryElement#traced",
                "JXG.GeometryElement#clearTrace",
                "JXG.GeometryElement#numTraces"
            ],
            "itemtype": "property",
            "name": "traces",
            "type": "Object",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 148,
            "description": "Counts the number of objects drawn as part of the trace of the element.",
            "references": [
                "JXG.GeometryElement#traced",
                "JXG.GeometryElement#clearTrace",
                "JXG.GeometryElement#traces"
            ],
            "itemtype": "property",
            "name": "numTraces",
            "type": "Number",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 159,
            "description": "Stores the  transformations which are applied during update in an array",
            "itemtype": "property",
            "name": "transformations",
            "type": "Array",
            "references": [
                "JXG.Transformation"
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 168,
            "itemtype": "property",
            "name": "baseElement",
            "type": "JXG.GeometryElement",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 177,
            "description": "Elements depending on this element are stored here.",
            "itemtype": "property",
            "name": "descendants",
            "type": "Object",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 185,
            "description": "Elements on which this element depends on are stored here.",
            "itemtype": "property",
            "name": "ancestors",
            "type": "Object",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 193,
            "description": "Ids of elements on which this element depends directly are stored here.",
            "itemtype": "property",
            "name": "parents",
            "type": "Object",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 201,
            "description": "Stores variables for symbolic computations",
            "itemtype": "property",
            "name": "symbolic",
            "type": "Object",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 209,
            "description": "Stores the rendering node for the element.",
            "itemtype": "property",
            "name": "rendNode",
            "type": "Object",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 217,
            "description": "The string used with {@link JXG.Board#create}",
            "itemtype": "property",
            "name": "elType",
            "type": "String",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 225,
            "description": "The element is saved with an explicit entry in the file (<tt>true</tt>) or implicitly\nvia a composition.",
            "itemtype": "property",
            "name": "dump",
            "type": "Boolean",
            "default": "true",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 235,
            "description": "Subs contains the subelements, created during the create method.",
            "itemtype": "property",
            "name": "subs",
            "type": "Object",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 243,
            "description": "The position of this element inside the {@link JXG.Board#objectsList}.",
            "itemtype": "property",
            "name": "_pos",
            "type": "{Number}",
            "default": "-1",
            "access": "private",
            "tagname": "",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 253,
            "description": "[c,b0,b1,a,k,r,q0,q1]\n\nSee\nA.E. Middleditch, T.W. Stacey, and S.B. Tor:\n\"Intersection Algorithms for Lines and Circles\",\nACM Transactions on Graphics, Vol. 8, 1, 1989, pp 25-40.\n\nThe meaning of the parameters is:\nCircle: points p=[p0,p1] on the circle fulfill\n a&lt;p,p&gt; + &lt;b,p&gt; + c = 0\nFor convenience we also store\n r: radius\n k: discriminant = sqrt(&lt;b,b&gt;-4ac)\n q=[q0,q1] center\n\nPoints have radius = 0.\nLines have radius = infinity.\nb: normalized vector, representing the direction of the line.\n\nShould be put into Coords, when all elements possess Coords.",
            "itemtype": "property",
            "name": "stdform",
            "type": "Array",
            "default": "[1, 0, 0, 0, 1, 1, 0, 0]",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 281,
            "description": "The methodMap determines which methods can be called from within JessieCode and under which name it\ncan be used. The map is saved in an object, the name of a property is the name of the method used in JessieCode,\nthe value of a property is the name of the method in JavaScript.",
            "itemtype": "property",
            "name": "methodMap",
            "type": "Object",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 304,
            "description": "Quadratic form representation of circles (and conics)",
            "itemtype": "property",
            "name": "quadraticform",
            "type": "Array",
            "default": "[[1,0,0],[0,1,0],[0,0,1]]",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 313,
            "description": "An associative array containing all visual properties.",
            "itemtype": "property",
            "name": "visProp",
            "type": "Object",
            "default": "empty object",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 324,
            "description": "Is the mouse over this element?",
            "itemtype": "property",
            "name": "mouseover",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 333,
            "description": "Time stamp containing the last time this element has been dragged.",
            "itemtype": "property",
            "name": "lastDragTime",
            "type": "Date",
            "default": "creation time",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 343,
            "description": "Reference to the board associated with the element.",
            "itemtype": "property",
            "name": "board",
            "type": "JXG.Board",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 351,
            "description": "Type of the element.",
            "itemtype": "property",
            "name": "type",
            "final": 1,
            "type": "number",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 360,
            "description": "Original type of the element at construction time. Used for removing glider property.",
            "itemtype": "property",
            "name": "_org_type",
            "final": 1,
            "type": "number",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 369,
            "description": "The element's class.",
            "itemtype": "property",
            "name": "elementClass",
            "final": 1,
            "type": "number",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 378,
            "description": "Unique identifier for the element. Equivalent to id-attribute of renderer element.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 396,
            "description": "Not necessarily unique name for the element.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "Name generated by {@link JXG.Board#generateName}.",
            "references": [
                "JXG.Board#generateName"
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 427,
            "description": "Add an element as a child to the current element. Can be used to model dependencies between geometry elements.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "obj",
                    "description": "The dependent object.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 465,
            "description": "Adds the given object to the descendants list of this object and all its child objects.",
            "itemtype": "method",
            "name": "addDescendants",
            "params": [
                {
                    "name": "obj",
                    "description": "The element that is to be added to the descendants list.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 484,
            "description": "Adds ids of elements to the array this.parents. This method needs to be called if some dependencies\ncan not be detected automatically by JSXGraph. For example if a function graph is given by a function\nwhich referes to coordinates of a point, calling addParents() is necessary.",
            "itemtype": "method",
            "name": "addParents",
            "params": [
                {
                    "name": "parents",
                    "description": "Array of elements or ids of elements.\nAlternatively, one can give a list of objects as parameters.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "reference to the object itself.",
                "type": "JXG.Object"
            },
            "chainable": 1,
            "example": [
                "\n    // Movable function graph\n    var A = board.create('point', [1, 0], {name:'A'}),\n        B = board.create('point', [3, 1], {name:'B'}),\n        f = board.create('functiongraph', function(x) {\n                 var ax = A.X(),\n                     ay = A.Y(),\n                     bx = B.X(),\n                     by = B.Y(),\n                    a = (by - ay) / ( (bx - ax) * (bx - ax) );\n                 return a * (x - ax) * (x - ax) + ay;\n             }, {fixed: false});\n    f.addParents([A, B]);\n<div id=\"7c91d4d2-986c-4378-8135-24505027f251\" style=\"width: 400px; height: 400px;\"></div>\n<script type=\"text/javascript\">\n(function() {\n  var board = JXG.JSXGraph.initBoard('7c91d4d2-986c-4378-8135-24505027f251', {boundingbox: [-1, 9, 9, -1], axis: true, showcopyright: false, shownavigation: false});\n  var A = board.create('point', [1, 0], {name:'A'}),\n      B = board.create('point', [3, 1], {name:'B'}),\n      f = board.create('functiongraph', function(x) {\n           var ax = A.X(),\n               ay = A.Y(),\n               bx = B.X(),\n               by = B.Y(),\n               a = (by - ay) / ( (bx - ax) * (bx - ax) );\n            return a * (x - ax) * (x - ax) + ay;\n       }, {fixed: false});\n  f.addParents([A, B]);\n})();\n</script>\n"
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 549,
            "description": "Sets ids of elements to the array this.parents.\nFirst, this.parents is cleared. See {@link Element#addParents}.",
            "itemtype": "method",
            "name": "setParents",
            "params": [
                {
                    "name": "parents",
                    "description": "Array of elements or ids of elements.\nAlternatively, one can give a list of objects as parameters.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "reference to the object itself.",
                "type": "JXG.Object"
            },
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 564,
            "description": "Remove an element as a child from the current element.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "obj",
                    "description": "The dependent object.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 605,
            "description": "Removes the given object from the descendants list of this object and all its child objects.",
            "itemtype": "method",
            "name": "removeDescendants",
            "params": [
                {
                    "name": "obj",
                    "description": "The element that is to be removed from the descendants list.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 625,
            "description": "Counts the direct children of an object without counting labels.",
            "itemtype": "method",
            "name": "countChildren",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Number of children",
                "type": "Number"
            },
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 645,
            "description": "Returns the elements name, used in JessieCode.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 655,
            "description": "Add transformations to this element.",
            "itemtype": "method",
            "name": "addTransform",
            "params": [
                {
                    "name": "transform",
                    "description": "Either one {@link JXG.Transformation}\n  or an array of {@link JXG.Transformation}s.",
                    "type": "JXG.Transformation|Array"
                }
            ],
            "return": {
                "description": "Reference to the element.",
                "type": "JXG.GeometryElement"
            },
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 668,
            "description": "Decides whether an element can be dragged. This is used in {@link JXG.GeometryElement#setPositionDirectly} methods\nwhere all parent elements are checked if they may be dragged, too.",
            "itemtype": "method",
            "name": "draggable",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 681,
            "description": "Translates the object by <tt>(x, y)</tt>. In case the element is defined by points, the defining points are\ntranslated, e.g. a circle constructed by a center point and a point on the circle line.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "method",
                    "description": "The type of coordinates used here.\nPossible values are {@link JXG.COORDS_BY_USER} and {@link JXG.COORDS_BY_SCREEN}.",
                    "type": "Number"
                },
                {
                    "name": "coords",
                    "description": "array of translation vector.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Reference to the element object.",
                "type": "JXG.GeometryElement"
            },
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 749,
            "description": "Moves an by the difference of two coordinates.",
            "itemtype": "method",
            "name": "setPositionDirectly",
            "params": [
                {
                    "name": "method",
                    "description": "The type of coordinates used here. Possible values are {@link JXG.COORDS_BY_USER} and {@link JXG.COORDS_BY_SCREEN}.",
                    "type": "Number"
                },
                {
                    "name": "coords",
                    "description": "coordinates in screen/user units",
                    "type": "Array"
                },
                {
                    "name": "oldcoords",
                    "description": "previous coordinates in screen/user units",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "this element",
                "type": "JXG.GeometryElement"
            },
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 769,
            "description": "Array of strings containing the polynomials defining the element.\nUsed for determining geometric loci the groebner way.",
            "itemtype": "method",
            "name": "generatePolynomial",
            "return": {
                "description": "An array containing polynomials describing the locus of the current object.",
                "type": "Array"
            },
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 780,
            "description": "Animates properties for that object like stroke or fill color, opacity and maybe\neven more later.",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "hash",
                    "description": "Object containing properties with target values for the animation.",
                    "type": "Object"
                },
                {
                    "name": "time",
                    "description": "Number of milliseconds to complete the animation.",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "Optional settings for the animation:<ul><li>callback: A function that is called as soon as the animation is finished.</li></ul>",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A reference to the object",
                "type": "JXG.GeometryElement"
            },
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 866,
            "description": "Update method. Position and content of the element are updated.\nThe element is redrawn by a subsequent call of {@see #updateRenderer}.\nCan be used sometimes to commit changes to the object.",
            "itemtype": "method",
            "name": "update",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 881,
            "description": "Provide updateRenderer method.",
            "itemtype": "method",
            "name": "updateRenderer",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 892,
            "description": "Hide the element. It will still exist but not visible on the board.",
            "itemtype": "method",
            "name": "hideElement",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 911,
            "description": "Make the element visible.",
            "itemtype": "method",
            "name": "showElement",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 930,
            "description": "Sets the value of property <tt>property</tt> to <tt>value</tt>.",
            "itemtype": "method",
            "name": "_set",
            "params": [
                {
                    "name": "property",
                    "description": "The property's name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 957,
            "description": "Resolves property shortcuts like <tt>color</tt> and expands them, e.g. <tt>strokeColor</tt> and <tt>fillColor</tt>.\nWrites the expanded properties back to the given <tt>properties</tt>.",
            "itemtype": "method",
            "name": "resolveShortcuts",
            "params": [
                {
                    "name": "properties",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The given parameter with shortcuts expanded.",
                "type": "Object"
            },
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 982,
            "description": "Sets a label and it's text\nIf label doesn't exist, it creates one",
            "itemtype": "method",
            "name": "setLabel",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 997,
            "description": "Updates the element's label text, strips all html.",
            "itemtype": "method",
            "name": "setLabelText",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1014,
            "description": "Updates the element's label text and the element's attribute \"name\", strips all html.",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1030,
            "description": "Deprecated alias for {@link JXG.GeometryElement#setAttribute}.",
            "itemtype": "method",
            "name": "setProperty",
            "deprecated": true,
            "deprecationMessage": "Use {@link JXG.GeometryElement#setAttribute}.",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1041,
            "description": "Sets an arbitrary number of attributes.",
            "itemtype": "method",
            "name": "setAttribute",
            "params": [
                {
                    "name": "attributes",
                    "description": "An object with attributes.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "example": [
                "\n    // Set property directly on creation of an element using the attributes object parameter\n    var board = JXG.JSXGraph.initBoard('jxgbox', {boundingbox: [-1, 5, 5, 1]};\n    var p = board.create('point', [2, 2], {visible: false});\n\n    // Now make this point visible and fixed:\n    p.setAttribute({\n        fixed: true,\n        visible: true\n    });"
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1237,
            "description": "Deprecated alias for {@link JXG.GeometryElement#getAttribute}.",
            "itemtype": "method",
            "name": "getProperty",
            "deprecated": true,
            "deprecationMessage": "Use {@link JXG.GeometryElement#getAttribute}.",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1248,
            "description": "Get the value of the property <tt>key</tt>.",
            "itemtype": "method",
            "name": "getAttribute",
            "params": [
                {
                    "name": "key",
                    "description": "The name of the property you are looking for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the property"
            },
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1280,
            "description": "Set the dash style of an object. See {@link #dash} for a list of available dash styles.\nYou should use {@link #setAttribute} instead of this method.",
            "itemtype": "method",
            "name": "setDash",
            "params": [
                {
                    "name": "dash",
                    "description": "Indicates the new dash style",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1294,
            "description": "Notify all child elements for updates.",
            "itemtype": "method",
            "name": "prepareUpdate",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1306,
            "description": "Removes the element from the construction.  This only removes the SVG or VML node of the element and its label (if available) from\nthe renderer, to remove the element completely you should use {@link JXG.Board#removeObject}.",
            "itemtype": "method",
            "name": "remove",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1322,
            "description": "Returns the coords object where a text that is bound to the element shall be drawn.\nDiffers in some cases from the values that getLabelAnchor returns.",
            "itemtype": "method",
            "name": "getTextAnchor",
            "return": {
                "description": "JXG.Coords Place where the text shall be drawn.",
                "type": "JXG.Coords"
            },
            "references": [
                "JXG.GeometryElement#getLabelAnchor"
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1334,
            "description": "Returns the coords object where the label of the element shall be drawn.\nDiffers in some cases from the values that getTextAnchor returns.",
            "itemtype": "method",
            "name": "getLabelAnchor",
            "return": {
                "description": "JXG.Coords Place where the text shall be drawn.",
                "type": "JXG.Coords"
            },
            "references": [
                "JXG.GeometryElement#getTextAnchor"
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1346,
            "description": "Determines whether the element has arrows at start or end of the arc.",
            "itemtype": "method",
            "name": "setArrow",
            "params": [
                {
                    "name": "firstArrow",
                    "description": "True if there is an arrow at the start of the arc, false otherwise.",
                    "type": "Boolean"
                },
                {
                    "name": "lastArrow",
                    "description": "True if there is an arrow at the end of the arc, false otherwise.",
                    "type": "Boolean"
                }
            ],
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1361,
            "description": "Creates a gradient nodes in the renderer.",
            "itemtype": "method",
            "name": "createGradient",
            "references": [
                "JXG.SVGRenderer#setGradient"
            ],
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1376,
            "description": "Creates a label element for this geometry element.",
            "itemtype": "method",
            "name": "createLabel",
            "chainable": 1,
            "references": [
                "#addLabelToElement"
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1423,
            "description": "Highlights the element.",
            "itemtype": "method",
            "name": "highlight",
            "params": [
                {
                    "name": "force",
                    "description": "Force the highlighting",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1453,
            "description": "Uses the \"normal\" properties of the element.",
            "itemtype": "method",
            "name": "noHighlight",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1471,
            "description": "Removes all objects generated by the trace function.",
            "itemtype": "method",
            "name": "clearTrace",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1490,
            "description": "Copy the element to background. This is used for tracing elements.",
            "itemtype": "method",
            "name": "cloneToBackground",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1500,
            "description": "Dimensions of the smallest rectangle enclosing the element.",
            "itemtype": "method",
            "name": "bounds",
            "return": {
                "description": "The coordinates of the enclosing rectangle in a format like the bounding box in {@link JXG.Board#setBoundingBox}.",
                "type": "Array"
            },
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1510,
            "description": "Normalize the element's standard form.",
            "itemtype": "method",
            "name": "normalize",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1522,
            "description": "EXPERIMENTAL. Generate JSON object code of visProp and other properties.",
            "itemtype": "method",
            "name": "toJSON",
            "type": "string",
            "access": "private",
            "tagname": "",
            "ignore": "",
            "return": {
                "description": "JSON string containing element's properties."
            },
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1552,
            "description": "Rotate texts or images by a given degree. Works only for texts where JXG.Text#display equal to \"internal\".",
            "itemtype": "method",
            "name": "addRotation",
            "params": [
                {
                    "name": "angle",
                    "description": "The degree of the rotation (90 means vertical text).",
                    "type": "Number"
                }
            ],
            "references": [
                "JXG.GeometryElement#rotate"
            ],
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1611,
            "description": "Set the highlightStrokeColor of an element",
            "itemtype": "method",
            "name": "highlightStrokeColor",
            "params": [
                {
                    "name": "sColor",
                    "description": "String which determines the stroke color of an object when its highlighted.",
                    "type": "String"
                }
            ],
            "references": [
                "JXG.GeometryElement#highlightStrokeColor"
            ],
            "deprecated": true,
            "deprecationMessage": "Use {@link #setAttribute}",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1626,
            "description": "Set the strokeColor of an element",
            "itemtype": "method",
            "name": "strokeColor",
            "params": [
                {
                    "name": "sColor",
                    "description": "String which determines the stroke color of an object.",
                    "type": "String"
                }
            ],
            "references": [
                "JXG.GeometryElement#strokeColor"
            ],
            "deprecated": true,
            "deprecationMessage": "Use {@link #setAttribute}",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1641,
            "description": "Set the strokeWidth of an element",
            "itemtype": "method",
            "name": "strokeWidth",
            "params": [
                {
                    "name": "width",
                    "description": "Integer which determines the stroke width of an outline.",
                    "type": "Number"
                }
            ],
            "references": [
                "JXG.GeometryElement#strokeWidth"
            ],
            "deprecated": true,
            "deprecationMessage": "Use {@link #setAttribute}",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1657,
            "description": "Set the fillColor of an element",
            "itemtype": "method",
            "name": "fillColor",
            "params": [
                {
                    "name": "fColor",
                    "description": "String which determines the fill color of an object.",
                    "type": "String"
                }
            ],
            "references": [
                "JXG.GeometryElement#fillColor"
            ],
            "deprecated": true,
            "deprecationMessage": "Use {@link #setAttribute}",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1673,
            "description": "Set the highlightFillColor of an element",
            "itemtype": "method",
            "name": "highlightFillColor",
            "params": [
                {
                    "name": "fColor",
                    "description": "String which determines the fill color of an object when its highlighted.",
                    "type": "String"
                }
            ],
            "references": [
                "JXG.GeometryElement#highlightFillColor"
            ],
            "deprecated": true,
            "deprecationMessage": "Use {@link #setAttribute}",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1688,
            "description": "Set the labelColor of an element",
            "itemtype": "method",
            "name": "labelColor",
            "params": [
                {
                    "name": "lColor",
                    "description": "String which determines the text color of an object's label.",
                    "type": "String"
                }
            ],
            "references": [
                "JXG.GeometryElement#labelColor"
            ],
            "deprecated": true,
            "deprecationMessage": "Use {@link #setAttribute}",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1703,
            "description": "Set the dash type of an element",
            "itemtype": "method",
            "name": "dash",
            "params": [
                {
                    "name": "d",
                    "description": "Integer which determines the way of dashing an element's outline.",
                    "type": "Number"
                }
            ],
            "references": [
                "JXG.GeometryElement#dash"
            ],
            "deprecated": true,
            "deprecationMessage": "Use {@link #setAttribute}",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1718,
            "description": "Set the visibility of an element",
            "itemtype": "method",
            "name": "visible",
            "params": [
                {
                    "name": "v",
                    "description": "Boolean which determines whether the element is drawn.",
                    "type": "Boolean"
                }
            ],
            "references": [
                "JXG.GeometryElement#visible"
            ],
            "deprecated": true,
            "deprecationMessage": "Use {@link #setAttribute}",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1733,
            "description": "Set the shadow of an element",
            "itemtype": "method",
            "name": "shadow",
            "params": [
                {
                    "name": "s",
                    "description": "Boolean which determines whether the element has a shadow or not.",
                    "type": "Boolean"
                }
            ],
            "references": [
                "JXG.GeometryElement#shadow"
            ],
            "deprecated": true,
            "deprecationMessage": "Use {@link #setAttribute}",
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1748,
            "description": "The type of the element as used in {@link JXG.Board#create}.",
            "itemtype": "method",
            "name": "getTpye",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1758,
            "description": "List of the element ids resp. values used as parents in {@link JXG.Board#create}.",
            "itemtype": "method",
            "name": "getParents",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1768,
            "description": "Snaps the element to the grid. Only works for points, lines and circles. Points will snap to the grid\nas defined in their properties {@link JXG.Point#snapSizeX} and {@link JXG.Point#snapSizeY}. Lines and circles\nwill snap their parent points to the grid, if they have {@link JXG.Point#snapToGrid} set to true.",
            "itemtype": "method",
            "name": "snapToGrid",
            "return": {
                "description": "Reference to the element.",
                "type": "JXG.GeometryElement"
            },
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1781,
            "description": "Snaps the element to points. Only works for points. Points will snap to the next point\nas defined in their properties {@link JXG.Point#attractorDistance} and {@link JXG.Point#attractorUnit}.\nLines and circles\nwill snap their parent points to points.",
            "itemtype": "method",
            "name": "snapToPoints",
            "return": {
                "description": "Reference to the element.",
                "type": "JXG.GeometryElement"
            },
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1795,
            "description": "Retrieve a copy of the current visProp.",
            "itemtype": "method",
            "name": "getAttributes",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1818,
            "description": "Checks whether (x,y) is near the element.",
            "itemtype": "method",
            "name": "hasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y direction, screen coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if (x,y) is near the element, False otherwise.",
                "type": "Boolean"
            },
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1830,
            "description": "Move an element to its nearest grid point.\nThe function uses the coords object of the element as\nits actual position. If there is no coords object, nothing is done.",
            "itemtype": "method",
            "name": "handleSnapToGrid",
            "params": [
                {
                    "name": "force",
                    "description": "force snapping independent from what the snaptogrid attribute says",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Reference to this element",
                "type": "JXG.GeometryElement"
            },
            "chainable": 1,
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1914,
            "description": "Alias of {@link JXG.GeometryElement#on}.",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1919,
            "description": "Alias of {@link JXG.GeometryElement#off}.",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1930,
            "description": "This event is fired whenever the user is hovering over an element.",
            "itemtype": "event",
            "name": "over",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1937,
            "description": "This event is fired whenever the user puts the mouse over an element.",
            "itemtype": "event",
            "name": "mouseover",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1944,
            "description": "This event is fired whenever the user is leaving an element.",
            "itemtype": "event",
            "name": "out",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1952,
            "description": "This event is fired whenever the user puts the mouse away from an element.",
            "itemtype": "event",
            "name": "mouseout",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1959,
            "description": "This event is fired whenever the user is moving over an element.",
            "itemtype": "event",
            "name": "move",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1966,
            "description": "This event is fired whenever the user is moving the mouse over an element.",
            "itemtype": "event",
            "name": "mousemove",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1973,
            "description": "This event is fired whenever the user drags an element.",
            "itemtype": "event",
            "name": "drag",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1980,
            "description": "This event is fired whenever the user drags the element with a mouse.",
            "itemtype": "event",
            "name": "mousedrag",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1987,
            "description": "This event is fired whenever the user drags the element on a touch device.",
            "itemtype": "event",
            "name": "touchdrag",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 1994,
            "description": "Whenever the user starts to touch or click an element.",
            "itemtype": "event",
            "name": "down",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 2001,
            "description": "Whenever the user starts to click an element.",
            "itemtype": "event",
            "name": "mousedown",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 2008,
            "description": "Whenever the user starts to touch an element.",
            "itemtype": "event",
            "name": "touchdown",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 2015,
            "description": "Whenever the user stops to touch or click an element.",
            "itemtype": "event",
            "name": "up",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 2022,
            "description": "Whenever the user releases the mousebutton over an element.",
            "itemtype": "event",
            "name": "mouseup",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 2029,
            "description": "Whenever the user stops touching an element.",
            "itemtype": "event",
            "name": "touchup",
            "params": [
                {
                    "name": "e",
                    "description": "The browser's event object.",
                    "type": "Event"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 2036,
            "description": "Notify everytime an attribute is changed.",
            "itemtype": "event",
            "name": "attribute",
            "params": [
                {
                    "name": "o",
                    "description": "A list of changed attributes and their new value.",
                    "type": "Object"
                },
                {
                    "name": "el",
                    "description": "Reference to the element",
                    "type": "Object"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 2044,
            "description": "This is a generic event handler. It exists for every possible attribute that can be set for\nany element, e.g. if you want to be notified everytime an element's strokecolor is changed, is the event\n<tt>attribute:strokecolor</tt>.",
            "itemtype": "event",
            "name": "attribute:<attribute>",
            "params": [
                {
                    "name": "val",
                    "description": "The old value."
                },
                {
                    "name": "nval",
                    "description": "The new value"
                },
                {
                    "name": "el",
                    "description": "Reference to the element",
                    "type": "Object"
                }
            ],
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/element.js",
            "line": 2055,
            "ignore": "",
            "class": "JXG.GeometryElement"
        },
        {
            "file": "src/base/group.js",
            "line": 42,
            "fileoverview": "In this file the class Group is defined, a class for\nmanaging grouping of points.",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 70,
            "description": "Reference to the board associated with the group.",
            "itemtype": "property",
            "name": "board",
            "type": "JXG.Board",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 78,
            "description": "Object (dictionary) containing the group's elements.\nKey is the id of the element.",
            "itemtype": "property",
            "name": "objects",
            "type": "Object",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 91,
            "description": "Id of group",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 103,
            "itemtype": "property",
            "name": "elementClass",
            "type": "Number",
            "default": "`JXG.OBJECT_CLASS_POINT`",
            "final": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 119,
            "description": "Object (dictionary) containg the coords of all group elements.\nNeeded for update sequence.",
            "itemtype": "property",
            "name": "coords",
            "type": "{Object}",
            "access": "protected",
            "tagname": "",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 131,
            "description": "Center of rotation of this group. If there are rotation points defined for the group and\nthe user drags a rotation point,\nthe group is rotated about it's rotation center. Possible values are\n`centroid` or `JXG.Point`.",
            "itemtype": "property",
            "name": "rotationCenter",
            "type": "{String|JXG.Point}",
            "default": "'centroid'",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 144,
            "description": "Scaling center of this group. If there are scale points defined for the group and\nthe user drags a scale point,\nthe group is scaled in relation to it's scale center. Possible values are\n`centroid` or `JXG.Point`.",
            "itemtype": "property",
            "name": "scaleCenter",
            "type": "{String|JXG.Point}",
            "default": "null",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 157,
            "description": "Set of group elements which trigger a rotation when dragged.",
            "itemtype": "property",
            "name": "rotationPoints",
            "type": "{Array}",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 165,
            "description": "Set of group elements which trigger a translation when dragged.",
            "itemtype": "property",
            "name": "translationPoints",
            "type": "{Array}",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 173,
            "description": "Set of group elements which trigger a scale operation when dragged.",
            "itemtype": "property",
            "name": "scalePoints",
            "type": "{Array}",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 181,
            "description": "List of scale directions for each element of `scalePoints`.\nPossible values are 'x', 'y', and 'xy'. Default value is 'xy'.",
            "itemtype": "property",
            "name": "scaleDirections",
            "type": "{Object}",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 190,
            "description": "Parent elements of the group",
            "itemtype": "property",
            "name": "parents",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 227,
            "description": "Releases all elements of this group.",
            "itemtype": "method",
            "name": "ungroup",
            "return": {
                "description": "returns this (empty) group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 252,
            "description": "Adds ids of elements to the array this.parents. This is a copy\nof {@link Element.addParents}.",
            "itemtype": "method",
            "name": "addParents",
            "params": [
                {
                    "name": "parents",
                    "description": "Array of elements or ids of elements.\nAlternatively, one can give a list of objects as parameters.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "reference to the object itself.",
                "type": "JXG.Object"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 283,
            "description": "Sets ids of elements to the array this.parents. This is a copy\nof {@link Element.setParents}\nFirst, this.parents is cleared. See {@link Group#addParents}.",
            "itemtype": "method",
            "name": "setParents",
            "params": [
                {
                    "name": "parents",
                    "description": "Array of elements or ids of elements.\nAlternatively, one can give a list of objects as parameters.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "reference to the object itself.",
                "type": "JXG.Object"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 299,
            "description": "List of the element ids resp. values used as parents in {@link JXG.Board#create}.",
            "itemtype": "method",
            "name": "getParents",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 309,
            "description": "Sends an update to all group members. This method is called from the points' coords object event listeners\nand not by the board.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "drag",
                    "description": "Element that caused the update.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 412,
            "description": "Determine what the dragging of a group element should do:\nrotation, translation, scaling or nothing.",
            "itemtype": "method",
            "name": "_update_find_drag_type",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Object of the form\n\n    {\n        'action': String\n        'id': String\n        'changed': true/false\n    }",
                "type": "Object"
            },
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 476,
            "description": "Determine the Euclidean coordinates of the centroid of the group.",
            "itemtype": "method",
            "name": "_update_centroid_center",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "array of length two,",
                "type": "Array"
            },
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 503,
            "description": "Apply the transformation to all elements of the group",
            "itemtype": "method",
            "name": "_update_apply_transformation",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 549,
            "description": "Adds a point to this group.",
            "itemtype": "method",
            "name": "addPoint",
            "params": [
                {
                    "name": "object",
                    "description": "The point added to the group.",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 568,
            "description": "Adds multiple points to this group.",
            "itemtype": "method",
            "name": "addPoints",
            "params": [
                {
                    "name": "objects",
                    "description": "An array of points to add to the group.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 586,
            "description": "Adds all points in a group to this group.",
            "itemtype": "method",
            "name": "add Group",
            "params": [
                {
                    "name": "group",
                    "description": "The group added to this group.",
                    "type": "JXG.Group"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 606,
            "description": "Removes a point from the group.",
            "itemtype": "method",
            "name": "removePoint",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 620,
            "description": "Sets the center of rotation for the group. This is either a point or the centroid of the group.",
            "itemtype": "method",
            "name": "setRotationCenter",
            "params": [
                {
                    "name": "object",
                    "description": "A point which will be the center of rotation, the string \"centroid\", or\nan array of length two, or a function returning an array of length two.",
                    "type": "JXG.Point|String"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 635,
            "description": "Sets the rotation points of the group. Dragging at one of these points results into a rotation of the whole group around\nthe rotation center of the group {@see JXG.Group#setRotationCenter}.",
            "itemtype": "method",
            "name": "setRotationPoints",
            "params": [
                {
                    "name": "objects",
                    "description": "Array of {@link JXG.Point} or arbitrary number of {@link JXG.Point} elements.",
                    "type": "Array|JXG.Point"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 648,
            "description": "Adds a point to the set of rotation points of the group. Dragging at one of these points results into a rotation of the whole group around\nthe rotation center of the group {@see JXG.Group#setRotationCenter}.",
            "itemtype": "method",
            "name": "addRotationPoint",
            "params": [
                {
                    "name": "point",
                    "description": "{@link JXG.Point} element.",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 661,
            "description": "Removes the rotation property from a point of the group.",
            "itemtype": "method",
            "name": "removeRotationPoint",
            "params": [
                {
                    "name": "point",
                    "description": "{@link JXG.Point} element.",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 673,
            "description": "Sets the translation points of the group. Dragging at one of these points results into a translation of the whole group.\n\nBy default, all points of the group are translation points.",
            "itemtype": "method",
            "name": "setTranslationPoints",
            "params": [
                {
                    "name": "objects",
                    "description": "Array of {@link JXG.Point} or arbitrary number of {@link JXG.Point} elements.",
                    "type": "Array|JXG.Point"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 687,
            "description": "Adds a point to the set of the translation points of the group.\nDragging at one of these points results into a translation of the whole group.",
            "itemtype": "method",
            "name": "addTranslationPoint",
            "params": [
                {
                    "name": "point",
                    "description": "{@link JXG.Point} element.",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 700,
            "description": "Removes the translation property from a point of the group.",
            "itemtype": "method",
            "name": "removeTranslationPoint",
            "params": [
                {
                    "name": "point",
                    "description": "{@link JXG.Point} element.",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 712,
            "description": "Sets the center of scaling for the group. This is either a point or the centroid of the group.",
            "itemtype": "method",
            "name": "setScaleCenter",
            "params": [
                {
                    "name": "object",
                    "description": "A point which will be the center of scaling, the string \"centroid\", or\nan array of length two, or a function returning an array of length two.",
                    "type": "JXG.Point|String"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 727,
            "description": "Sets the scale points of the group. Dragging at one of these points results into a scaling of the whole group.\nBy default, all points of the group are translation points.",
            "itemtype": "method",
            "name": "setScalePoints",
            "params": [
                {
                    "name": "objects",
                    "description": "Array of {@link JXG.Point} or arbitrary number of {@link JXG.Point} elements.",
                    "type": "Array|JXG.Point"
                },
                {
                    "name": "direction",
                    "description": "Restricts the directions to be scaled. Possible values are 'x', 'y', 'xy'. Default value is 'xy'.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 753,
            "description": "Adds a point to the set of the scale points of the group. Dragging at one of these points results into a scaling of the whole group.",
            "itemtype": "method",
            "name": "addScalePoint",
            "params": [
                {
                    "name": "point",
                    "description": "{@link JXG.Point} element.",
                    "type": "JXG.Point"
                },
                {
                    "name": "direction",
                    "description": "Restricts the directions to be scaled. Possible values are 'x', 'y', 'xy'. Default value is 'xy'.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 769,
            "description": "Removes the scaling property from a point of the group.",
            "itemtype": "method",
            "name": "removeScalePoint",
            "params": [
                {
                    "name": "point",
                    "description": "{@link JXG.Point} element.",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 781,
            "description": "Generic method for {@link JXG.Group@setTranslationPoints} and {@link JXG.Group@setRotationPoints}",
            "itemtype": "method",
            "name": "_setActionPoints",
            "params": [
                {
                    "name": "action",
                    "description": "Type of action, 'rotation', 'scale', 'translation'",
                    "type": "String"
                },
                {
                    "name": "objects",
                    "description": "Array of `JXG.Point` or `JXG.Point`",
                    "type": "Array|JXG.Point"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 808,
            "description": "Generic method for {@link JXG.Group@addTranslationPoint} and {@link JXG.Group@addRotationPoint}",
            "itemtype": "method",
            "name": "_addActionPoint",
            "params": [
                {
                    "name": "action",
                    "description": "Type of action, 'rotation', 'scale', 'translation'",
                    "type": "String"
                },
                {
                    "name": "point",
                    "description": "`JXG.Point`",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 824,
            "description": "Generic method for {@link JXG.Group@removeTranslationPoint} and {@link JXG.Group@removeRotationPoint}",
            "itemtype": "method",
            "name": "_removeActionPoint",
            "params": [
                {
                    "name": "action",
                    "description": "Type of action, 'rotation', 'scale', 'translation'",
                    "type": "String"
                },
                {
                    "name": "point",
                    "description": "`JXG.Point`",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "returns this group",
                "type": "JXG.Group"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 843,
            "description": "Use setAttribute",
            "itemtype": "method",
            "name": "setProperty",
            "deprecated": true,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/group.js",
            "line": 854,
            "description": "Sets an arbitrary number of attributes.",
            "itemtype": "method",
            "name": "setAttribute",
            "params": [
                {
                    "name": "attributes",
                    "description": "An object with attributes.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "JXG.Group"
        },
        {
            "file": "src/base/image.js",
            "line": 46,
            "fileoverview": "In this file the geometry element Image is defined.",
            "class": "JXG.Image"
        },
        {
            "file": "src/base/image.js",
            "line": 83,
            "description": "Function returning the width of the image in user view coordinates.",
            "itemtype": "method",
            "name": "W",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.Image"
        },
        {
            "file": "src/base/image.js",
            "line": 91,
            "description": "Function returning the height of the image in user view coordinates.",
            "itemtype": "method",
            "name": "H",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.Image"
        },
        {
            "file": "src/base/image.js",
            "line": 99,
            "description": "Size of the image in user view coordinates: [w, h].",
            "itemtype": "property",
            "name": "usrSize",
            "type": "Array",
            "class": "JXG.Image"
        },
        {
            "file": "src/base/image.js",
            "line": 107,
            "description": "Size of the image in screen view coordinates, i.e. pixel: [w, h].",
            "itemtype": "property",
            "name": "size",
            "type": "Array",
            "class": "JXG.Image"
        },
        {
            "file": "src/base/image.js",
            "line": 115,
            "description": "URL of the image. This might also be a data url.",
            "itemtype": "property",
            "name": "url",
            "type": "{String}",
            "class": "JXG.Image"
        },
        {
            "file": "src/base/image.js",
            "line": 125,
            "description": "`span` contains the anchor point and the two vectors\nspanning the image rectangle.",
            "itemtype": "property",
            "name": "span",
            "type": "{Array}",
            "class": "JXG.Image"
        },
        {
            "file": "src/base/image.js",
            "line": 155,
            "description": "Checks whether (x,y) is over or near the image;",
            "itemtype": "method",
            "name": "hasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y direction, screen coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if (x,y) is over the image, False otherwise.",
                "type": "Boolean"
            },
            "class": "JXG.Image"
        },
        {
            "file": "src/base/image.js",
            "line": 199,
            "description": "Update coordinates and recalculate the coordinates of lower left corner and the width and the height.",
            "itemtype": "method",
            "name": "update",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Reference to the image object.",
                "type": "JXG.Image"
            },
            "chainable": 1,
            "class": "JXG.Image"
        },
        {
            "file": "src/base/image.js",
            "line": 225,
            "description": "Updates the size of the image.",
            "itemtype": "method",
            "name": "updateSize",
            "return": {
                "description": "Reference to the image object.",
                "type": "JXG.Image"
            },
            "chainable": 1,
            "class": "JXG.Image"
        },
        {
            "file": "src/base/image.js",
            "line": 237,
            "description": "Update the anchor point of the image, i.e. the lower left corner\nand the two vectors which span the rectangle.",
            "itemtype": "method",
            "name": "updateSpan",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Reference to the image object.",
                "type": "JXG.Image"
            },
            "chainable": 1,
            "class": "JXG.Image"
        },
        {
            "file": "src/base/line.js",
            "line": 52,
            "fileoverview": "The geometry object Line is defined in this file. Line stores all\nstyle and functional properties that are required to draw and move a line on\na board.",
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 88,
            "description": "Startpoint of the line. You really should not set this field directly as it may break JSXGraph's\nudpate system so your construction won't be updated properly.",
            "itemtype": "property",
            "name": "point1",
            "type": "JXG.Point",
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 97,
            "description": "Endpoint of the line. Just like {@link #point1} you shouldn't write this field directly.",
            "itemtype": "property",
            "name": "point2",
            "type": "JXG.Point",
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 105,
            "description": "Array of ticks storing all the ticks on this line. Do not set this field directly and use\n{@link JXG.Line#addTicks} and {@link JXG.Line#removeTicks} to add and remove ticks to and from the line.",
            "itemtype": "property",
            "name": "ticks",
            "type": "Array",
            "references": [
                "JXG.Ticks"
            ],
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 115,
            "description": "Reference of the ticks created automatically when constructing an axis.",
            "itemtype": "property",
            "name": "defaultTicks",
            "type": "JXG.Ticks",
            "references": [
                "JXG.Ticks"
            ],
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 124,
            "description": "If the line is the border of a polygon, the polygon object is stored, otherwise null.",
            "itemtype": "property",
            "name": "parentPolygon",
            "type": "JXG.Polygon",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 172,
            "description": "Checks whether (x,y) is near the line.",
            "itemtype": "method",
            "name": "hasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y direction, screen coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if (x,y) is near the line, False otherwise.",
                "type": "Boolean"
            },
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 316,
            "description": "Update segments with fixed length and at least one movable point.",
            "itemtype": "method",
            "name": "updateSegmentFixedLength",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 392,
            "description": "Updates the stdform derived from the parent point positions.",
            "itemtype": "method",
            "name": "updateStdform",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 411,
            "description": "Uses the boards renderer to update the line.",
            "itemtype": "method",
            "name": "updateRenderer",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 456,
            "description": "Used to generate a polynomial for a point p that lies on this line, i.e. p is collinear to {@link #point1}\nand {@link #point2}.",
            "itemtype": "method",
            "name": "generatePolynomial",
            "params": [
                {
                    "name": "p",
                    "description": "The point for that the polynomial is generated.",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "An array containing the generated polynomial.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 493,
            "description": "Calculates the y intersect of the line.",
            "itemtype": "method",
            "name": "getRise",
            "return": {
                "description": "The y intersect.",
                "type": "Number"
            },
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 507,
            "description": "Calculates the slope of the line.",
            "itemtype": "method",
            "name": "getSlope",
            "return": {
                "description": "The slope of the line or Infinity if the line is parallel to the y-axis.",
                "type": "Number"
            },
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 521,
            "description": "Determines the angle in Radians between the positive x axis and the line.",
            "itemtype": "method",
            "name": "getAngle",
            "return": {
                "description": "Radians",
                "type": "Number"
            },
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 531,
            "description": "Determines whether the line is drawn beyond {@link #point1} and {@link #point2} and updates the line.",
            "itemtype": "method",
            "name": "setStraight",
            "params": [
                {
                    "name": "straightFirst",
                    "description": "True if the Line shall be drawn beyond {@link #point1}, false otherwise.",
                    "type": "Boolean"
                },
                {
                    "name": "straightLast",
                    "description": "True if the Line shall be drawn beyond {@link #point2}, false otherwise.",
                    "type": "Boolean"
                }
            ],
            "references": [
                "#straightFirst",
                "#straightLast"
            ],
            "access": "private",
            "tagname": "",
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 554,
            "description": "Adjusts Label coords relative to Anchor. DESCRIPTION",
            "itemtype": "method",
            "name": "setLabelRelativeCoords",
            "access": "private",
            "tagname": "",
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 670,
            "description": "Add transformations to this line.",
            "itemtype": "method",
            "name": "addTransform",
            "params": [
                {
                    "name": "transform",
                    "description": "Either one {@link JXG.Transformation} or an array of\n{@link JXG.Transformation}s.",
                    "type": "JXG.Transformation|Array"
                }
            ],
            "return": {
                "description": "Reference to this line object.",
                "type": "JXG.Line"
            },
            "chainable": 1,
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 759,
            "description": "Treat the line as parametric curve in homogeneous coordinates, where the parameter t runs from 0 to 1.\nFirst we transform the interval [0,1] to [-1,1].\nIf the line has homogeneous coordinates [c,a,b] = stdform[] then the direction of the line is [b,-a].\nNow, we take one finite point that defines the line, i.e. we take either point1 or point2 (in case the line is not the ideal line).\nLet the coordinates of that point be [z, x, y].\nThen, the curve runs linearly from\n[0, b, -a] (t=-1) to [z, x, y] (t=0)\nand\n[z, x, y] (t=0) to [0, -b, a] (t=1)",
            "itemtype": "method",
            "name": "X",
            "params": [
                {
                    "name": "t",
                    "description": "Parameter running from 0 to 1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "X(t) x-coordinate of the line treated as parametric curve.",
                "type": "Number"
            },
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 787,
            "description": "Treat the line as parametric curve in homogeneous coordinates. See {@link #X} for a detailed description.",
            "itemtype": "method",
            "name": "Y",
            "params": [
                {
                    "name": "t",
                    "description": "Parameter running from 0 to 1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Y(t) y-coordinate of the line treated as parametric curve.",
                "type": "Number"
            },
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 807,
            "description": "Treat the line as parametric curve in homogeneous coordinates. See {@link #X} for a detailed description.",
            "itemtype": "method",
            "name": "Z",
            "params": [
                {
                    "name": "t",
                    "description": "Parameter running from 0 to 1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Z(t) z-coordinate of the line treated as parametric curve.",
                "type": "Number"
            },
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 825,
            "description": "The distance between the two points defining the line.",
            "itemtype": "method",
            "name": "L",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 835,
            "description": "Treat the element as a parametric curve",
            "itemtype": "method",
            "name": "minX",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "0.0",
                "type": "Number"
            },
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 846,
            "description": "Treat the element as parametric curve",
            "itemtype": "method",
            "name": "maxX",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "1.0",
                "type": "Number"
            },
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 865,
            "description": "Adds ticks to this line. Ticks can be added to any kind of line: line, arrow, and axis.",
            "itemtype": "method",
            "name": "addTicks",
            "params": [
                {
                    "name": "ticks",
                    "description": "Reference to a ticks object which is describing the ticks (color, distance, how many, etc.).",
                    "type": "JXG.Ticks"
                }
            ],
            "return": {
                "description": "Id of the ticks object.",
                "type": "String"
            },
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 889,
            "description": "Removes all ticks from a line.",
            "itemtype": "method",
            "name": "removeAllTicks",
            "chainable": 1,
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 907,
            "description": "Removes ticks identified by parameter named tick from this line.",
            "itemtype": "method",
            "name": "rmoveTicks",
            "params": [
                {
                    "name": "tick",
                    "description": "Reference to tick object to remove.",
                    "type": "JXG.Ticks"
                }
            ],
            "chainable": 1,
            "class": "JXG.Line"
        },
        {
            "file": "src/base/line.js",
            "line": 1009,
            "description": "The line is defined by two points or coordinates of two points.\nIn the latter case, the points are created.",
            "class": "Line"
        },
        {
            "file": "src/base/line.js",
            "line": 1396,
            "description": "The ticks attached to the axis.",
            "itemtype": "property",
            "name": "defaultTicks",
            "type": "JXG.Ticks",
            "class": "Axis"
        },
        {
            "file": "src/base/line.js",
            "line": 1820,
            "description": "Register the element type tangent at JSXGraph",
            "access": "private",
            "tagname": "",
            "class": "PolarLine"
        },
        {
            "file": "src/base/point.js",
            "line": 51,
            "fileoverview": "The geometry object Point is defined in this file. Point stores all\nstyle and functional properties that are required to draw and move a point on\na board.",
            "class": "JXG.Point"
        },
        {
            "file": "src/base/point.js",
            "line": 83,
            "description": "Anchor element which define the origin for the relative coordinates.\nIf defined the coordinates of the point are relative coordinates.",
            "itemtype": "property",
            "name": "element",
            "type": "{JXG.CoordsElement}",
            "access": "private",
            "tagname": "",
            "class": "JXG.Point"
        },
        {
            "file": "src/base/point.js",
            "line": 105,
            "description": "Inherits here from {@link JXG.GeometryElement}.",
            "class": "JXG.Point"
        },
        {
            "file": "src/base/point.js",
            "line": 112,
            "description": "Checks whether (x,y) is near the point.",
            "itemtype": "method",
            "name": "hasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y direction, screen coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if (x,y) is near the point, False otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Point"
        },
        {
            "file": "src/base/point.js",
            "line": 183,
            "description": "Convert the point into an intersection point and update the construction.\nTo move the point visual onto the intersection, a subsequent call of board update is necessary.\nUses `addConstraint` to set the defining functions for this point.",
            "itemtype": "method",
            "name": "makeIntersection",
            "params": [
                {
                    "name": "el1",
                    "description": "First object to be intersected",
                    "type": "String|JXG.GeometryElement"
                },
                {
                    "name": "el2",
                    "description": "Second object to be intersected",
                    "type": "String|JXG.GeometryElement"
                },
                {
                    "name": "i",
                    "description": "The ith intersection point between `el1` and `el2` is determined",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "Unused",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Reference to the point object.",
                "type": "JXG.Point"
            },
            "chainable": 1,
            "class": "JXG.Point"
        },
        {
            "file": "src/base/point.js",
            "line": 233,
            "description": "Set the style of a point.\nUsed for GEONExT import and should not be used to set the point's face and size.",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "i",
                    "description": "Integer to determine the style.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Reference to the point object.",
                "type": "JXG.Point"
            },
            "chainable": 1,
            "class": "JXG.Point"
        },
        {
            "file": "src/base/point.js",
            "line": 271,
            "description": "Use JXG#normalizePointFace instead",
            "itemtype": "method",
            "name": "normalizeFace",
            "deprecated": true,
            "params": [
                {
                    "name": "s",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "JXG.Point"
        },
        {
            "file": "src/base/point.js",
            "line": 284,
            "description": "Set the face of a point element. Use `setAttribute()`` instead.",
            "itemtype": "method",
            "name": "face",
            "params": [
                {
                    "name": "f",
                    "description": "String which determines the face of the point. See {@link JXG.GeometryElement#face} for a list of available faces.",
                    "type": "String"
                }
            ],
            "references": [
                "JXG.GeometryElement#face"
            ],
            "deprecated": true,
            "class": "JXG.Point"
        },
        {
            "file": "src/base/point.js",
            "line": 297,
            "description": "Set the size of a point element. Use `setAttribute()` instead.",
            "itemtype": "method",
            "name": "size",
            "params": [
                {
                    "name": "s",
                    "description": "Integer which determines the size of the point.",
                    "type": "Number"
                }
            ],
            "references": [
                "JXG.GeometryElement#size"
            ],
            "deprecated": true,
            "class": "JXG.Point"
        },
        {
            "file": "src/base/point.js",
            "line": 540,
            "description": "Array of length 2 containing the numbers i and j.\nThe intersection point is i-th intersection point.\nj is unused.",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Intersection"
        },
        {
            "file": "src/base/polygon.js",
            "line": 75,
            "description": "If false the polygon has no edges (borders).",
            "itemtype": "property",
            "name": "withLines",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 85,
            "description": "References to the points defining the polygon. The last vertex is the same as the first vertex.",
            "itemtype": "property",
            "name": "vertices",
            "type": "Array",
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 102,
            "description": "References to the border lines of the polygon.",
            "itemtype": "property",
            "name": "borders",
            "type": "Array",
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 166,
            "description": "Checks whether (x,y) is near the polygon.",
            "itemtype": "method",
            "name": "hasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y direction, screen coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns true, if (x,y) is inside or at the boundary the polygon, otherwise false.",
                "type": "Boolean"
            },
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 274,
            "description": "Hide the polygon including its border lines. It will still exist but not visible on the board.",
            "itemtype": "method",
            "name": "hideElement",
            "params": [
                {
                    "name": "borderless",
                    "description": "If set to true, the polygon is treated as a polygon without\nborders, i.e. the borders will not be hidden.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Reference to this polygon",
                "type": "JXG.Polygon"
            },
            "chainable": 1,
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 305,
            "description": "Make the element visible.",
            "itemtype": "method",
            "name": "showElement",
            "params": [
                {
                    "name": "borderless",
                    "description": "If set to true, the polygon is treated as a polygon without\nborders, i.e. the borders will not be shown.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Reference to this polygon",
                "type": "JXG.Polygon"
            },
            "chainable": 1,
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 335,
            "description": "Area of (not self-intersecting) polygon",
            "itemtype": "method",
            "name": "Area",
            "return": {
                "description": "Area of (not self-intersecting) polygon",
                "type": "Number"
            },
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 345,
            "description": "Bounding box of a polygon. The bounding box is an array of four numbers: the first two numbers\ndetermine the upper left corner, the last two number determine the lower right corner of the bounding box.",
            "itemtype": "method",
            "name": "boundingBox",
            "return": {
                "description": "Array containing four numbers: [minX, maxY, maxX, minY]",
                "type": "Array"
            },
            "example": [
                "\nThe width and height of a polygon can then determined like this:\n\n     var box = polygon.boundingBox();\n     var width = box[2] - box[0];\n     var height = box[1] - box[3];\n"
            ],
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 395,
            "description": "This method removes the SVG or VML nodes of the lines and the filled area from the renderer, to remove\nthe object completely you should use {@link JXG.Board#removeObject}.",
            "itemtype": "method",
            "name": "remove",
            "access": "private",
            "tagname": "",
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 412,
            "description": "Finds the index to a given point reference.",
            "itemtype": "method",
            "name": "findPoint",
            "params": [
                {
                    "name": "p",
                    "description": "Reference to an element of type {@link JXG.Point}",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "Index of the point in `vertices` or -1 if not found.",
                "type": "Number"
            },
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 436,
            "description": "Add more points to the polygon. The new points will be inserted at the end.",
            "itemtype": "method",
            "name": "addPoint",
            "params": [
                {
                    "name": "p",
                    "description": "Arbitrary number of points",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "Reference to the polygon",
                "type": "JXG.Polygon"
            },
            "chainable": 1,
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 450,
            "description": "Adds more points to the vertex list of the polygon, starting with index <tt><i</tt>",
            "itemtype": "method",
            "name": "insertPoints",
            "params": [
                {
                    "name": "idx",
                    "description": "The position where the new vertices are inserted, starting with 0.",
                    "type": "Number"
                },
                {
                    "name": "p",
                    "description": "Arbitrary number of points to insert.",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "Reference to the polygon object",
                "type": "JXG.Polygon"
            },
            "chainable": 1,
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 497,
            "description": "Removes given set of vertices from the polygon",
            "itemtype": "method",
            "name": "removePoints",
            "params": [
                {
                    "name": "p",
                    "description": "Arbitrary number of vertices as {@link JXG.Point} elements or index numbers",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "Reference to the polygon",
                "type": "JXG.Polygon"
            },
            "chainable": 1,
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 645,
            "description": "Moves the polygon by the difference of two coordinates.",
            "itemtype": "method",
            "name": "setPositionDirectly",
            "params": [
                {
                    "name": "method",
                    "description": "The type of coordinates used here. Possible values are {@link JXG.COORDS_BY_USER} and {@link JXG.COORDS_BY_SCREEN}.",
                    "type": "Number"
                },
                {
                    "name": "coords",
                    "description": "coordinates in screen/user units",
                    "type": "Array"
                },
                {
                    "name": "oldcoords",
                    "description": "previous coordinates in screen/user units",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "this element",
                "type": "JXG.Polygon"
            },
            "chainable": 1,
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 674,
            "description": "Algorithm by Sutherland and Hodgman to compute the intersection of two convex polygons.\nThe polygon itself is the clipping polygon, it expects as parameter a polygon to be clipped.\nSee <a href=\"https://en.wikipedia.org/wiki/Sutherland%E2%80%93Hodgman_algorithm\">wikipedia entry</a>.\nCalled by {@link JXG.Polygon#intersect}.",
            "itemtype": "method",
            "name": "sutherlandHodgman",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "polygon",
                    "description": "Polygon which will be clipped.",
                    "type": "JXG.Polygon"
                }
            ],
            "return": {
                "description": "of (normalized homogeneous user) coordinates (i.e. [z, x, y], where z==1 in most cases,\n  representing the vertices of the intersection polygon.",
                "type": "Array"
            },
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 701,
            "description": "Determines if the point c3 is right of the line through c1 and c2.\nSince the polygons are sorted counter clockwise, \"right of\" and therefore >= is needed here",
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/polygon.js",
            "line": 745,
            "description": "Generic method for the intersection of this polygon with another polygon.\nThe parent object is the clipping polygon, it expects as parameter a polygon to be clipped.\nBoth polygons have to be convex.\nCalls {@link JXG.Polygon#sutherlandHodgman}.",
            "itemtype": "method",
            "name": "intersect",
            "params": [
                {
                    "name": "polygon",
                    "description": "Polygon which will be clipped.",
                    "type": "JXG.Polygon"
                }
            ],
            "return": {
                "description": "of (normalized homogeneous user) coordinates (i.e. [z, x, y], where z==1 in most cases,\n  representing the vertices of the intersection polygon.",
                "type": "Array"
            },
            "example": [
                "\n\n     // Static intersection of two polygons pol1 and pol2\n     var pol1 = board.create('polygon', [[-2, 3], [-4, -3], [2, 0], [4, 4]], {\n               name:'pol1', withLabel: true,\n               fillColor: 'yellow'\n            });\n     var pol2 = board.create('polygon', [[-2, -3], [-4, 1], [0, 4], [5, 1]], {\n               name:'pol2', withLabel: true\n            });\n\n     // Static version:\n     // the intersection polygon does not adapt to changes of pol1 or pol2.\n     var pol3 = board.create('polygon', pol1.intersect(pol2), {fillColor: 'blue'});\n<div id=\"d1fe5ea9-309f-494a-af07-ee3d033acb7c\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n  (function() {\n      var board = JXG.JSXGraph.initBoard('d1fe5ea9-309f-494a-af07-ee3d033acb7c', {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n      // Intersect two polygons pol1 and pol2\n      var pol1 = board.create('polygon', [[-2, 3], [-4, -3], [2, 0], [4, 4]], {\n               name:'pol1', withLabel: true,\n               fillColor: 'yellow'\n            });\n      var pol2 = board.create('polygon', [[-2, -3], [-4, 1], [0, 4], [5, 1]], {\n               name:'pol2', withLabel: true\n            });\n      // Static version: the intersection polygon does not adapt to changes of pol1 or pol2.\n      var pol3 = board.create('polygon', pol1.intersect(pol2), {fillColor: 'blue'});\n  })();\n</script>",
                "\n\n     // Dynamic intersection of two polygons pol1 and pol2\n     var pol1 = board.create('polygon', [[-2, 3], [-4, -3], [2, 0], [4, 4]], {\n               name:'pol1', withLabel: true,\n               fillColor: 'yellow'\n            });\n     var pol2 = board.create('polygon', [[-2, -3], [-4, 1], [0, 4], [5, 1]], {\n               name:'pol2', withLabel: true\n            });\n\n     // Dynamic version:\n     // the intersection polygon does  adapt to changes of pol1 or pol2.\n     // For this a curve element is used.\n     var curve = board.create('curve', [[],[]], {fillColor: 'blue', fillOpacity: 0.4});\n     curve.updateDataArray = function() {\n         var mat = JXG.Math.transpose(pol1.intersect(pol2));\n\n         if (mat.length == 3) {\n             this.dataX = mat[1];\n             this.dataY = mat[2];\n         } else {\n             this.dataX = [];\n             this.dataY = [];\n         }\n     };\n     board.update();\n\n<div id=\"f870d516-ca1a-4140-8fe3-5d64fb42e5f2\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n  (function() {\n      var board = JXG.JSXGraph.initBoard('f870d516-ca1a-4140-8fe3-5d64fb42e5f2', {boundingbox: [-8, 8, 8,-8], axis: true, showcopyright: false, shownavigation: false});\n      // Intersect two polygons pol1 and pol2\n      var pol1 = board.create('polygon', [[-2, 3], [-4, -3], [2, 0], [4, 4]], {\n               name:'pol1', withLabel: true,\n               fillColor: 'yellow'\n            });\n      var pol2 = board.create('polygon', [[-2, -3], [-4, 1], [0, 4], [5, 1]], {\n               name:'pol2', withLabel: true\n            });\n // Dynamic version:\n // the intersection polygon does  adapt to changes of pol1 or pol2.\n // For this a curve element is used.\n   var curve = board.create('curve', [[],[]], {fillColor: 'blue', fillOpacity: 0.4});\n   curve.updateDataArray = function() {\n       var mat = JXG.Math.transpose(pol1.intersect(pol2));\n       if (mat.length == 3) {\n           this.dataX = mat[1];\n           this.dataY = mat[2];\n       } else {\n           this.dataX = [];\n           this.dataY = [];\n       }\n   };\n   board.update();\n  })();\n</script>\n"
            ],
            "class": "JXG.Polygon"
        },
        {
            "file": "src/base/text.js",
            "line": 47,
            "fileoverview": "In this file the Text element is defined.",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 87,
            "description": "Anchor element which define the origin for the relative coordinates.\nIf defined the coordinates of the text are relative coordinates.",
            "itemtype": "property",
            "name": "element",
            "type": "{JXG.CoordsElement}",
            "access": "private",
            "tagname": "",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 98,
            "itemtype": "property",
            "name": "content",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 106,
            "itemtype": "property",
            "name": "plaintext",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 115,
            "itemtype": "property",
            "name": "orgText",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 125,
            "itemtype": "property",
            "name": "hiddenByParent",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 133,
            "description": "Size of the text in screen view coordinates, i.e. pixel: [w, h].",
            "itemtype": "property",
            "name": "size",
            "type": "Array",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 165,
            "description": "Test if the the screen coordinates (x,y) are in a small stripe\nat the left side or at the right side of the text.\nSensitivity is set in this.board.options.precision.hasPoint.\nIf dragarea is set to 'all' (default), tests if the the screen\ncoordinates (x,y) are in within the text boundary.",
            "itemtype": "method",
            "name": "hasPoint",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 183,
            "description": "Transform the mouse/touch coordinates\nback to the original position of the text.",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 219,
            "description": "This sets the updateText function of this element that depending on the type of text content passed.\nUsed by {@link JXG.Text#_setText} and {@link JXG.Text} constructor.",
            "itemtype": "method",
            "name": "_setUpdateText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String|Function|Number"
                }
            ],
            "return": {
                "description": "Reference to the text object.",
                "type": "JXG.Text"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 268,
            "description": "Defines new content. This is used by {@link JXG.Text#setTextJessieCode} and {@link JXG.Text#setText}. This is required because\nJessieCode needs to filter all Texts inserted into the DOM and thus has to replace setText by setTextJessieCode.",
            "itemtype": "method",
            "name": "_setText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String|Function|Number"
                }
            ],
            "return": {
                "description": "Reference to the text object.",
                "type": "JXG.Text"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 294,
            "description": "Defines new content but converts &lt; and &gt; to HTML entities before updating the DOM.",
            "itemtype": "method",
            "name": "setTextJessieCode",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String|function"
                }
            ],
            "return": {
                "description": "Reference to the text object.",
                "type": "JXG.Text"
            },
            "chainable": 1,
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 322,
            "description": "Defines new content.",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String|function"
                }
            ],
            "return": {
                "description": "Reference to the text object.",
                "type": "JXG.Text"
            },
            "chainable": 1,
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 334,
            "description": "Recompute the width and the height of the text box.\nUpdate array `this.size` with pixel values.\nThe result may differ from browser to browser\nby some pixels.\nIn canvas an old IEs we use a very crude estimation of the dimensions of\nthe textbox.\nIn JSXGraph this.size is necessary for applying rotations in IE and\nfor aligning text.",
            "itemtype": "method",
            "name": "updateSize",
            "return": {
                "description": "Reference to the text object.",
                "type": "JXG.Text"
            },
            "chainable": 1,
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 357,
            "description": "offsetWidth and offsetHeight seem to be supported for internal vml elements by IE10+ in IE8 mode.",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 388,
            "description": "A very crude estimation of the dimensions of the textbox in case nothing else is available.",
            "itemtype": "method",
            "name": "crudeSizeEstimate",
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 399,
            "description": "Decode unicode entities into characters.",
            "itemtype": "method",
            "name": "utf8_decode",
            "params": [
                {
                    "name": "string",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 412,
            "description": "Replace _{} by &lt;sub&gt;",
            "itemtype": "method",
            "name": "replaceSub",
            "params": [
                {
                    "name": "te",
                    "description": "String containing _{}.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Given string with _{} replaced by &lt;sub&gt;.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 450,
            "description": "Replace ^{} by &lt;sup&gt;",
            "itemtype": "method",
            "name": "replaceSup",
            "params": [
                {
                    "name": "te",
                    "description": "String containing ^{}.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Given string with ^{} replaced by &lt;sup&gt;.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 488,
            "description": "Return the width of the text element.",
            "itemtype": "method",
            "name": "getSize",
            "return": {
                "description": "[width, height] in pixel",
                "type": "Array"
            },
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 498,
            "description": "Move the text to new coordinates.",
            "itemtype": "method",
            "name": "setCoords",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "reference to the text object.",
                "type": "JXG.Text"
            },
            "chainable": 1,
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 561,
            "description": "Used to avoid updateSize() calls.\nCalled in `JXG.Text.update`.\nIf true it means that `this.update` has been called.\nMore tests for size changes are in `JXG.Renderer.updateTextStyle`. The latter tests\nare one update off. But this should pose not too many problems, since\nit affects fontSize and cssClass changes.",
            "itemtype": "method",
            "name": "checkForSizeUpdate",
            "return": {
                "description": "reference to the text object.",
                "type": "JXG.Text"
            },
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 595,
            "description": "Converts shortened math syntax into correct syntax:  3x instead of 3*x or\n(a+b)(3+1) instead of (a+b)*(3+1).",
            "itemtype": "method",
            "name": "expandShortMath",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "expr",
                    "description": "Math term",
                    "type": "String"
                }
            ],
            "return": {
                "description": "expanded String",
                "type": "String"
            },
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 609,
            "description": "Converts the GEONExT syntax of the <value> terms into JavaScript.\nAlso, all Objects whose name appears in the term are searched and\nthe text is added as child to these objects.",
            "itemtype": "method",
            "name": "generateTerm",
            "params": [
                {
                    "name": "contentStr",
                    "description": "String to be parsed",
                    "type": "String"
                },
                {
                    "name": "expand",
                    "description": "Optional flag if shortened math syntax is allowed (e.g. 3x instead of 3*x).",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "references": [
                "JXG.GeonextParser.geonext2JS."
            ],
            "return": {
                "description": "Plaintext String",
                "type": "String"
            },
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 684,
            "description": "Converts the GEONExT tags <overline> and <arrow> to\nHTML span tags with proper CSS formating.",
            "itemtype": "method",
            "name": "convertGeonext2CSS",
            "return": {
                "description": "Converted HTML text",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "references": [
                "JXG.Text.generateTerm @see JXG.Text._setText"
            ],
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 708,
            "description": "Finds dependencies in a given term and notifies the parents by adding the\ndependent object to the found objects child elements.",
            "itemtype": "method",
            "name": "notifyParents",
            "params": [
                {
                    "name": "content",
                    "description": "String containing dependencies for the given object.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "reference to the text object.",
                "type": "JXG.Text"
            },
            "chainable": 1,
            "class": "JXG.Text"
        },
        {
            "file": "src/base/text.js",
            "line": 862,
            "description": "[[x,y], [w px, h px], [range]",
            "class": "Text"
        },
        {
            "file": "src/base/ticks.js",
            "line": 48,
            "fileoverview": "In this file the geometry object Ticks is defined. Ticks provides\nmethods for creation and management of ticks on an axis.",
            "author": "graphjs",
            "version": "0.1",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 76,
            "description": "The line the ticks belong to.",
            "itemtype": "property",
            "name": "line",
            "type": "JXG.Line",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 84,
            "description": "The board the ticks line is drawn on.",
            "itemtype": "property",
            "name": "board",
            "type": "JXG.Board",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 91,
            "description": "A function calculating ticks delta depending on the ticks number.",
            "itemtype": "property",
            "name": "ticksFunction",
            "type": "Function",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 99,
            "description": "Array of fixed ticks.",
            "itemtype": "property",
            "name": "fixedTicks",
            "type": "Array",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 107,
            "description": "Equidistant ticks. Distance is defined by ticksFunction",
            "itemtype": "property",
            "name": "equidistant",
            "type": "Boolean",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 136,
            "description": "Least distance between two ticks, measured in pixels.",
            "itemtype": "property",
            "name": "minTicksDistance",
            "type": "int",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 144,
            "description": "Stores the ticks coordinates",
            "itemtype": "property",
            "name": "ticks",
            "type": "{Array}",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 152,
            "description": "Distance between two major ticks in user coordinates",
            "itemtype": "property",
            "name": "ticksDelta",
            "type": "{Number}",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 160,
            "description": "Array where the labels are saved. There is an array element for every tick,\neven for minor ticks which don't have labels. In this case the array element\ncontains just <tt>null</tt>.",
            "itemtype": "property",
            "name": "labels",
            "type": "Array",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 170,
            "description": "A list of labels that are currently unused and ready for reassignment.",
            "itemtype": "property",
            "name": "labelsRepo",
            "type": "{Array}",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 178,
            "description": "To ensure the uniqueness of label ids this counter is used.",
            "itemtype": "property",
            "name": "labelCounter",
            "type": "{number}",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 194,
            "description": "Ticks function:\ndetermines the distance (in user units) of two major ticks.\nSee above in constructor and in @see JXG.GeometryElement#setAttribute",
            "itemtype": "method",
            "name": "makeTicksFunction",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ticks",
                    "description": "Distance between two major ticks",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "returns method ticksFunction",
                "type": "Function"
            },
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 223,
            "description": "Checks whether (x,y) is near the line.",
            "itemtype": "method",
            "name": "hasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y direction, screen coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if (x,y) is near the line, False otherwise.",
                "type": "Boolean"
            },
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 273,
            "description": "Sets x and y coordinate of the tick.",
            "itemtype": "method",
            "name": "setPositionDirectly",
            "params": [
                {
                    "name": "method",
                    "description": "The type of coordinates used here. Possible values are {@link JXG.COORDS_BY_USER} and {@link JXG.COORDS_BY_SCREEN}.",
                    "type": "Number"
                },
                {
                    "name": "coords",
                    "description": "coordinates in screen/user units",
                    "type": "Array"
                },
                {
                    "name": "oldcoords",
                    "description": "previous coordinates in screen/user units",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "this element",
                "type": "JXG.Ticks"
            },
            "chainable": 1,
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 310,
            "description": "(Re-)calculates the ticks coordinates.",
            "itemtype": "method",
            "name": "calculateTicksCoordinates",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "this element",
                "type": "JXG.Ticks"
            },
            "chainable": 1,
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 355,
            "description": "Sets the variables used to set the height and slope of each tick.",
            "itemtype": "method",
            "name": "setTicksSizeVariables",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "this element",
                "type": "JXG.Ticks"
            },
            "chainable": 1,
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 402,
            "description": "Returns the coordinates of the point zero of the line.\n\nIf the line is an {@link Axis}, the coordinates of the projection of the board's zero point is returned\n\nOtherwise, the coordinates of the point that acts as zero are established depending on the value of {@link JXG.Ticks#anchor}",
            "itemtype": "method",
            "name": "getZeroCoordinates",
            "return": {
                "description": "Coords object for the Zero point on the line",
                "type": "JXG.Coords"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 436,
            "description": "Calculate the lower and upper bounds for tick rendering\nIf {@link JXG.Ticks#includeBoundaries} is false, the boundaries will exclude point1 and point2",
            "itemtype": "method",
            "name": "getLowerAndUpperBounds",
            "params": [
                {
                    "name": "coordsZero",
                    "description": "",
                    "type": "JXG.Coords"
                }
            ],
            "return": {
                "description": "contains the lower and upper bounds",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 511,
            "description": "Calculates the distance in user coordinates from zero to a given point including its sign",
            "itemtype": "method",
            "name": "getDistanceFromZero",
            "params": [
                {
                    "name": "zero",
                    "description": "coordinates of the point considered zero",
                    "type": "JXG.Coords"
                },
                {
                    "name": "point",
                    "description": "coordinates of the point to find out the distance",
                    "type": "JXG.Coords"
                }
            ],
            "return": {
                "description": "distance between zero and point, including its sign",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 543,
            "description": "Creates ticks coordinates and labels automatically.\nThe frequency of ticks is affected by the values of {@link JXG.Ticks#insertTicks} and {@link JXG.Ticks#ticksDistance}",
            "itemtype": "method",
            "name": "generateEquidistantTicks",
            "params": [
                {
                    "name": "coordsZero",
                    "description": "coordinates of the point considered zero",
                    "type": "JXG.Coords"
                },
                {
                    "name": "bounds",
                    "description": "contains the lower and upper boundaries for ticks placement",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "this element",
                "type": "JXG.Ticks"
            },
            "chainable": 1,
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 602,
            "description": "Auxiliary method used by {@link JXG.Ticks#generateEquidistantTicks} to adjust the\ndistance between two ticks depending on {@link JXG.Ticks#minTicksDistance} value",
            "itemtype": "method",
            "name": "adjustTickDistance",
            "params": [
                {
                    "name": "ticksDelta",
                    "description": "distance between two major ticks in user coordinates",
                    "type": "Number"
                },
                {
                    "name": "coordsZero",
                    "description": "coordinates of the point considered zero",
                    "type": "JXG.Coords"
                },
                {
                    "name": "deltas",
                    "description": "x and y distance in pixel between two user units",
                    "type": "Object"
                },
                {
                    "name": "bounds",
                    "description": "upper and lower bound of the tick positions in user units.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the new value of ticksDelta",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 638,
            "description": "Auxiliary method used by {@link JXG.Ticks#generateEquidistantTicks} to create a tick\nin the line at the given tickPosition.",
            "itemtype": "method",
            "name": "processTickPosition",
            "params": [
                {
                    "name": "coordsZero",
                    "description": "coordinates of the point considered zero",
                    "type": "JXG.Coords"
                },
                {
                    "name": "tickPosition",
                    "description": "current tick position relative to zero",
                    "type": "Number"
                },
                {
                    "name": "ticksDelta",
                    "description": "distance between two major ticks in user coordinates",
                    "type": "Number"
                },
                {
                    "name": "deltas",
                    "description": "x and y distance between two major ticks",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "this element",
                "type": "JXG.Ticks"
            },
            "chainable": 1,
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 680,
            "description": "Creates ticks coordinates and labels based on {@link JXG.Ticks#fixedTicks} and {@link JXG.Ticks#labels}.",
            "itemtype": "method",
            "name": "generateFixedTicks",
            "params": [
                {
                    "name": "coordsZero",
                    "description": "Coordinates of the point considered zero",
                    "type": "JXG.Coords"
                },
                {
                    "name": "bounds",
                    "description": "contains the lower and upper boundaries for ticks placement",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "this element",
                "type": "JXG.Ticks"
            },
            "chainable": 1,
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 722,
            "description": "Calculates the x and y distance in pixel between two units in user space.",
            "itemtype": "method",
            "name": "getXandYdeltas",
            "return": {
                "description": "Object of the from\n\n        {\n            x: Number,\n            y: Number\n        }",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 766,
            "itemtype": "method",
            "name": "tickEndings",
            "params": [
                {
                    "name": "coords",
                    "description": "Coordinates of the tick on the line.",
                    "type": "JXG.Coords"
                },
                {
                    "name": "major",
                    "description": "True if tick is major tick.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Array of length 3 containing start and end coordinates in screen coordinates\n                 of the tick (arrays of length 2). 3rd entry is true if major tick otherwise false.\n                 If the tick is outside of the canvas, the return array is empty.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 826,
            "description": "Creates the label text for a given tick. A value for the text can be provided as a number or string",
            "itemtype": "method",
            "name": "generateLabelText",
            "params": [
                {
                    "name": "tick",
                    "description": "The Coords-object of the tick to create a label for",
                    "type": "JXG.Coords"
                },
                {
                    "name": "zero",
                    "description": "The Coords-object of line's zero",
                    "type": "JXG.Coords"
                },
                {
                    "name": "value",
                    "description": "A predefined value for this tick",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 880,
            "description": "Create a tick label",
            "itemtype": "method",
            "name": "generateLabel",
            "params": [
                {
                    "name": "labelText",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "tick",
                    "description": "",
                    "type": "JXG.Coords"
                },
                {
                    "name": "tickNumber",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "JXG.Text"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 927,
            "description": "Removes the HTML divs of the tick labels\nbefore repositioning",
            "itemtype": "method",
            "name": "removeTickLabels",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "this element",
                "type": "JXG.Ticks"
            },
            "chainable": 1,
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/ticks.js",
            "line": 954,
            "description": "Recalculate the tick positions and the labels.",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "this element",
                "type": "JXG.Ticks"
            },
            "chainable": 1,
            "class": "JXG.Ticks"
        },
        {
            "file": "src/base/transformation.js",
            "line": 43,
            "fileoverview": "This file contains code for transformations of geometrical objects.",
            "class": "JXG.Transformation"
        },
        {
            "file": "src/base/transformation.js",
            "line": 134,
            "itemtype": "method",
            "name": "update",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "returns pointer to itself",
                "type": "JXG.Transform"
            },
            "chainable": 1,
            "class": "JXG.Transformation"
        },
        {
            "file": "src/base/transformation.js",
            "line": 144,
            "description": "Set the transformation matrix for different types of standard transforms.",
            "itemtype": "method",
            "name": "setMatrix",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                },
                {
                    "name": "type",
                    "description": "Transformation type, possible values are\n                       'translate', 'scale', 'reflect', 'rotate',\n                       'shear', 'generic'.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters for the various transformation types.\n\n<p>These are",
                    "type": "Array"
                },
                {
                    "name": "x,y",
                    "description": "Shift vector (number or function) in case of 'translate'.",
                    "type": "Array"
                },
                {
                    "name": "scale_x,scale_y",
                    "description": "Scale vector (number or function) in case of 'scale'.",
                    "type": "Array"
                },
                {
                    "name": "line|point_pair|\"four",
                    "description": "coordinates\" In case of 'reflect' the parameters could\n               be a line, a pair of points or four number (or functions) p_x, p_y, q_x, q_y,\n               determining a line through points (p_x, p_y) and (q_x, q_y).",
                    "type": "Array"
                },
                {
                    "name": "angle,x,y",
                    "description": "In case of 'rotate' the parameters are an angle or angle function,\n               returning the angle in Radians and - optionally - a coordinate pair or a point defining the\n               returning the angle in Radians and - optionally - a coordinate pair defining the\n               reotation center. If the rotation center is not given, the transformation rotates around (0,0).",
                    "type": "Array"
                },
                {
                    "name": "shear_x,shear_y",
                    "description": "Shear vector (number or function) in case of 'shear'.",
                    "type": "Array"
                },
                {
                    "name": "a,b,c,d,e,f,g,h,i",
                    "description": "Nine matrix entries (numbers or functions) for a generic\n               projective transformation  in case of 'generic'.\n\n<p>A transformation with a generic matrix looks like:\n<pre>\n( a  b  c )   ( z )\n( d  e  f ) * ( x )\n( g  h  i )   ( y )\n</pre>",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "returns pointer to itself",
                "type": "JXG.Transform"
            },
            "chainable": 1,
            "class": "JXG.Transformation"
        },
        {
            "file": "src/base/transformation.js",
            "line": 335,
            "description": "Transform a GeometryElement:\nFirst, the transformation matrix is updated, the do the matrix-vector-multiplication.",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "p",
                    "description": "element which is transformed",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "'self'",
                    "description": "Apply the transformation to the initialCoords instead of the coords if this is set.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.Transformation"
        },
        {
            "file": "src/base/transformation.js",
            "line": 353,
            "description": "Applies a transformation once to a GeometryElement.\nIf it is a free point, then it can be dragged around later\nand will overwrite the transformed coordinates.",
            "itemtype": "method",
            "name": "applyOnce",
            "params": [
                {
                    "name": "p",
                    "description": "",
                    "type": "JXG.Point,Array"
                }
            ],
            "return": {
                "description": "returns pointer to itself",
                "type": "JXG.Transform"
            },
            "chainable": 1,
            "class": "JXG.Transformation"
        },
        {
            "file": "src/base/transformation.js",
            "line": 381,
            "description": "Binds a transformation to a GeometryElement. In every update of the\nGeometryElement, the transformation is executed.",
            "itemtype": "method",
            "name": "bindTo",
            "params": [
                {
                    "name": "p",
                    "description": "JXG.Object or array of JXG.Object to\n                           which the transformation is bound to.",
                    "type": "Array,JXG.Object"
                }
            ],
            "return": {
                "description": "returns pointer to itself",
                "type": "JXG.Transform"
            },
            "chainable": 1,
            "class": "JXG.Transformation"
        },
        {
            "file": "src/base/transformation.js",
            "line": 406,
            "description": "Unused. USe setAttribute.",
            "itemtype": "method",
            "name": "setProperty",
            "deprecated": true,
            "params": [
                {
                    "name": "term",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "JXG.Transformation"
        },
        {
            "file": "src/base/transformation.js",
            "line": 417,
            "description": "Empty method. Unused.",
            "itemtype": "method",
            "name": "setAttribute",
            "params": [
                {
                    "name": "term",
                    "description": "Key-value pairs of the attributes.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns pointer to itself",
                "type": "JXG.Transform"
            },
            "chainable": 1,
            "class": "JXG.Transformation"
        },
        {
            "file": "src/base/transformation.js",
            "line": 429,
            "description": "Combine two transformations to one transformations. This only works if\nthe both transformation  matrices consist of numbers, solely (and do not\ncontain functions).\n\nMultiplies the transformation with a transformation t from the left.\ni.e. (this) = (t) join (this)",
            "itemtype": "method",
            "name": "melt",
            "params": [
                {
                    "name": "t",
                    "description": "Transformation which is the left multiplicand",
                    "type": "JXG.Transform"
                }
            ],
            "return": {
                "description": "returns pointer to itself",
                "type": "JXG.Transform"
            },
            "chainable": 1,
            "class": "JXG.Transformation"
        },
        {
            "file": "src/base/turtle.js",
            "line": 48,
            "fileoverview": "The JSXGraph object Turtle is defined. It acts like\n\"turtle graphics\".",
            "author": "A.W.",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 169,
            "description": "Initialize a new turtle or reinitialize a turtle after {@link JXG.Turtle#clearScreen}.",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x",
                    "description": "initial x coordinate in user view",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "initial y coordinate in user view",
                    "type": "Number"
                },
                {
                    "name": "dir",
                    "description": "initial direction in degrees",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 193,
            "description": "Turtle direction",
            "itemtype": "property",
            "name": "dir",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 202,
            "description": "Turtle stack",
            "itemtype": "property",
            "name": "stack",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 211,
            "description": "Array containing all JSXgraph elements belonging to the turtle",
            "itemtype": "property",
            "name": "objects",
            "type": "{Array}",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 219,
            "description": "The actual turtle curve object",
            "itemtype": "property",
            "name": "curve",
            "type": "{JXG.Curve}",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 228,
            "description": "Invisible point at the top of the turtle",
            "itemtype": "property",
            "name": "turtle",
            "type": "{JXG.Point}",
            "access": "private",
            "tagname": "",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 238,
            "description": "Invisible point at the top of the arrow",
            "itemtype": "property",
            "name": "turtle2",
            "type": "{JXG.Point}",
            "access": "private",
            "tagname": "",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 252,
            "description": "Arrow as subsitute for a turtle image",
            "itemtype": "property",
            "name": "arrow",
            "type": "{JXG.Line}",
            "access": "private",
            "tagname": "",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 268,
            "description": "Move the turtle forward.",
            "itemtype": "method",
            "name": "forward",
            "params": [
                {
                    "name": "length",
                    "description": "of forward move in user coordinates",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 312,
            "description": "Move the turtle backwards.",
            "itemtype": "method",
            "name": "back",
            "params": [
                {
                    "name": "len",
                    "description": "of backwards move in user coordinates",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 324,
            "description": "Rotate the turtle direction to the right",
            "itemtype": "method",
            "name": "right",
            "params": [
                {
                    "name": "angle",
                    "description": "of the rotation in degrees",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 345,
            "description": "Rotate the turtle direction to the right.",
            "itemtype": "method",
            "name": "left",
            "params": [
                {
                    "name": "angle",
                    "description": "of the rotation in degrees",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 357,
            "description": "Pen up, stops visible drawing",
            "itemtype": "method",
            "name": "penup",
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 369,
            "description": "Pen down, continues visible drawing",
            "itemtype": "method",
            "name": "penDown",
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 384,
            "description": "Removes the turtle curve from the board. The turtle stays in its position.",
            "itemtype": "method",
            "name": "clean",
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 409,
            "description": "Removes the turtle completely and resets it to its initial position and direction.",
            "itemtype": "method",
            "name": "clearScreen",
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 429,
            "description": "Moves the turtle without drawing to a new position",
            "itemtype": "method",
            "name": "setPos",
            "params": [
                {
                    "name": "x",
                    "description": "new x- coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "new y- coordinate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 461,
            "description": "Sets the pen size. Equivalent to setAttribute({strokeWidth:size})\n but affects only the future turtle.",
            "itemtype": "method",
            "name": "setPenSize",
            "params": [
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 477,
            "description": "Sets the pen color. Equivalent to setAttribute({strokeColor:color})\n but affects only the future turtle.",
            "itemtype": "method",
            "name": "setPenColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 493,
            "description": "Sets the highlight pen color. Equivalent to setAttribute({highlightStrokeColor:color})\n but affects only the future turtle.",
            "itemtype": "method",
            "name": "setHighlightPenColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 509,
            "description": "Sets properties of the turtle, see also {@link JXG.GeometryElement#setAttribute}.\nSets the property for all curves of the turtle in the past and in the future.",
            "itemtype": "method",
            "name": "setAttribute",
            "params": [
                {
                    "name": "attributes",
                    "description": "key:value pairs",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 539,
            "description": "Set a future attribute of the turtle.",
            "itemtype": "method",
            "name": "copyAttr",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "pointer to the attributes object",
                "type": "Object"
            },
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 553,
            "description": "Sets the visibility of the turtle head to true.",
            "itemtype": "method",
            "name": "showTurtle",
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 570,
            "description": "Sets the visibility of the turtle head to false",
            "itemtype": "method",
            "name": "hideTurtle",
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 586,
            "description": "Moves the turtle to position [0,0].",
            "itemtype": "method",
            "name": "home",
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 600,
            "description": "Pushes the position of the turtle on the stack.",
            "itemtype": "method",
            "name": "pushTurtle",
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 613,
            "description": "Gets the last position of the turtle on the stack, sets the turtle to this position and removes this\n position from the stack.",
            "itemtype": "method",
            "name": "popTurtle",
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 631,
            "description": "Rotates the turtle into a new direction.\nThere are two possibilities:",
            "itemtype": "method",
            "name": "lookTo",
            "params": [
                {
                    "name": "target",
                    "description": "If a number is given, it is interpreted as the new direction to look to; If an array\nconsisting of two Numbers is given targeted is used as a pair coordinates.",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 659,
            "description": "Moves the turtle to a given coordinate pair.\nThe direction is not changed.",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "target",
                    "description": "Coordinates of the point where the turtle looks to.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "pointer to the turtle object",
                "type": "JXG.Turtle"
            },
            "chainable": 1,
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 702,
            "description": "Alias for {@link #forward}",
            "itemtype": "method",
            "name": "fd",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 709,
            "description": "Alias for {@link #back}",
            "itemtype": "method",
            "name": "bk",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 716,
            "description": "Alias for {@link #left}",
            "itemtype": "method",
            "name": "lt",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 723,
            "description": "Alias for {@link #right}",
            "itemtype": "method",
            "name": "rt",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 730,
            "description": "Alias for {@link #penUp}",
            "itemtype": "method",
            "name": "pu",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 737,
            "description": "Alias for {@link #penDown}",
            "itemtype": "method",
            "name": "pd",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 744,
            "description": "Alias for {@link #hideTurtle}",
            "itemtype": "method",
            "name": "ht",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 751,
            "description": "Alias for {@link #showTurtle}",
            "itemtype": "method",
            "name": "st",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 759,
            "description": "Alias for {@link #clearScreen}",
            "itemtype": "method",
            "name": "cs",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 766,
            "description": "Alias for {@link #pushTurtle}",
            "itemtype": "method",
            "name": "push",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 773,
            "description": "Alias for {@link #popTurtle}",
            "itemtype": "method",
            "name": "pop",
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 780,
            "description": "The `co`-coordinate of the turtle curve at position t is returned.",
            "itemtype": "method",
            "name": "evalAt",
            "params": [
                {
                    "name": "t",
                    "description": "parameter",
                    "type": "Number"
                },
                {
                    "name": "co.",
                    "description": "Either 'X' or 'Y'.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "x/y-coordinate of turtle at position t or x/y-coordinate of the turtle position if t > position.",
                "type": "Number"
            },
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 807,
            "description": "If t is not supplied the x-coordinate of the turtle is returned. Otherwise\nthe x-coordinate of the turtle curve at position t is returned.",
            "itemtype": "method",
            "name": "X",
            "params": [
                {
                    "name": "t",
                    "description": "parameter",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "x-coordinate of the turtle position or x-coordinate of turtle at position t",
                "type": "Number"
            },
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 823,
            "description": "If t is not supplied the y-coordinate of the turtle is returned. Otherwise\nthe y-coordinate of the turtle curve at position t is returned.",
            "itemtype": "method",
            "name": "Y",
            "params": [
                {
                    "name": "t",
                    "description": "parameter",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "y-coordinate of the turtle position or y-coordinate of turtle at position t",
                "type": "Number"
            },
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 838,
            "itemtype": "method",
            "name": "Z",
            "return": {
                "description": "z-coordinate of the turtle position",
                "type": "Number"
            },
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 846,
            "description": "Gives the lower bound of the parameter if the the turtle is treated as parametric curve.",
            "itemtype": "method",
            "name": "minX",
            "return": {
                "description": "0",
                "type": "Number"
            },
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 856,
            "description": "Gives the upper bound of the parameter if the the turtle is treated as parametric curve.\nMay be overwritten in @see generateTerm.",
            "itemtype": "method",
            "name": "maxX",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.Turtle"
        },
        {
            "file": "src/base/turtle.js",
            "line": 877,
            "description": "Checks whether (x,y) is near the curve.",
            "itemtype": "method",
            "name": "hasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y direction, screen coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if (x,y) is near the curve, False otherwise.",
                "type": "Boolean"
            },
            "class": "JXG.Turtle"
        },
        {
            "file": "src/element/arc.js",
            "line": 50,
            "fileoverview": "In this file the geometry object Arc is defined. Arc stores all\nstyle and functional properties that are required to draw an arc on a board.",
            "class": "Arc"
        },
        {
            "file": "src/element/arc.js",
            "line": 111,
            "description": "documented in JXG.GeometryElement",
            "ignore": "",
            "class": "Arc"
        },
        {
            "file": "src/element/arc.js",
            "line": 117,
            "description": "Center of the arc.",
            "itemtype": "property",
            "name": "center",
            "type": "JXG.Point",
            "class": "Arc"
        },
        {
            "file": "src/element/arc.js",
            "line": 125,
            "description": "Point defining the arc's radius.",
            "itemtype": "property",
            "name": "radiuspoint",
            "type": "JXG.Point",
            "class": "Arc"
        },
        {
            "file": "src/element/arc.js",
            "line": 133,
            "description": "The point defining the arc's angle.",
            "itemtype": "property",
            "name": "anglepoint",
            "type": "JXG.Point",
            "class": "Arc"
        },
        {
            "file": "src/element/arc.js",
            "line": 196,
            "description": "Determines the arc's current radius. I.e. the distance between {@link Arc#center} and {@link Arc#radiuspoint}.",
            "itemtype": "method",
            "name": "Radius",
            "return": {
                "description": "The arc's radius",
                "type": "Number"
            },
            "class": "Arc"
        },
        {
            "file": "src/element/arc.js",
            "line": 206,
            "description": "Use {@link Arc#Radius}",
            "deprecated": true,
            "itemtype": "method",
            "name": "getRadius",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Arc"
        },
        {
            "file": "src/element/arc.js",
            "line": 218,
            "description": "Returns the length of the arc.",
            "itemtype": "method",
            "name": "Value",
            "return": {
                "description": "The arc length",
                "type": "Number"
            },
            "class": "Arc"
        },
        {
            "file": "src/element/arc.js",
            "line": 250,
            "description": "At that point we know that the user has touched the circle line.",
            "class": "Arc"
        },
        {
            "file": "src/element/arc.js",
            "line": 271,
            "description": "Checks whether (x,y) is within the sector defined by the arc.",
            "itemtype": "method",
            "name": "hasPointSector",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y direction, screen coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if (x,y) is within the sector defined by the arc, False otherwise.",
                "type": "Boolean"
            },
            "class": "Arc"
        },
        {
            "file": "src/element/arc.js",
            "line": 416,
            "description": "The midpoint of the two defining points.",
            "itemtype": "property",
            "name": "midpoint",
            "type": "JXG.Point",
            "class": "Semicircle"
        },
        {
            "file": "src/element/arc.js",
            "line": 483,
            "description": "The midpoint of the circumcircle of the three points defining the circumcircle arc.",
            "itemtype": "property",
            "name": "center",
            "type": "JXG.Point",
            "class": "CircumcircleArc"
        },
        {
            "file": "src/element/button.js",
            "line": 42,
            "fileoverview": "In this file the Text element is defined.",
            "class": "Button"
        },
        {
            "file": "src/element/button.js",
            "line": 122,
            "description": "Pointer to the DOM node `<button>`",
            "itemtype": "property",
            "name": "rendNodeButton",
            "type": "{DOM object}",
            "access": "private",
            "tagname": "",
            "class": "Button"
        },
        {
            "file": "src/element/checkbox.js",
            "line": 42,
            "fileoverview": "In this file the Text element is defined.",
            "class": "Checkbox"
        },
        {
            "file": "src/element/checkbox.js",
            "line": 149,
            "description": "Pointer to the DOM node `<form>`",
            "itemtype": "property",
            "name": "rendNodeForm",
            "type": "{DOM object}",
            "access": "private",
            "tagname": "",
            "class": "Checkbox"
        },
        {
            "file": "src/element/checkbox.js",
            "line": 158,
            "description": "Pointer to the DOM node `<input type=\"checkbox\">`",
            "itemtype": "property",
            "name": "rendNodeCheckbox",
            "type": "{DOM object}",
            "access": "private",
            "tagname": "",
            "class": "Checkbox"
        },
        {
            "file": "src/element/checkbox.js",
            "line": 170,
            "description": "Pointer to the label of the checkbox",
            "itemtype": "property",
            "name": "rendNodeLabel",
            "type": "{DOM object}",
            "access": "private",
            "tagname": "",
            "class": "Checkbox"
        },
        {
            "file": "src/element/composition.js",
            "line": 57,
            "fileoverview": "This file contains our composition elements, i.e. these elements are mostly put together\nfrom one or more {@link JXG.GeometryElement} but with a special meaning. E.g. the midpoint element is contained here\nand this is just a {@link JXG.Point} with coordinates dependent from two other points. Currently in this file the\nfollowing compositions can be found: <ul>\n  <li>{@link Arrowparallel} (currently private)</li>\n  <li>{@link Bisector}</li>\n  <li>{@link Circumcircle}</li>\n  <li>{@link Circumcirclemidpoint}</li>\n  <li>{@link Integral}</li>\n  <li>{@link Midpoint}</li>\n  <li>{@link Mirrorpoint}</li>\n  <li>{@link Normal}</li>\n  <li>{@link Orthogonalprojection}</li>\n  <li>{@link Parallel}</li>\n  <li>{@link Perpendicular}</li>\n  <li>{@link Perpendicularpoint}</li>\n  <li>{@link Perpendicularsegment}</li>\n  <li>{@link Reflection}</li></ul>",
            "class": "Orthogonalprojection"
        },
        {
            "file": "src/element/composition.js",
            "line": 471,
            "description": "Helper point",
            "itemtype": "property",
            "name": "point",
            "memberof": "PerpendicularSegment.prototype",
            "type": "PerpendicularPoint",
            "class": "PerpendicularSegment"
        },
        {
            "file": "src/element/composition.js",
            "line": 794,
            "class": "Parallel"
        },
        {
            "file": "src/element/composition.js",
            "line": 801,
            "class": "Parallel"
        },
        {
            "file": "src/element/composition.js",
            "line": 808,
            "class": "Parallel"
        },
        {
            "file": "src/element/composition.js",
            "line": 836,
            "description": "Helper point used to create the parallel line. This point lies on the line at infinity, hence it's not visible,\nnot even with visible set to <tt>true</tt>. Creating another line through this point would make that other line\nparallel to the create parallel.",
            "memberof": "Parallel.prototype",
            "itemtype": "property",
            "name": "point",
            "type": "JXG.Point",
            "class": "Parallel"
        },
        {
            "file": "src/element/composition.js",
            "line": 975,
            "description": "A helper point used to create a normal to a {@link JXG.Line} object. For normals to circles or curves this\nelement is <tt>undefined</tt>.",
            "type": "JXG.Point",
            "itemtype": "property",
            "name": "point",
            "memberof": "Normal.prototype",
            "class": "Normal"
        },
        {
            "file": "src/element/composition.js",
            "line": 1198,
            "description": "Helper point",
            "memberof": "Bisector.prototype",
            "type": "JXG.Point",
            "itemtype": "property",
            "name": "point",
            "class": "Bisector"
        },
        {
            "file": "src/element/composition.js",
            "line": 1320,
            "description": "First line.",
            "memberof": "Bisectorlines.prototype",
            "itemtype": "property",
            "name": "line1",
            "type": "JXG.Line",
            "class": "Bisectorlines"
        },
        {
            "file": "src/element/composition.js",
            "line": 1327,
            "description": "Second line.",
            "memberof": "Bisectorlines.prototype",
            "itemtype": "property",
            "name": "line2",
            "type": "JXG.Line",
            "class": "Bisectorlines"
        },
        {
            "file": "src/element/composition.js",
            "line": 1622,
            "description": "The center of the incircle",
            "memberof": "Incircle.prototype",
            "type": "Incenter",
            "itemtype": "property",
            "name": "center",
            "class": "Incircle"
        },
        {
            "file": "src/element/composition.js",
            "line": 1979,
            "class": "Integral"
        },
        {
            "file": "src/element/composition.js",
            "line": 1984,
            "description": "documented in JXG.Curve",
            "ignore": "",
            "class": "Integral"
        },
        {
            "file": "src/element/composition.js",
            "line": 2066,
            "description": "The point on the axis initially corresponding to the lower value of the interval.",
            "memberof": "Integral.prototype",
            "itemtype": "property",
            "name": "baseLeft",
            "type": "JXG.Point",
            "class": "Integral"
        },
        {
            "file": "src/element/composition.js",
            "line": 2074,
            "description": "The point on the axis initially corresponding to the higher value of the interval.",
            "memberof": "Integral.prototype",
            "itemtype": "property",
            "name": "baseRight",
            "type": "JXG.Point",
            "class": "Integral"
        },
        {
            "file": "src/element/composition.js",
            "line": 2082,
            "description": "The glider on the curve corresponding to the lower value of the interval.",
            "memberof": "Integral.prototype",
            "itemtype": "property",
            "name": "curveLeft",
            "type": "Glider",
            "class": "Integral"
        },
        {
            "file": "src/element/composition.js",
            "line": 2090,
            "description": "The glider on the axis corresponding to the higher value of the interval.",
            "memberof": "Integral.prototype",
            "itemtype": "property",
            "name": "curveRight",
            "type": "Glider",
            "class": "Integral"
        },
        {
            "file": "src/element/composition.js",
            "line": 2106,
            "description": "documented in GeometryElement",
            "ignore": "",
            "class": "Integral"
        },
        {
            "file": "src/element/conic.js",
            "line": 48,
            "fileoverview": "In this file the conic sections defined.",
            "class": "Ellipse"
        },
        {
            "file": "src/element/conic.js",
            "line": 141,
            "class": "Ellipse"
        },
        {
            "file": "src/element/conic.js",
            "line": 176,
            "description": "Length of major axis of the ellipse",
            "itemtype": "method",
            "name": "majorAxis",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Ellipse"
        },
        {
            "file": "src/element/conic.js",
            "line": 187,
            "class": "Ellipse"
        },
        {
            "file": "src/element/conic.js",
            "line": 210,
            "class": "Ellipse"
        },
        {
            "file": "src/element/conic.js",
            "line": 224,
            "class": "Ellipse"
        },
        {
            "file": "src/element/conic.js",
            "line": 237,
            "description": "Checks whether (x,y) is near the ellipse line or inside of the ellipse\n(in case JXG.Options.conic#hasInnerPoints is true).",
            "itemtype": "method",
            "name": "hasPoint",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y direction, screen coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if (x,y) is near the ellipse, False otherwise.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Ellipse"
        },
        {
            "file": "src/element/conic.js",
            "line": 359,
            "class": "Hyperbola"
        },
        {
            "file": "src/element/conic.js",
            "line": 392,
            "description": "Length of major axis of the ellipse",
            "itemtype": "method",
            "name": "majorAxis",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Hyperbola"
        },
        {
            "file": "src/element/conic.js",
            "line": 401,
            "class": "Hyperbola"
        },
        {
            "file": "src/element/conic.js",
            "line": 424,
            "class": "Hyperbola"
        },
        {
            "file": "src/element/conic.js",
            "line": 438,
            "class": "Hyperbola"
        },
        {
            "file": "src/element/conic.js",
            "line": 543,
            "class": "Parabola"
        },
        {
            "file": "src/element/conic.js",
            "line": 552,
            "class": "Parabola"
        },
        {
            "file": "src/element/conic.js",
            "line": 572,
            "class": "Parabola"
        },
        {
            "file": "src/element/conic.js",
            "line": 597,
            "class": "Parabola"
        },
        {
            "file": "src/element/conic.js",
            "line": 801,
            "class": "Conic"
        },
        {
            "file": "src/element/conic.js",
            "line": 879,
            "class": "Conic"
        },
        {
            "file": "src/element/conic.js",
            "line": 884,
            "class": "Conic"
        },
        {
            "file": "src/element/conic.js",
            "line": 889,
            "description": "Center coordinates see http://en.wikipedia.org/wiki/Matrix_representation_of_conic_sections",
            "itemtype": "property",
            "name": "midpoint",
            "type": "JXG.Point",
            "class": "Conic"
        },
        {
            "file": "src/element/input.js",
            "line": 42,
            "fileoverview": "In this file the Text element is defined.",
            "class": "Input"
        },
        {
            "file": "src/element/input.js",
            "line": 144,
            "description": "Pointer to the DOM node `<form>`",
            "itemtype": "property",
            "name": "rendNodeForm",
            "type": "{DOM object}",
            "access": "private",
            "tagname": "",
            "class": "Input"
        },
        {
            "file": "src/element/input.js",
            "line": 153,
            "description": "Pointer to the label of the checkbox",
            "itemtype": "property",
            "name": "rendNodeLabel",
            "type": "{DOM object}",
            "access": "private",
            "tagname": "",
            "class": "Input"
        },
        {
            "file": "src/element/input.js",
            "line": 163,
            "description": "Pointer to the DOM node `<input type=\"text\">`",
            "itemtype": "property",
            "name": "rendNodeInput",
            "type": "{DOM object}",
            "access": "private",
            "tagname": "",
            "class": "Input"
        },
        {
            "file": "src/element/locus.js",
            "line": 116,
            "description": "should be documented in JXG.Curve",
            "ignore": "",
            "class": "Locus"
        },
        {
            "file": "src/element/locus.js",
            "line": 138,
            "description": "The implicit definition of the locus.",
            "memberof": "Locus.prototype",
            "itemtype": "property",
            "name": "eq",
            "type": "String",
            "class": "Locus"
        },
        {
            "file": "src/element/locus.js",
            "line": 146,
            "description": "The time it took to calculate the locus",
            "memberof": "Locus.prototype",
            "itemtype": "property",
            "name": "ctime",
            "type": "Number",
            "class": "Locus"
        },
        {
            "file": "src/element/measure.js",
            "line": 46,
            "fileoverview": "Geometry objects for measurements are defined in this file. This file stores all\nstyle and functional properties that are required to use a tape measure on\na board.",
            "class": "Tapemeasure"
        },
        {
            "file": "src/element/measure.js",
            "line": 135,
            "class": "Tapemeasure"
        },
        {
            "file": "src/element/measure.js",
            "line": 147,
            "description": "Length of the tape measure",
            "itemtype": "method",
            "name": "Value",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Tapemeasure"
        },
        {
            "file": "src/element/sector.js",
            "line": 265,
            "description": "Midpoint of the sector.",
            "memberof": "Sector.prototype",
            "itemtype": "property",
            "name": "point1",
            "type": "JXG.Point",
            "class": "Sector"
        },
        {
            "file": "src/element/sector.js",
            "line": 273,
            "description": "This point together with {@link Sector#point1} defines the radius..",
            "memberof": "Sector.prototype",
            "itemtype": "property",
            "name": "point2",
            "type": "JXG.Point",
            "class": "Sector"
        },
        {
            "file": "src/element/sector.js",
            "line": 281,
            "description": "Defines the sector's angle.",
            "memberof": "Sector.prototype",
            "itemtype": "property",
            "name": "point3",
            "type": "JXG.Point",
            "class": "Sector"
        },
        {
            "file": "src/element/sector.js",
            "line": 298,
            "description": "Defines the sectors orientation in case of circumCircleSectors.",
            "memberof": "Sector.prototype",
            "itemtype": "property",
            "name": "point4",
            "type": "JXG.Point",
            "class": "Sector"
        },
        {
            "file": "src/element/sector.js",
            "line": 319,
            "description": "documented in JXG.Curve",
            "ignore": "",
            "class": "Sector"
        },
        {
            "file": "src/element/sector.js",
            "line": 367,
            "description": "Returns the radius of the sector.",
            "memberof": "Sector.prototype",
            "itemtype": "method",
            "name": "",
            "return": {
                "description": "The distance between {@link Sector#point1} and {@link Sector#point2}.",
                "type": "Number"
            },
            "class": "Sector"
        },
        {
            "file": "src/element/sector.js",
            "line": 411,
            "description": "Checks whether (x,y) is within the area defined by the sector.",
            "memberof": "Sector.prototype",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "x",
                    "description": "Coordinate in x direction, screen coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Coordinate in y direction, screen coordinates.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "True if (x,y) is within the sector defined by the arc, False otherwise.",
                "type": "Boolean"
            },
            "class": "Sector"
        },
        {
            "file": "src/element/sector.js",
            "line": 499,
            "description": "Overwrite the Radius method of the sector.\nUsed in {@link GeometryElement#setAttribute}.",
            "params": [
                {
                    "name": "value",
                    "description": "New radius.",
                    "type": "Number, Function"
                }
            ],
            "class": "Sector"
        },
        {
            "file": "src/element/sector.js",
            "line": 510,
            "deprecated": true,
            "ignore": "",
            "class": "Sector"
        },
        {
            "file": "src/element/sector.js",
            "line": 519,
            "description": "Moves the sector by the difference of two coordinates.",
            "params": [
                {
                    "name": "method",
                    "description": "The type of coordinates used here. Possible values are {@link JXG.COORDS_BY_USER} and {@link JXG.COORDS_BY_SCREEN}.",
                    "type": "Number"
                },
                {
                    "name": "coords",
                    "description": "coordinates in screen/user units",
                    "type": "Array"
                },
                {
                    "name": "oldcoords",
                    "description": "previous coordinates in screen/user units",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "this element",
                "type": "JXG.Curve"
            },
            "class": "Sector"
        },
        {
            "file": "src/element/sector.js",
            "line": 600,
            "description": "Center of the circumcirclesector",
            "memberof": "CircumcircleSector.prototype",
            "itemtype": "property",
            "name": "center",
            "type": "Circumcenter",
            "class": "CircumcircleSector"
        },
        {
            "file": "src/element/sector.js",
            "line": 654,
            "description": "A major sector is a sector of a circle having measure greater than or equal to\n180 degrees (&pi; radians). It is defined by a center, one point that\ndefines the radius, and a third point that defines the angle of the sector.",
            "pseudo": true,
            "itemtype": "property",
            "name": "MajorSector",
            "extends": "Curve",
            "is_constructor": 1,
            "type": "JXG.Curve",
            "throws": {
                "description": "If the element cannot be constructed with the given parent objects an exception is thrown.",
                "type": "Error"
            },
            "example": [
                "\n     // Create an arc out of three free points\n     var p1 = board.create('point', [2.0, 2.0]);\n     var p2 = board.create('point', [1.0, 0.5]);\n     var p3 = board.create('point', [3.5, 1.0]);\n\n     var a = board.create('majorsector', [p1, p2, p3]);\n<div id=\"83c6561f-7561-4047-b98d-036248a00932\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('83c6561f-7561-4047-b98d-036248a00932', {boundingbox: [-1, 7, 7, -1], axis: true, showcopyright: false, shownavigation: false}),\n p1 = board.create('point', [2.0, 2.0]),\n p2 = board.create('point', [1.0, 0.5]),\n p3 = board.create('point', [3.5, 1.0]),\n a = board.create('majorsector', [p1, p2, p3]);\n})();\n</script>"
            ],
            "class": "MinorSector",
            "subprops": [
                {
                    "name": "p1,p2,p3",
                    "description": ". Major sector is a sector of a circle around p1 having measure greater than or equal to\n180 degrees (&pi; radians) and starts at p2. The radius is determined by p2, the angle by p3.",
                    "type": "JXG.Point_JXG.Point_JXG.Point"
                }
            ]
        },
        {
            "file": "src/element/sector.js",
            "line": 811,
            "description": "The point defining the radius of the angle element. Alias for {@link Angle.prototype#radiuspoint}.",
            "type": "JXG.Point",
            "itemtype": "property",
            "name": "point",
            "memberof": "Angle.prototype",
            "class": "Angle"
        },
        {
            "file": "src/element/sector.js",
            "line": 819,
            "description": "Helper point for angles of type 'square'.",
            "type": "JXG.Point",
            "itemtype": "property",
            "name": "pointsquare",
            "memberof": "Angle.prototype",
            "class": "Angle"
        },
        {
            "file": "src/element/sector.js",
            "line": 861,
            "description": "Set an angle to a prescribed value given in radians. This is only possible if the third point of the angle, i.e.\nthe anglepoint is a free point.",
            "itemtype": "method",
            "name": "",
            "params": [
                {
                    "name": "val",
                    "description": "Number or Function which returns the size of the angle in Radians",
                    "type": "Number|Function"
                }
            ],
            "return": {
                "description": "Pointer to the angle element..",
                "type": "Object"
            },
            "memberof": "Angle.prototype",
            "class": "Angle"
        },
        {
            "file": "src/element/sector.js",
            "line": 884,
            "description": "Frees an angle from a prescribed value. This is only relevant if the angle size has been set by\nsetAngle() previously. The anglepoint is set to a free point.",
            "itemtype": "method",
            "name": "",
            "return": {
                "description": "Pointer to the angle element..",
                "type": "Object"
            },
            "memberof": "Angle.prototype",
            "class": "Angle"
        },
        {
            "file": "src/element/sector.js",
            "line": 994,
            "description": "Indicates a right angle. Invisible by default, use <tt>dot.visible: true</tt> to show.\nThough this dot indicates a right angle, it can be visible even if the angle is not a right\none.",
            "type": "JXG.Point",
            "itemtype": "property",
            "name": "dot",
            "memberof": "Angle.prototype",
            "class": "Angle"
        },
        {
            "file": "src/element/sector.js",
            "line": 1097,
            "description": "Returns the value of the angle in Radians.",
            "memberof": "Angle.prototype",
            "itemtype": "method",
            "name": "",
            "return": {
                "description": "The angle value in Radians",
                "type": "Number"
            },
            "class": "Angle"
        },
        {
            "file": "src/element/slider.js",
            "line": 51,
            "fileoverview": "The geometry object slider is defined in this file. Slider stores all\nstyle and functional properties that are required to draw and use a slider on\na board.",
            "class": "Slider"
        },
        {
            "file": "src/element/slider.js",
            "line": 170,
            "description": "Returns the current slider value.",
            "itemtype": "property",
            "name": "Value",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Slider"
        },
        {
            "file": "src/element/slider.js",
            "line": 189,
            "description": "End value of the slider range.",
            "itemtype": "property",
            "name": "_smax",
            "type": "Number",
            "class": "Slider"
        },
        {
            "file": "src/element/slider.js",
            "line": 197,
            "description": "Start value of the slider range.",
            "itemtype": "property",
            "name": "_smin",
            "type": "Number",
            "class": "Slider"
        },
        {
            "file": "src/element/slider.js",
            "line": 205,
            "description": "Sets the maximum value of the slider.",
            "itemtype": "method",
            "name": "setMax",
            "params": [
                {
                    "name": "val",
                    "description": "New maximum value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this object",
                "type": "Object"
            },
            "chainable": 1,
            "class": "Slider"
        },
        {
            "file": "src/element/slider.js",
            "line": 218,
            "description": "Sets the value of the slider. This call must be followed\nby a board update call.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "val",
                    "description": "New value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this object",
                "type": "Object"
            },
            "chainable": 1,
            "class": "Slider"
        },
        {
            "file": "src/element/slider.js",
            "line": 237,
            "description": "Sets the minimum value of the slider.",
            "itemtype": "method",
            "name": "setMin",
            "params": [
                {
                    "name": "val",
                    "description": "New minimum value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "this object",
                "type": "Object"
            },
            "chainable": 1,
            "class": "Slider"
        },
        {
            "file": "src/element/slider.js",
            "line": 272,
            "description": "The text element to the right of the slider, indicating its current value.",
            "itemtype": "property",
            "name": "label",
            "type": "JXG.Text",
            "class": "Slider"
        },
        {
            "file": "src/element/slider.js",
            "line": 285,
            "description": "Start point of the base line.",
            "itemtype": "property",
            "name": "point1",
            "type": "JXG.Point",
            "class": "Slider"
        },
        {
            "file": "src/element/slider.js",
            "line": 292,
            "description": "End point of the base line.",
            "itemtype": "property",
            "name": "point2",
            "type": "JXG.Point",
            "class": "Slider"
        },
        {
            "file": "src/element/slider.js",
            "line": 300,
            "description": "The baseline the glider is bound to.",
            "itemtype": "property",
            "name": "baseline",
            "type": "JXG.Line",
            "class": "Slider"
        },
        {
            "file": "src/element/slider.js",
            "line": 308,
            "description": "A line on top of the baseline, indicating the slider's progress.",
            "itemtype": "property",
            "name": "highline",
            "type": "JXG.Line",
            "class": "Slider"
        },
        {
            "file": "src/element/slider.js",
            "line": 317,
            "description": "Ticks give a rough indication about the slider's current value.",
            "itemtype": "property",
            "name": "ticks",
            "type": "JXG.Ticks",
            "class": "Slider"
        },
        {
            "file": "src/element/slopetriangle.js",
            "line": 40,
            "fileoverview": "Example file for a triangle implemented as a extension to JSXGraph.",
            "class": "Slopetriangle"
        },
        {
            "file": "src/element/slopetriangle.js",
            "line": 171,
            "description": "The glider the slope triangle is bound to.",
            "itemtype": "property",
            "name": "glider",
            "type": "JXG.Point",
            "access": "private",
            "tagname": "",
            "class": "Slopetriangle"
        },
        {
            "file": "src/element/slopetriangle.js",
            "line": 180,
            "description": "The base point defining - together with the glider - the horizontal side of the slope triangle",
            "itemtype": "property",
            "name": "basepoint",
            "type": "JXG.Point",
            "access": "private",
            "tagname": "",
            "class": "Slopetriangle"
        },
        {
            "file": "src/element/slopetriangle.js",
            "line": 189,
            "description": "The baseline the glider is bound to.",
            "itemtype": "property",
            "name": "baseline",
            "type": "JXG.Line",
            "access": "private",
            "tagname": "",
            "class": "Slopetriangle"
        },
        {
            "file": "src/element/slopetriangle.js",
            "line": 198,
            "description": "Third point of the triangle, lying on the tangent",
            "itemtype": "property",
            "name": "toppoint",
            "type": "JXG.Point",
            "access": "private",
            "tagname": "",
            "class": "Slopetriangle"
        },
        {
            "file": "src/element/slopetriangle.js",
            "line": 207,
            "description": "Slope triangle label",
            "itemtype": "property",
            "name": "label",
            "type": "JXG.Text",
            "access": "private",
            "tagname": "",
            "class": "Slopetriangle"
        },
        {
            "file": "src/math/bst.js",
            "line": 45,
            "description": "Balanced binary search tree",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/bst.js",
            "line": 54,
            "description": "public",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/bst.js",
            "line": 223,
            "description": "private",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/bst.js",
            "line": 401,
            "description": "Randomized Balnaced Binary Trees",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/bst.js",
            "line": 452,
            "description": "Test output",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/bst.js",
            "line": 478,
            "description": "Heap",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/bst.js",
            "line": 486,
            "description": "public",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/bst.js",
            "line": 508,
            "description": "private",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/complex.js",
            "line": 57,
            "description": "This property is only to signalize that this object is of type JXG.Complex. Only\nused internally to distinguish between normal JavaScript numbers and JXG.Complex numbers.",
            "itemtype": "property",
            "name": "isComplex",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/complex.js",
            "line": 75,
            "description": "Real part of the complex number.",
            "itemtype": "property",
            "name": "real",
            "type": "Number",
            "default": "0",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/complex.js",
            "line": 84,
            "description": "Imaginary part of the complex number.",
            "itemtype": "property",
            "name": "imaginary",
            "type": "Number",
            "default": "0",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/complex.js",
            "line": 93,
            "description": "Absolute value in the polar form of the complex number. Currently unused.",
            "itemtype": "property",
            "name": "absval",
            "type": "Number",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/complex.js",
            "line": 101,
            "description": "Angle value in the polar form of the complex number. Currently unused.",
            "itemtype": "property",
            "name": "angle",
            "type": "Number",
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/complex.js",
            "line": 111,
            "description": "Converts a complex number into a string.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "Formatted string containing the complex number in human readable form (algebraic form).",
                "type": "String"
            },
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/complex.js",
            "line": 121,
            "description": "Add another complex number to this complex number.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "c",
                    "description": "A JavaScript number or a JXG.Complex object to be added to the current object.",
                    "type": "JXG.Complex|Number"
                }
            ],
            "return": {
                "description": "Reference to this complex number",
                "type": "JXG.Complex"
            },
            "chainable": 1,
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/complex.js",
            "line": 140,
            "description": "Subtract another complex number from this complex number.",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "c",
                    "description": "A JavaScript number or a JXG.Complex object to subtract from the current object.",
                    "type": "JXG.Complex|Number"
                }
            ],
            "return": {
                "description": "Reference to this complex number",
                "type": "JXG.Complex"
            },
            "chainable": 1,
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/complex.js",
            "line": 159,
            "description": "Multiply another complex number to this complex number.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "c",
                    "description": "A JavaScript number or a JXG.Complex object to\nmultiply with the current object.",
                    "type": "JXG.Complex|Number"
                }
            ],
            "return": {
                "description": "Reference to this complex number",
                "type": "JXG.Complex"
            },
            "chainable": 1,
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/complex.js",
            "line": 186,
            "description": "Divide this complex number by the given complex number.",
            "itemtype": "method",
            "name": "div",
            "params": [
                {
                    "name": "c",
                    "description": "A JavaScript number or a JXG.Complex object to\ndivide the current object by.",
                    "type": "JXG.Complex|Number"
                }
            ],
            "return": {
                "description": "Reference to this complex number",
                "type": "JXG.Complex"
            },
            "chainable": 1,
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/complex.js",
            "line": 228,
            "description": "Conjugate a complex number in place.",
            "itemtype": "method",
            "name": "conj",
            "return": {
                "description": "Reference to this complex number",
                "type": "JXG.Complex"
            },
            "chainable": 1,
            "class": "JXG.Complex"
        },
        {
            "file": "src/math/complex.js",
            "line": 265,
            "description": "Add two (complex) numbers z1 and z2 and return the result as a (complex) number.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "z1",
                    "description": "Summand",
                    "type": "JXG.Complex|Number"
                },
                {
                    "name": "z2",
                    "description": "Summand",
                    "type": "JXG.Complex|Number"
                }
            ],
            "return": {
                "description": "A complex number equal to the sum of the given parameters.",
                "type": "JXG.Complex"
            },
            "class": "JXG.C"
        },
        {
            "file": "src/math/complex.js",
            "line": 279,
            "description": "Subtract two (complex) numbers z1 and z2 and return the result as a (complex) number.",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "z1",
                    "description": "Minuend",
                    "type": "JXG.Complex|Number"
                },
                {
                    "name": "z2",
                    "description": "Subtrahend",
                    "type": "JXG.Complex|Number"
                }
            ],
            "return": {
                "description": "A complex number equal to the difference of the given parameters.",
                "type": "JXG.Complex"
            },
            "class": "JXG.C"
        },
        {
            "file": "src/math/complex.js",
            "line": 293,
            "description": "Multiply two (complex) numbers z1 and z2 and return the result as a (complex) number.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "z1",
                    "description": "Factor",
                    "type": "JXG.Complex|Number"
                },
                {
                    "name": "z2",
                    "description": "Factor",
                    "type": "JXG.Complex|Number"
                }
            ],
            "return": {
                "description": "A complex number equal to the product of the given parameters.",
                "type": "JXG.Complex"
            },
            "class": "JXG.C"
        },
        {
            "file": "src/math/complex.js",
            "line": 307,
            "description": "Divide two (complex) numbers z1 and z2 and return the result as a (complex) number.",
            "itemtype": "method",
            "name": "div",
            "params": [
                {
                    "name": "z1",
                    "description": "Dividend",
                    "type": "JXG.Complex|Number"
                },
                {
                    "name": "z2",
                    "description": "Divisor",
                    "type": "JXG.Complex|Number"
                }
            ],
            "return": {
                "description": "A complex number equal to the quotient of the given parameters.",
                "type": "JXG.Complex"
            },
            "class": "JXG.C"
        },
        {
            "file": "src/math/complex.js",
            "line": 321,
            "description": "Conjugate a complex number and return the result.",
            "itemtype": "method",
            "name": "conj",
            "params": [
                {
                    "name": "z1",
                    "description": "Complex number",
                    "type": "JXG.Complex|Number"
                }
            ],
            "return": {
                "description": "A complex number equal to the conjugate of the given parameter.",
                "type": "JXG.Complex"
            },
            "class": "JXG.C"
        },
        {
            "file": "src/math/complex.js",
            "line": 334,
            "description": "Absolute value of a complex number.",
            "itemtype": "method",
            "name": "abs",
            "params": [
                {
                    "name": "z1",
                    "description": "Complex number",
                    "type": "JXG.Complex|Number"
                }
            ],
            "return": {
                "description": "real number equal to the absolute value of the given parameter.",
                "type": "Number"
            },
            "class": "JXG.C"
        },
        {
            "file": "src/math/geometry.js",
            "line": 45,
            "fileoverview": "This file contains the Math.Geometry namespace for calculating algebraic/geometric\nstuff like intersection points, angles, midpoint, and so on.",
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 71,
            "description": "Calculates the angle (in radians) defined by the points A, B, C.",
            "itemtype": "method",
            "name": "angle",
            "params": [
                {
                    "name": "A",
                    "description": "A point  or [x,y] array.",
                    "type": "JXG.Point,Array"
                },
                {
                    "name": "B",
                    "description": "Another point or [x,y] array.",
                    "type": "JXG.Point,Array"
                },
                {
                    "name": "C",
                    "description": "A circle - no, of course the third point or [x,y] array.",
                    "type": "JXG.Point,Array"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use {@link JXG.Math.Geometry#rad} instead.",
            "references": [
                "#rad",
                "#trueAngle"
            ],
            "return": {
                "description": "The angle in radian measure.",
                "type": "Number"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 122,
            "description": "Calculates the angle (in degrees) defined by the three points A, B, C if you're going from A to C around B counterclockwise.",
            "itemtype": "method",
            "name": "trueAngle",
            "params": [
                {
                    "name": "A",
                    "description": "Point or [x,y] array",
                    "type": "JXG.Point,Array"
                },
                {
                    "name": "B",
                    "description": "Point or [x,y] array",
                    "type": "JXG.Point,Array"
                },
                {
                    "name": "C",
                    "description": "Point or [x,y] array",
                    "type": "JXG.Point,Array"
                }
            ],
            "references": [
                "#rad"
            ],
            "return": {
                "description": "The angle in degrees.",
                "type": "Number"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 136,
            "description": "Calculates the internal angle defined by the three points A, B, C if you're going from A to C around B counterclockwise.",
            "itemtype": "method",
            "name": "rad",
            "params": [
                {
                    "name": "A",
                    "description": "Point or [x,y] array",
                    "type": "JXG.Point,Array"
                },
                {
                    "name": "B",
                    "description": "Point or [x,y] array",
                    "type": "JXG.Point,Array"
                },
                {
                    "name": "C",
                    "description": "Point or [x,y] array",
                    "type": "JXG.Point,Array"
                }
            ],
            "references": [
                "#trueAngle"
            ],
            "return": {
                "description": "Angle in radians.",
                "type": "Number"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 182,
            "description": "Calculates a point on the bisection line between the three points A, B, C.\nAs a result, the bisection line is defined by two points:\nParameter B and the point with the coordinates calculated in this function.\nDoes not work for ideal points.",
            "itemtype": "method",
            "name": "angleBisector",
            "params": [
                {
                    "name": "A",
                    "description": "Point",
                    "type": "JXG.Point"
                },
                {
                    "name": "B",
                    "description": "Point",
                    "type": "JXG.Point"
                },
                {
                    "name": "C",
                    "description": "Point",
                    "type": "JXG.Point"
                },
                {
                    "name": "board",
                    "description": "Reference to the board",
                    "optional": true,
                    "optdefault": "A.board"
                }
            ],
            "return": {
                "description": "Coordinates of the second point defining the bisection.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 233,
            "description": "Reflects the point along the line.",
            "itemtype": "method",
            "name": "reflection",
            "params": [
                {
                    "name": "line",
                    "description": "Axis of reflection.",
                    "type": "JXG.Line"
                },
                {
                    "name": "point",
                    "description": "Point to reflect.",
                    "type": "JXG.Point"
                },
                {
                    "name": "board",
                    "description": "Reference to the board",
                    "optional": true,
                    "optdefault": "point.board"
                }
            ],
            "return": {
                "description": "Coordinates of the reflected point.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 268,
            "description": "Computes the new position of a point which is rotated\naround a second point (called rotpoint) by the angle phi.",
            "itemtype": "method",
            "name": "rotation",
            "params": [
                {
                    "name": "rotpoint",
                    "description": "Center of the rotation",
                    "type": "JXG.Point"
                },
                {
                    "name": "point",
                    "description": "point to be rotated",
                    "type": "JXG.Point"
                },
                {
                    "name": "phi",
                    "description": "rotation angle in arc length",
                    "type": "Number"
                },
                {
                    "name": "board",
                    "description": "Reference to the board",
                    "type": "JXG.Board",
                    "optional": true,
                    "optdefault": "point.board"
                }
            ],
            "return": {
                "description": "Coordinates of the new position.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 300,
            "description": "Calculates the coordinates of a point on the perpendicular to the given line through\nthe given point.",
            "itemtype": "method",
            "name": "perpendicular",
            "params": [
                {
                    "name": "line",
                    "description": "A line.",
                    "type": "JXG.Line"
                },
                {
                    "name": "point",
                    "description": "Point which is projected to the line.",
                    "type": "JXG.Point"
                },
                {
                    "name": "board",
                    "description": "Reference to the board",
                    "type": "JXG.Board",
                    "optional": true,
                    "optdefault": "point.board"
                }
            ],
            "return": {
                "description": "Array of length two containing coordinates of a point on the perpendicular to the given line\n                 through the given point and boolean flag \"change\".",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 379,
            "description": "Please use {@link JXG.Math.Geometry#circumcenter} instead.",
            "itemtype": "method",
            "name": "circumcenterMidpoint",
            "deprecated": true,
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 391,
            "description": "Calculates the center of the circumcircle of the three given points.",
            "itemtype": "method",
            "name": "circumcenter",
            "params": [
                {
                    "name": "point1",
                    "description": "Point",
                    "type": "JXG.Point"
                },
                {
                    "name": "point2",
                    "description": "Point",
                    "type": "JXG.Point"
                },
                {
                    "name": "point3",
                    "description": "Point",
                    "type": "JXG.Point"
                },
                {
                    "name": "board",
                    "description": "Reference to the board",
                    "type": "JXG.Board",
                    "optional": true,
                    "optdefault": "point1.board"
                }
            ],
            "return": {
                "description": "Coordinates of the center of the circumcircle of the given points.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 422,
            "description": "Calculates the euclidean norm for two given arrays of the same length.",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "array1",
                    "description": "Array of Number",
                    "type": "Array"
                },
                {
                    "name": "array2",
                    "description": "Array of Number",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "Length of the arrays. Default is the minimum length of the given arrays.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Euclidean distance of the given vectors.",
                "type": "Number"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 446,
            "description": "Calculates euclidean distance for two given arrays of the same length.\nIf one of the arrays contains a zero in the first coordinate, and the euclidean distance\nis different from zero it is a point at infinity and we return Infinity.",
            "itemtype": "method",
            "name": "affineDistance",
            "params": [
                {
                    "name": "array1",
                    "description": "Array containing elements of type number.",
                    "type": "Array"
                },
                {
                    "name": "array2",
                    "description": "Array containing elements of type number.",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "Length of the arrays. Default is the minimum length of the given arrays.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Euclidean (affine) distance of the given vectors.",
                "type": "Number"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 469,
            "description": "Sort list of points counter clockwise starting with the point with the lowest y coordinate.",
            "itemtype": "method",
            "name": "sortVertices",
            "params": [
                {
                    "name": "p",
                    "description": "An array containing {@link JXG.Point}, {@link JXG.Coords}, and/or arrays.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 511,
            "description": "Signed triangle area of the three points given.",
            "itemtype": "method",
            "name": "signedTriangle",
            "params": [
                {
                    "name": "p1",
                    "description": "",
                    "type": "JXG.Point|JXG.Coords|Array"
                },
                {
                    "name": "p2",
                    "description": "",
                    "type": "JXG.Point|JXG.Coords|Array"
                },
                {
                    "name": "p3",
                    "description": "",
                    "type": "JXG.Point|JXG.Coords|Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 529,
            "description": "Determine the signed area of a non-intersecting polygon.\nSurveyor's Formula",
            "itemtype": "method",
            "name": "signedPolygon",
            "params": [
                {
                    "name": "p",
                    "description": "An array containing {@link JXG.Point}, {@link JXG.Coords}, and/or arrays.",
                    "type": "Array"
                },
                {
                    "name": "sort",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 565,
            "description": "Calculate the complex hull of a point cloud.",
            "itemtype": "method",
            "name": "GrahamScan",
            "params": [
                {
                    "name": "points",
                    "description": "An array containing {@link JXG.Point}, {@link JXG.Coords}, and/or arrays.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 600,
            "description": "A line can be a segment, a straight, or a ray. so it is not always delimited by point1 and point2\ncalcStraight determines the visual start point and end point of the line. A segment is only drawn\nfrom start to end point, a straight line is drawn until it meets the boards boundaries.",
            "itemtype": "method",
            "name": "calcStraight",
            "params": [
                {
                    "name": "el",
                    "description": "Reference to a line object, that needs calculation of start and end point.",
                    "type": "JXG.Line"
                },
                {
                    "name": "point1",
                    "description": "Coordinates of the point where line drawing begins. This value is calculated and\nset by this method.",
                    "type": "JXG.Coords"
                },
                {
                    "name": "point2",
                    "description": "Coordinates of the point where line drawing ends. This value is calculated and set\nby this method.",
                    "type": "JXG.Coords"
                },
                {
                    "name": "margin",
                    "description": "Optional margin, to avoid the display of the small sides of lines.",
                    "type": "Number"
                }
            ],
            "references": [
                "Line",
                "JXG.Line"
            ],
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 675,
            "description": "At this point we have four points:\npoint1 and point2 are the first and the second defining point on the line,\nintersect1, intersect2 are the intersections of the line with border around the board.",
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 744,
            "description": "A line can be a segment, a straight, or a ray. so it is not always delimited by point1 and point2.\n\nThis method adjusts the line's delimiting points taking into account its nature, the viewport defined\nby the board.\n\nA segment is delimited by start and end point, a straight line or ray is delimited until it meets the\nboards boundaries. However, if the line has infinite ticks, it will be delimited by the projection of\nthe boards vertices onto itself.",
            "itemtype": "method",
            "name": "calcLineDelimitingPoints",
            "params": [
                {
                    "name": "el",
                    "description": "Reference to a line object, that needs calculation of start and end point.",
                    "type": "JXG.Line"
                },
                {
                    "name": "point1",
                    "description": "Coordinates of the point where line drawing begins. This value is calculated and\nset by this method.",
                    "type": "JXG.Coords"
                },
                {
                    "name": "point2",
                    "description": "Coordinates of the point where line drawing ends. This value is calculated and set\nby this method.",
                    "type": "JXG.Coords"
                }
            ],
            "references": [
                "Line",
                "JXG.Line"
            ],
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 813,
            "description": "we have four points:\npoint1 and point2 are the first and the second defining point on the line,\nintersect1, intersect2 are the intersections of the line with border around the board.",
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 897,
            "description": "The vectors <tt>p2-p1</tt> and <tt>i2-i1</tt> are supposed to be collinear. If their cosine is positive\nthey point into the same direction otherwise they point in opposite direction.",
            "itemtype": "method",
            "name": "isSameDir",
            "params": [
                {
                    "name": "p1",
                    "description": "",
                    "type": "JXG.Coords"
                },
                {
                    "name": "p2",
                    "description": "",
                    "type": "JXG.Coords"
                },
                {
                    "name": "i1",
                    "description": "",
                    "type": "JXG.Coords"
                },
                {
                    "name": "i2",
                    "description": "",
                    "type": "JXG.Coords"
                }
            ],
            "return": {
                "description": "True, if <tt>p2-p1</tt> and <tt>i2-i1</tt> point into the same direction",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 928,
            "description": "If you're looking from point \"start\" towards point \"s\" and can see the point \"p\", true is returned. Otherwise false.",
            "itemtype": "method",
            "name": "isSameDirection",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "start",
                    "description": "The point you're standing on.",
                    "type": "JXG.Coords"
                },
                {
                    "name": "p",
                    "description": "The point in which direction you're looking.",
                    "type": "JXG.Coords"
                },
                {
                    "name": "s",
                    "description": "The point that should be visible.",
                    "type": "JXG.Coords"
                }
            ],
            "return": {
                "description": "True, if from start the point p is in the same direction as s is, that means s-start = k*(p-start) with k>=0.",
                "type": "Boolean"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 976,
            "description": "Generate the function which computes the coordinates of the intersection point.\nPrimarily used in {@link JXG.Point#createIntersectionPoint}.",
            "itemtype": "method",
            "name": "intersectionFunction",
            "params": [
                {
                    "name": "board",
                    "description": "object",
                    "type": "JXG.Board"
                },
                {
                    "name": "el1,el2,i",
                    "description": "The result will be a intersection point on el1 and el2.\ni determines the intersection point if two points are available: <ul>\n  <li>i==0: use the positive square root,</li>\n  <li>i==1: use the negative square root.</li></ul>\nSee further {@see JXG.Point#createIntersectionPoint}.",
                    "type": "JXG.Line,JXG.Circle_JXG.Line,JXG.Circle_Number"
                },
                {
                    "name": "alwaysintersect.",
                    "description": "Flag that determines if segements and arc can have an outer intersection point\non their defining line or circle.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Function returning a {@see JXG.Coords} object that determines the intersection point.",
                "type": "Function"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 997,
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1006,
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1014,
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1021,
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1029,
            "description": "If one of the lines is a segment or ray and\nthe the intersection point shpould disappear if outside\nof the segment or ray we call\nmeetSegmentSegment",
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1059,
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1068,
            "description": "Computes the intersection of a pair of lines, circles or both.\nIt uses the internal data array stdform of these elements.",
            "itemtype": "method",
            "name": "meet",
            "params": [
                {
                    "name": "el1",
                    "description": "stdform of the first element (line or circle)",
                    "type": "Array"
                },
                {
                    "name": "el2",
                    "description": "stdform of the second element (line or circle)",
                    "type": "Array"
                },
                {
                    "name": "i",
                    "description": "Index of the intersection point that should be returned.",
                    "type": "Number"
                },
                {
                    "name": "board",
                    "description": "Reference to the board."
                }
            ],
            "return": {
                "description": "Coordinates of one of the possible two or more intersection points.\nWhich point will be returned is determined by i.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1101,
            "description": "Intersection of the line with the board",
            "itemtype": "method",
            "name": "meetLineBoard",
            "params": [
                {
                    "name": "line",
                    "description": "stdform of the line",
                    "type": "Array"
                },
                {
                    "name": "board",
                    "description": "reference to a board.",
                    "type": "JXG.Board"
                },
                {
                    "name": "margin",
                    "description": "optional margin, to avoid the display of the small sides of lines.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "[intersection coords 1, intersection coords 2]",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1184,
            "description": "Intersection of two lines.",
            "itemtype": "method",
            "name": "meetLineLine",
            "params": [
                {
                    "name": "l1",
                    "description": "stdform of the first line",
                    "type": "Array"
                },
                {
                    "name": "l2",
                    "description": "stdform of the second line",
                    "type": "Array"
                },
                {
                    "name": "i",
                    "description": "unused",
                    "type": "Number"
                },
                {
                    "name": "board",
                    "description": "Reference to the board.",
                    "type": "JXG.Board"
                }
            ],
            "return": {
                "description": "Coordinates of the intersection point.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1208,
            "description": "Intersection of line and circle.",
            "itemtype": "method",
            "name": "meetLineCircle",
            "params": [
                {
                    "name": "lin",
                    "description": "stdform of the line",
                    "type": "Array"
                },
                {
                    "name": "circ",
                    "description": "stdform of the circle",
                    "type": "Array"
                },
                {
                    "name": "i",
                    "description": "number of the returned intersection point.\n  i==0: use the positive square root,\n  i==1: use the negative square root.",
                    "type": "Number"
                },
                {
                    "name": "board",
                    "description": "Reference to a board.",
                    "type": "JXG.Board"
                }
            ],
            "return": {
                "description": "Coordinates of the intersection point",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1264,
            "description": "Intersection of two circles.",
            "itemtype": "method",
            "name": "meetCircleCircle",
            "params": [
                {
                    "name": "circ1",
                    "description": "stdform of the first circle",
                    "type": "Array"
                },
                {
                    "name": "circ2",
                    "description": "stdform of the second circle",
                    "type": "Array"
                },
                {
                    "name": "i",
                    "description": "number of the returned intersection point.\n  i==0: use the positive square root,\n  i==1: use the negative square root.",
                    "type": "Number"
                },
                {
                    "name": "board",
                    "description": "Reference to the board.",
                    "type": "JXG.Board"
                }
            ],
            "return": {
                "description": "Coordinates of the intersection point",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1306,
            "description": "Compute an intersection of the curves c1 and c2.\nWe want to find values t1, t2 such that\nc1(t1) = c2(t2), i.e. (c1_x(t1)-c2_x(t2),c1_y(t1)-c2_y(t2)) = (0,0).\n\nMethods: segment-wise intersections (default) or generalized Newton method.",
            "itemtype": "method",
            "name": "meetCurveCurve",
            "params": [
                {
                    "name": "c1",
                    "description": "Curve, Line or Circle",
                    "type": "JXG.Curve"
                },
                {
                    "name": "c2",
                    "description": "Curve, Line or Circle",
                    "type": "JXG.Curve"
                },
                {
                    "name": "nr",
                    "description": "the nr-th intersection point will be returned.",
                    "type": "Number"
                },
                {
                    "name": "t2ini",
                    "description": "not longer used.",
                    "type": "Number"
                },
                {
                    "name": "board",
                    "description": "Reference to a board object.",
                    "type": "JXG.Board",
                    "optional": true,
                    "optdefault": "c1.board"
                },
                {
                    "name": "method",
                    "description": "Intersection method, possible values are 'newton' and 'segment'.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'segment'"
                }
            ],
            "return": {
                "description": "intersection point",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1338,
            "description": "Intersection of curve with line,\nOrder of input does not matter for el1 and el2.",
            "itemtype": "method",
            "name": "meetCurveLine",
            "params": [
                {
                    "name": "el1",
                    "description": "Curve or Line",
                    "type": "JXG.Curve,JXG.Line"
                },
                {
                    "name": "el2",
                    "description": "Curve or Line",
                    "type": "JXG.Curve,JXG.Line"
                },
                {
                    "name": "nr",
                    "description": "the nr-th intersection point will be returned.",
                    "type": "Number"
                },
                {
                    "name": "board",
                    "description": "Reference to a board object.",
                    "type": "JXG.Board",
                    "optional": true,
                    "optdefault": "el1.board"
                },
                {
                    "name": "alwaysIntersect",
                    "description": "If false just the segment between the two defining points are tested for intersection",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Intersection point. In case no intersection point is detected,\nthe ideal point [0,1,0] is returned.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1375,
            "description": "Intersection of line and curve, continuous case.\nFinds the nr-the intersection point\nUses {@link JXG.Math.Geometry#meetCurveLineDiscrete} as a first approximation.\nA more exact solution is then found with {@link JXG.Math.Numerics#meetCurveLineDiscrete}.",
            "itemtype": "method",
            "name": "meetCurveLineContinuous",
            "params": [
                {
                    "name": "cu",
                    "description": "Curve",
                    "type": "JXG.Curve"
                },
                {
                    "name": "li",
                    "description": "Line",
                    "type": "JXG.Line"
                },
                {
                    "name": "nr",
                    "description": "Will return the nr-th intersection point.",
                    "type": "Number"
                },
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                }
            ],
            "return": {
                "description": "Intersection point",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1424,
            "description": "Intersection of line and curve, continuous case.\nSegments are treated as lines. Finding the nr-the intersection point\nworks for nr=0,1 only.\n\nBUG: does not respect cu.minX() and cu.maxX()",
            "itemtype": "method",
            "name": "meetCurveLineContinuousOld",
            "access": "private",
            "tagname": "",
            "deprecated": true,
            "params": [
                {
                    "name": "cu",
                    "description": "Curve",
                    "type": "JXG.Curve"
                },
                {
                    "name": "li",
                    "description": "Line",
                    "type": "JXG.Line"
                },
                {
                    "name": "nr",
                    "description": "Will return the nr-th intersection point.",
                    "type": "Number"
                },
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                }
            ],
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1503,
            "description": "Intersection of line and curve, discrete case.\nSegments are treated as lines.\nFinding the nr-th intersection point should work for all nr.",
            "itemtype": "method",
            "name": "meetCurveLineDiscrete",
            "params": [
                {
                    "name": "cu",
                    "description": "",
                    "type": "JXG.Curve"
                },
                {
                    "name": "li",
                    "description": "",
                    "type": "JXG.Line"
                },
                {
                    "name": "nr",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                },
                {
                    "name": "testSegment",
                    "description": "Test if intersection has to be inside of the segment or somewhere on the\nline defined by the segment",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Intersection point. In case no intersection point is detected,\nthe ideal point [0,1,0] is returned.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1565,
            "description": "If the intersection point is not part of the segment,\nthis intersection point is set to non-existent.\nThis prevents jumping of the intersection points.\nBut it may be discussed if it is the desired behavior.",
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1588,
            "description": "Find the n-th intersection point of two curves named red (first parameter) and blue (second parameter).\nWe go through each segment of the red curve and search if there is an intersection with a segemnt of the blue curve.\nThis double loop, i.e. the outer loop runs along the red curve and the inner loop runs along the blue curve, defines\nthe n-th intersection point. The segments are either line segments or Bezier curves of degree 3. This depends on\nthe property bezierDegree of the curves.",
            "itemtype": "method",
            "name": "meetCurveRedBlueSegments",
            "params": [
                {
                    "name": "red",
                    "description": "",
                    "type": "JXG.Curve"
                },
                {
                    "name": "blue",
                    "description": "",
                    "type": "JXG.Curve"
                },
                {
                    "name": "nr",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1644,
            "description": "Intersection of two segments.",
            "itemtype": "method",
            "name": "meetSegmentSegment",
            "params": [
                {
                    "name": "p1",
                    "description": "First point of segment 1 using homogeneous coordinates [z,x,y]",
                    "type": "Array"
                },
                {
                    "name": "p2",
                    "description": "Second point of segment 1 using homogeneous coordinates [z,x,y]",
                    "type": "Array"
                },
                {
                    "name": "q1",
                    "description": "First point of segment 2 using homogeneous coordinates [z,x,y]",
                    "type": "Array"
                },
                {
                    "name": "q2",
                    "description": "Second point of segment 2 using homogeneous coordinates [z,x,y]",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "[Intersection point, t, u] The first entry contains the homogeneous coordinates\nof the intersection point. The second and third entry gives the position of the intersection between the\ntwo defining points. For example, the second entry t is defined by: intersection point = t*p1 + (1-t)*p2.",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1680,
            "description": "Splits a Bezier curve segment defined by four points into\ntwo Bezier curve segments. Dissection point is t=1/2.",
            "itemtype": "method",
            "name": "_bezierSplit",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "curve",
                    "description": "Array of four coordinate arrays of length 2 defining a\nBezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array consisting of two coordinate arrays for Bezier curves.",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1705,
            "description": "Computes the bounding box [minX, maxY, maxX, minY] of a Bezier curve segment\nfrom its control points.",
            "itemtype": "method",
            "name": "_bezierBbox",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "curve",
                    "description": "Array of four coordinate arrays of length 2 defining a\nBezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Bounding box [minX, maxY, maxX, minY]",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1733,
            "description": "Decide if two Bezier curve segments overlap by comparing their bounding boxes.",
            "itemtype": "method",
            "name": "_bezierOverlap",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "bb1",
                    "description": "Bounding box of the first Bezier curve segment",
                    "type": "Array"
                },
                {
                    "name": "bb2",
                    "description": "Bounding box of the second Bezier curve segment",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "true if the bounding boxes overlap, false otherwise.",
                "type": "Boolean"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1746,
            "description": "Append list of intersection points to a list.",
            "itemtype": "method",
            "name": "_bezierListConcat",
            "access": "private",
            "tagname": "",
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1778,
            "description": "Find intersections of two Bezier curve segments by recursive subdivision.\nBelow maxlevel determine intersections by intersection line segments.",
            "itemtype": "method",
            "name": "_bezierMeetSubdivision",
            "params": [
                {
                    "name": "red",
                    "description": "Array of four coordinate arrays of length 2 defining the first\nBezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].",
                    "type": "Array"
                },
                {
                    "name": "blue",
                    "description": "Array of four coordinate arrays of length 2 defining the second\nBezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].",
                    "type": "Array"
                },
                {
                    "name": "level",
                    "description": "Recursion level",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "List of intersection points (up to nine). Each intersction point is an\narray of length three (homogeneous coordinates) plus preimages.",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1837,
            "description": "Find intersections of Bezier curve segments with a line by recursive subdivision.\nBelow maxlevel determine intersections by intersection line segments.",
            "itemtype": "method",
            "name": "_bezierLineMeetSubdivision",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "red",
                    "description": "Array of four coordinate arrays of length 2 defining the first\nBezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].",
                    "type": "Array"
                },
                {
                    "name": "blue",
                    "description": "Array of four coordinate arrays of length 2 defining the second\nBezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].",
                    "type": "Array"
                },
                {
                    "name": "level",
                    "description": "Recursion level",
                    "type": "Number"
                },
                {
                    "name": "testSegment",
                    "description": "Test if intersection has to be inside of the segment or somewhere on the line defined by the segment",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1893,
            "description": "Find the nr-th intersection point of two Bezier curve segments.",
            "itemtype": "method",
            "name": "meetBeziersegmentBeziersegment",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "red",
                    "description": "Array of four coordinate arrays of length 2 defining the first\nBezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].",
                    "type": "Array"
                },
                {
                    "name": "blue",
                    "description": "Array of four coordinate arrays of length 2 defining the second\nBezier curve segment, i.e. [[x0,y0], [x1,y1], [x2,y2], [x3,y3]].",
                    "type": "Array"
                },
                {
                    "name": "testSegment",
                    "description": "Test if intersection has to be inside of the segment or somewhere on the line defined by the segment",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Array containing the list of all intersection points as homogeneous coordinate arrays plus\npreimages [x,y], t_1, t_2] of the two Bezier curve segments.",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1930,
            "description": "Find the nr-th intersection point of two Bezier curves, i.e. curves with bezierDegree == 3.",
            "itemtype": "method",
            "name": "meetBezierCurveRedBlueSegments",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "red",
                    "description": "Curve with bezierDegree == 3",
                    "type": "JXG.Curve"
                },
                {
                    "name": "blue",
                    "description": "Curve with bezierDegree == 3",
                    "type": "JXG.Curve"
                },
                {
                    "name": "nr",
                    "description": "The number of the intersection point which should be returned.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The homogeneous coordinates of the nr-th intersection point.",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 1988,
            "description": "Eval Bezier curve segment at value t.",
            "itemtype": "method",
            "name": "bezierSegmentEval",
            "params": [
                {
                    "name": "t",
                    "description": "value at which the curve is evaluated",
                    "type": "Number"
                },
                {
                    "name": "curve",
                    "description": "THe Bezier curve given by four coordinate pairs",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Value of the Bezier curve at t given as Euclidean coordinates\nin the form [1, x, y].",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2023,
            "description": "Generate the defining points of a 3rd degree bezier curve that approximates\na circle sector defined by three arrays A, B,C, each of length three.\nThe coordinate arrays are given in homogeneous coordinates.",
            "itemtype": "method",
            "name": "bezierArc",
            "params": [
                {
                    "name": "A",
                    "description": "First point",
                    "type": "Array"
                },
                {
                    "name": "B",
                    "description": "Second point (intersection point)",
                    "type": "Array"
                },
                {
                    "name": "C",
                    "description": "Third point",
                    "type": "Array"
                },
                {
                    "name": "withLegs",
                    "description": "Flag. If true the legs to the intersection point are part of the curve.",
                    "type": "Boolean"
                },
                {
                    "name": "sgn",
                    "description": "Wither 1 or -1. Needed for minor and major arcs. In case of doubt, use 1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Array consosting of one array of x-coordinates and one array of y-coordinates,\nSuitable for `updataDataArray`.",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2126,
            "description": "Calculates the coordinates of the projection of a given point on a given circle. I.o.w. the\nnearest one of the two intersection points of the line through the given point and the circles\ncenter.",
            "itemtype": "method",
            "name": "projectPointToCircle",
            "params": [
                {
                    "name": "point",
                    "description": "Point to project or coords object to project.",
                    "type": "JXG.Point,JXG.Coords"
                },
                {
                    "name": "circle",
                    "description": "Circle on that the point is projected.",
                    "type": "JXG.Circle"
                },
                {
                    "name": "board",
                    "description": "Reference to the board",
                    "type": "JXG.Board",
                    "optional": true,
                    "optdefault": "point.board"
                }
            ],
            "return": {
                "description": "The coordinates of the projection of the given point on the given circle.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2166,
            "description": "Calculates the coordinates of the orthogonal projection of a given point on a given line. I.o.w. the\nintersection point of the given line and its perpendicular through the given point.",
            "itemtype": "method",
            "name": "projectPointToLine",
            "params": [
                {
                    "name": "point",
                    "description": "Point to project.",
                    "type": "JXG.Point"
                },
                {
                    "name": "line",
                    "description": "Line on that the point is projected.",
                    "type": "JXG.Line"
                },
                {
                    "name": "board",
                    "description": "Reference to a board.",
                    "type": "JXG.Board",
                    "optional": true,
                    "optdefault": "point.board"
                }
            ],
            "return": {
                "description": "The coordinates of the projection of the given point on the given line.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2189,
            "description": "Calculates the coordinates of the orthogonal projection of a given coordinate array on a given line\nsegment defined by two coordinate arrays.",
            "itemtype": "method",
            "name": "projectCoordsToSegment",
            "params": [
                {
                    "name": "p",
                    "description": "Point to project.",
                    "type": "Array"
                },
                {
                    "name": "q1",
                    "description": "Start point of the line segment on that the point is projected.",
                    "type": "Array"
                },
                {
                    "name": "q2",
                    "description": "End point of the line segment on that the point is projected.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The coordinates of the projection of the given point on the given segment\nand the factor that determines the projected point as a convex combination of the\ntwo endpoints q1 and q2 of the segment.",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2206,
            "description": "If the segment has length 0, i.e. is a point,\nthe projection is equal to that point.",
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2221,
            "description": "Finds the coordinates of the closest point on a Bezier segment of a\n{@link JXG.Curve} to a given coordinate array.",
            "itemtype": "method",
            "name": "projectCoordsToBeziersegment",
            "params": [
                {
                    "name": "pos",
                    "description": "Point to project in homogeneous coordinates.",
                    "type": "Array"
                },
                {
                    "name": "curve",
                    "description": "Curve of type \"plot\" having Bezier degree 3.",
                    "type": "JXG.Curve"
                },
                {
                    "name": "start",
                    "description": "Number of the Bezier segment of the curve.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The coordinates of the projection of the given point\non the given Bezier segment and the preimage of the curve which\ndetermines the closest point.",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2249,
            "description": "Calculates the coordinates of the projection of a given point on a given curve.\nUses {@link #projectCoordsToCurve}.",
            "itemtype": "method",
            "name": "projectPointToCurve",
            "params": [
                {
                    "name": "point",
                    "description": "Point to project.",
                    "type": "JXG.Point"
                },
                {
                    "name": "curve",
                    "description": "Curve on that the point is projected.",
                    "type": "JXG.Curve"
                },
                {
                    "name": "board",
                    "description": "Reference to a board.",
                    "type": "JXG.Board",
                    "optional": true,
                    "optdefault": "point.board"
                }
            ],
            "references": [
                "#projectCoordsToCurve"
            ],
            "return": {
                "description": "The coordinates of the projection of the given point on the given graph.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2275,
            "description": "Calculates the coordinates of the projection of a coordinates pair on a given curve. In case of\nfunction graphs this is the\nintersection point of the curve and the parallel to y-axis through the given point.",
            "itemtype": "method",
            "name": "projectCoordsToCurve",
            "params": [
                {
                    "name": "x",
                    "description": "coordinate to project.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "coordinate to project.",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "start value for newtons method",
                    "type": "Number"
                },
                {
                    "name": "curve",
                    "description": "Curve on that the point is projected.",
                    "type": "JXG.Curve"
                },
                {
                    "name": "board",
                    "description": "Reference to a board.",
                    "type": "JXG.Board",
                    "optional": true,
                    "optdefault": "curve.board"
                }
            ],
            "references": [
                "#projectPointToCurve"
            ],
            "return": {
                "description": "Array containing the coordinates of the projection of the given point on the given graph and\nthe position on the curve.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2399,
            "description": "Calculates the coordinates of the closest orthogonal projection of a given coordinate array onto the\nborder of a polygon.",
            "itemtype": "method",
            "name": "projectCoordsToPolygon",
            "params": [
                {
                    "name": "p",
                    "description": "Point to project.",
                    "type": "Array"
                },
                {
                    "name": "pol",
                    "description": "Polygon element",
                    "type": "JXG.Polygon"
                }
            ],
            "return": {
                "description": "The coordinates of the closest projection of the given point to the border of the polygon.",
                "type": "Array"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2432,
            "description": "Calculates the coordinates of the projection of a given point on a given turtle. A turtle consists of\none or more curves of curveType 'plot'. Uses {@link #projectPointToCurve}.",
            "itemtype": "method",
            "name": "projectPointToTurtle",
            "params": [
                {
                    "name": "point",
                    "description": "Point to project.",
                    "type": "JXG.Point"
                },
                {
                    "name": "turtle",
                    "description": "on that the point is projected.",
                    "type": "JXG.Turtle"
                },
                {
                    "name": "board",
                    "description": "Reference to a board.",
                    "type": "JXG.Board",
                    "optional": true,
                    "optdefault": "point.board"
                }
            ],
            "return": {
                "description": "The coordinates of the projection of the given point on the given turtle.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2479,
            "description": "Trivial projection of a point to another point.",
            "itemtype": "method",
            "name": "projectPointToPoint",
            "params": [
                {
                    "name": "point",
                    "description": "Point to project (not used).",
                    "type": "JXG.Point"
                },
                {
                    "name": "dest",
                    "description": "Point on that the point is projected.",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "The coordinates of the projection of the given point on the given circle.",
                "type": "JXG.Coords"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2491,
            "itemtype": "method",
            "name": "projectPointToBoard",
            "params": [
                {
                    "name": "point",
                    "description": "",
                    "type": "JXG.Point|JXG.Coords"
                },
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board",
                    "optional": true
                }
            ],
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2530,
            "description": "Calculates the distance of a point to a line. The point and the line are given by homogeneous\ncoordinates. For lines this can be line.stdform.",
            "itemtype": "method",
            "name": "distPointLine",
            "params": [
                {
                    "name": "point",
                    "description": "Homogeneous coordinates of a point.",
                    "type": "Array"
                },
                {
                    "name": "line",
                    "description": "Homogeneous coordinates of a line ([C,A,B] where A*x+B*y+C*z=0).",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Distance of the point to the line.",
                "type": "Number"
            },
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/geometry.js",
            "line": 2556,
            "description": "Helper function to create curve which displays a Reuleaux polygons.",
            "params": [
                {
                    "name": "points",
                    "description": "Array of points which should be the vertices of the Reuleaux polygon. Typically,\nthese point list is the array vrtices of a regular polygon.",
                    "type": "Array"
                },
                {
                    "name": "nr",
                    "description": "Number of vertices",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "releauxPolygon",
            "return": {
                "description": "An array containing the two functions defining the Reuleaux polygon and the two values\nfor the start and the end of the paramtric curve. array may be used as parent array of a {@link JXG.Curve}.",
                "type": "Array"
            },
            "example": [
                "\n    var A = brd.create('point',[-2,-2]);\n    var B = brd.create('point',[0,1]);\n    var pol = brd.create('regularpolygon',[A,B,3], {withLines:false, fillColor:'none', highlightFillColor:'none', fillOpacity:0.0});\n    var reuleauxTriangle = brd.create('curve', JXG.Math.Geometry.reuleauxPolygon(pol.vertices, 3),\n                         {strokeWidth:6, strokeColor:'#d66d55', fillColor:'#ad5544', highlightFillColor:'#ad5544'});\n\n<div id=\"2543a843-46a9-4372-abc1-94d9ad2db7ac\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function(){\nvar brd = JXG.JSXGraph.initBoard('2543a843-46a9-4372-abc1-94d9ad2db7ac', {boundingbox: [-5, 5, 5, -5], axis: true, showcopyright:false, shownavigation: false});\nvar A = brd.create('point',[-2,-2]);\nvar B = brd.create('point',[0,1]);\nvar pol = brd.create('regularpolygon',[A,B,3], {withLines:false, fillColor:'none', highlightFillColor:'none', fillOpacity:0.0});\nvar reuleauxTriangle = brd.create('curve', JXG.Math.Geometry.reuleauxPolygon(pol.vertices, 3),\n {strokeWidth:6, strokeColor:'#d66d55', fillColor:'#ad5544', highlightFillColor:'#ad5544'});\n})();\n</script>"
            ],
            "class": "JXG.Math.Geometry"
        },
        {
            "file": "src/math/math.js",
            "line": 40,
            "fileoverview": "",
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 92,
            "description": "eps defines the closeness to zero. If the absolute value of a given number is smaller\nthan eps, it is considered to be equal to zero.",
            "itemtype": "property",
            "name": "eps",
            "type": "number",
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 101,
            "description": "The JavaScript implementation of the % operator returns the symmetric modulo.\nThey are both identical if a >= 0 and m >= 0 but the results differ if a or m < 0.",
            "itemtype": "method",
            "name": "mod",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "m",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Mathematical modulo <tt>a mod m</tt>",
                "type": "Number"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 114,
            "description": "Initializes a vector as an array with the coefficients set to the given value resp. zero.",
            "itemtype": "method",
            "name": "vector",
            "params": [
                {
                    "name": "n",
                    "description": "Length of the vector",
                    "type": "Number"
                },
                {
                    "name": "init",
                    "description": "Initial value for each coefficient",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "A vector of length n represented by a\none-dimensional array.",
                "type": "Array"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 136,
            "description": "Initializes a matrix as an array of rows with the given value.",
            "itemtype": "method",
            "name": "matrix",
            "params": [
                {
                    "name": "n",
                    "description": "Number of rows",
                    "type": "Number"
                },
                {
                    "name": "m",
                    "description": "Number of columns",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "n"
                },
                {
                    "name": "init",
                    "description": "Initial value for each coefficient",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "An <tt>n</tt> times <tt>m</tt>-matrix represented by a\ntwo-dimensional array. The inner arrays hold the columns, the outer array holds the rows.",
                "type": "Array"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 164,
            "description": "Generates an identity matrix. If n is a number and m is undefined or not a number, a square matrix is generated,\nif n and m are both numbers, an nxm matrix is generated.",
            "itemtype": "method",
            "name": "identity",
            "params": [
                {
                    "name": "n",
                    "description": "Number of rows",
                    "type": "Number"
                },
                {
                    "name": "m",
                    "description": "Number of columns",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "n"
                }
            ],
            "return": {
                "description": "A square matrix of length <tt>n</tt> with all coefficients equal to 0 except a_(i,i), i out of (1, ..., n), if <tt>m</tt> is undefined or not a number\nor a <tt>n</tt> times <tt>m</tt>-matrix with a_(i,j) = 0 and a_(i,i) = 1 if m is a number.",
                "type": "Array"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 190,
            "description": "Generates a 4x4 matrix for 3D to 2D projections.",
            "itemtype": "method",
            "name": "frustum",
            "params": [
                {
                    "name": "l",
                    "description": "Left",
                    "type": "Number"
                },
                {
                    "name": "r",
                    "description": "Right",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "Top",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Bottom",
                    "type": "Number"
                },
                {
                    "name": "n",
                    "description": "Near",
                    "type": "Number"
                },
                {
                    "name": "f",
                    "description": "Far",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "4x4 Matrix",
                "type": "Array"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 228,
            "description": "Generates a 4x4 matrix for 3D to 2D projections.",
            "itemtype": "method",
            "name": "projection",
            "params": [
                {
                    "name": "fov",
                    "description": "Field of view in vertical direction, given in rad.",
                    "type": "Number"
                },
                {
                    "name": "ratio",
                    "description": "Aspect ratio of the projection plane.",
                    "type": "Number"
                },
                {
                    "name": "n",
                    "description": "Near",
                    "type": "Number"
                },
                {
                    "name": "f",
                    "description": "Far",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "4x4 Projection Matrix",
                "type": "Array"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 245,
            "description": "Multiplies a vector vec to a matrix mat: mat * vec. The matrix is interpreted by this function as an array of rows. Please note: This\nfunction does not check if the dimensions match.",
            "itemtype": "method",
            "name": "matVecMult",
            "params": [
                {
                    "name": "mat",
                    "description": "Two dimensional array of numbers. The inner arrays describe the columns, the outer ones the matrix' rows.",
                    "type": "Array"
                },
                {
                    "name": "vec",
                    "description": "Array of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Array of numbers containing mat * vec",
                "type": "Array"
            },
            "example": [
                "\n    var A = [[2, 1],\n             [1, 3]],\n        b = [4, 5],\n        c;\n    c = JXG.Math.matVecMult(A, b)\n    // c === [13, 19];"
            ],
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 283,
            "description": "Computes the product of the two matrices mat1*mat2.",
            "itemtype": "method",
            "name": "matMatMult",
            "params": [
                {
                    "name": "mat1",
                    "description": "Two dimensional array of numbers",
                    "type": "Array"
                },
                {
                    "name": "mat2",
                    "description": "Two dimensional array of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Two dimensional Array of numbers containing mat1 * mat2",
                "type": "Array"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 310,
            "description": "Transposes a matrix given as a two dimensional array.",
            "itemtype": "method",
            "name": "transpose",
            "params": [
                {
                    "name": "M",
                    "description": "The matrix to be transposed",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The transpose of M",
                "type": "Array"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 336,
            "description": "Compute the inverse of an nxn matrix with Gauss elimination.",
            "itemtype": "method",
            "name": "inverse",
            "params": [
                {
                    "name": "Ain",
                    "description": "matrix",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Inverse matrix of Ain",
                "type": "Array"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 420,
            "description": "Inner product of two vectors a and b. n is the length of the vectors.",
            "itemtype": "method",
            "name": "innerProduct",
            "params": [
                {
                    "name": "a",
                    "description": "Vector",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "Vector",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "Length of the Vectors. If not given the length of the first vector is taken.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The inner product of a and b.",
                "type": "Number"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 444,
            "description": "Calculates the cross product of two vectors both of length three.\nIn case of homogeneous coordinates this is either\n\n* the intersection of two lines\n* the line through two points",
            "itemtype": "method",
            "name": "crossProduct",
            "params": [
                {
                    "name": "c1",
                    "description": "Homogeneous coordinates of line or point 1",
                    "type": "Array"
                },
                {
                    "name": "c2",
                    "description": "Homogeneous coordinates of line or point 2",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "vector of length 3: homogeneous coordinates of the resulting point / line.",
                "type": "Array"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 462,
            "description": "Compute the factorial of a positive integer. If a non-integer value\nis given, the fraction will be ignored.",
            "itemtype": "method",
            "name": "factorial",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "n! = n * (n-1) * ... * 2 * 1",
                "type": "Number"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 484,
            "description": "Computes the binomial coefficient n over k.",
            "itemtype": "method",
            "name": "binomial",
            "params": [
                {
                    "name": "n",
                    "description": "Fraction will be ignored",
                    "type": "Number"
                },
                {
                    "name": "k",
                    "description": "Fraction will be ignored",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The binomial coefficient n choose k",
                "type": "Number"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 516,
            "description": "Calculates the cosine hyperbolicus of x.",
            "itemtype": "method",
            "name": "cosh",
            "params": [
                {
                    "name": "x",
                    "description": "The number the cosine hyperbolicus will be calculated of.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Cosine hyperbolicus of the given value.",
                "type": "Number"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 527,
            "description": "Sine hyperbolicus of x.",
            "itemtype": "method",
            "name": "sinh",
            "params": [
                {
                    "name": "x",
                    "description": "The number the sine hyperbolicus will be calculated of.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Sine hyperbolicus of the given value.",
                "type": "Number"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 538,
            "description": "Compute base to the power of exponent. This method expands the JavaScript\nmethod Math.pow. It also works if the exponent is not an integer.",
            "itemtype": "method",
            "name": "pow",
            "params": [
                {
                    "name": "base",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "exponent",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "base to the power of exponent.",
                "type": "Number"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 567,
            "description": "Logarithm to base 10.",
            "itemtype": "method",
            "name": "log10",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "log10(x) Logarithm of x to base 10.",
                "type": "Number"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 578,
            "description": "Logarithm to base 2",
            "itemtype": "method",
            "name": "log2",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "log2(x) Logarithm of x to base 2.",
                "type": "Number"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 589,
            "description": "Logarithm to arbitrary base b. If b is not given, natural log is taken, i.e. b = e.",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "base",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "log(x, b) Logarithm of x to base b, that is log(x)/log(b).",
                "type": "Number"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 605,
            "description": "A square & multiply algorithm to compute base to the power of exponent.\nImplementated by Wolfgang Riedl.",
            "itemtype": "method",
            "name": "squampow",
            "params": [
                {
                    "name": "base",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "exponent",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Base to the power of exponent",
                "type": "Number"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 641,
            "description": "Normalize the standard form [c, b0, b1, a, k, r, q0, q1] of\nJXG.GeometryElement",
            "itemtype": "method",
            "name": "normalize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "stdform",
                    "description": "The standard form to be normalized.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The normalized standard form.",
                "type": "Array"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/math.js",
            "line": 685,
            "description": "Converts a two dimensional array to a one dimensional Float32Array that can be processed by WebGL.",
            "itemtype": "method",
            "name": "toGL",
            "params": [
                {
                    "name": "m",
                    "description": "A matrix in a two dimensional array.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A one dimensional array containing the matrix in column wise notation. Provides a fall\nback to the default JavaScript Array if Float32Array is not available.",
                "type": "Float32Array"
            },
            "class": "JXG.Math"
        },
        {
            "file": "src/math/numerics.js",
            "line": 40,
            "fileoverview": "",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 89,
            "description": "Solves a system of linear equations given by A and b using the Gauss-Jordan-elimination.\nThe algorithm runs in-place. I.e. the entries of A and b are changed.",
            "itemtype": "method",
            "name": "Gauss",
            "params": [
                {
                    "name": "A",
                    "description": "Square matrix represented by an array of rows, containing the coefficients of the lineare equation system.",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "A vector containing the linear equation system's right hand side.",
                    "type": "Array"
                }
            ],
            "throws": {
                "description": "If a non-square-matrix is given or if b has not the right length or A's rank is not full.",
                "type": "Error"
            },
            "return": {
                "description": "A vector that solves the linear equation system.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 157,
            "description": "Solves a system of linear equations given by the right triangular matrix R and vector b.",
            "itemtype": "method",
            "name": "backwardSolve",
            "params": [
                {
                    "name": "R",
                    "description": "Right triangular matrix represented by an array of rows. All entries a_(i,j) with i &lt; j are ignored.",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "Right hand side of the linear equation system.",
                    "type": "Array"
                },
                {
                    "name": "canModify",
                    "description": "If true, the right hand side vector is allowed to be changed by this method.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "An array representing a vector that solves the system of linear equations.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 191,
            "description": "Gauss-Bareiss algorithm to compute the\ndeterminant of matrix without fractions.\nSee Henri Cohen, \"A Course in Computational\nAlgebraic Number Theory (Graduate texts\nin mathematics; 138)\", Springer-Verlag,\nISBN 3-540-55640-0 / 0-387-55640-0\nThird, Corrected Printing 1996\n\"Algorithm 2.2.6\", pg. 52-53",
            "itemtype": "method",
            "name": "gaussBareiss",
            "params": [
                {
                    "name": "mat",
                    "description": "Matrix",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Determinant of matrix mat",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 271,
            "description": "Computes the determinant of a square nxn matrix with the\nGauss-Bareiss algorithm.",
            "itemtype": "method",
            "name": "det",
            "params": [
                {
                    "name": "mat",
                    "description": "Matrix.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The determinant pf the matrix mat.\n                  The empty matrix returns 0.",
                "type": "Number"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 291,
            "description": "Compute the Eigenvalues and Eigenvectors of a symmetric 3x3 matrix with the Jacobi method\nAdaption of a FORTRAN program by Ed Wilson, Dec. 25, 1990",
            "itemtype": "method",
            "name": "Jacobi",
            "params": [
                {
                    "name": "Ain",
                    "description": "A symmetric 3x3 matrix.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "[A,V] the matrices A and V. The diagonal of A contains the Eigenvalues, V contains the Eigenvectors.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 389,
            "description": "Calculates the integral of function f over interval using Newton-Cotes-algorithm",
            "itemtype": "method",
            "name": "NewtonCotes",
            "params": [
                {
                    "name": "interval",
                    "description": "The integration interval, e.g. [0, 3].",
                    "type": "Array"
                },
                {
                    "name": "f",
                    "description": "A function which takes one argument of type number and returns a number.",
                    "type": "Function"
                },
                {
                    "name": "config",
                    "description": "The algorithm setup. Accepted properties are number_of_nodes of type number and integration_type\nwith value being either 'trapez', 'simpson', or 'milne'.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "number_of_nodes",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "28"
                        },
                        {
                            "name": "integration_type",
                            "description": "Possible values are 'milne', 'simpson', 'trapez'",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'milne'"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Integral value of f over interval",
                "type": "Number"
            },
            "throws": {
                "description": "If config.number_of_nodes doesn't match config.integration_type an exception is thrown. If you want to use\nsimpson rule respectively milne rule config.number_of_nodes must be dividable by 2 respectively 4.",
                "type": "Error"
            },
            "example": [
                "\n    function f(x) {\n        return x*x;\n    }\n\n    // calculates integral of <tt>f</tt> from 0 to 2.\n    var area1 = JXG.Math.Numerics.NewtonCotes([0, 2], f);\n\n    // the same with an anonymous function\n    var area2 = JXG.Math.Numerics.NewtonCotes([0, 2], function (x) { return x*x; });\n\n    // use trapez rule with 16 nodes\n    var area3 = JXG.Math.Numerics.NewtonCotes([0, 2], f,\n                       {number_of_nodes: 16, integration_type: 'trapez'});"
            ],
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 494,
            "description": "Calculates the integral of function f over interval using Romberg iteration.",
            "itemtype": "method",
            "name": "Romberg",
            "params": [
                {
                    "name": "interval",
                    "description": "The integration interval, e.g. [0, 3].",
                    "type": "Array"
                },
                {
                    "name": "f",
                    "description": "A function which takes one argument of type number and returns a number.",
                    "type": "Function"
                },
                {
                    "name": "config",
                    "description": "The algorithm setup. Accepted properties are max_iterations of type number and precision eps.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "max_iterations",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "20"
                        },
                        {
                            "name": "eps",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.0000001"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Integral value of f over interval",
                "type": "Number"
            },
            "example": [
                "\n    function f(x) {\n        return x*x;\n    }\n\n    // calculates integral of <tt>f</tt> from 0 to 2.\n    var area1 = JXG.Math.Numerics.Romberg([0, 2], f);\n\n    // the same with an anonymous function\n    var area2 = JXG.Math.Numerics.Romberg([0, 2], function (x) { return x*x; });\n\n    // use trapez rule with maximum of 16 iterations or stop if the precision 0.0001 has been reached.\n    var area3 = JXG.Math.Numerics.Romberg([0, 2], f,\n                                  {max_iterations: 16, eps: 0.0001});"
            ],
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 564,
            "description": "Calculates the integral of function f over interval using Gauss-Legendre quadrature.",
            "itemtype": "method",
            "name": "GaussLegendre",
            "params": [
                {
                    "name": "interval",
                    "description": "The integration interval, e.g. [0, 3].",
                    "type": "Array"
                },
                {
                    "name": "f",
                    "description": "A function which takes one argument of type number and returns a number.",
                    "type": "Function"
                },
                {
                    "name": "config",
                    "description": "The algorithm setup. Accepted property is the order n of type number. n is allowed to take\nvalues between 2 and 18, default value is 12.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "n",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "16"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Integral value of f over interval",
                "type": "Number"
            },
            "example": [
                "\n    function f(x) {\n        return x*x;\n    }\n\n    // calculates integral of <tt>f</tt> from 0 to 2.\n    var area1 = JXG.Math.Numerics.GaussLegendre([0, 2], f);\n\n    // the same with an anonymous function\n    var area2 = JXG.Math.Numerics.GaussLegendre([0, 2], function (x) { return x*x; });\n\n    // use 16 point Gauss-Legendre rule.\n    var area3 = JXG.Math.Numerics.GaussLegendre([0, 2], f,\n                                  {n: 16});"
            ],
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 699,
            "description": "Scale error in Gauss Kronrod quadrature.\nInternal method used in {@link #_gaussKronrod}.",
            "access": "private",
            "tagname": "",
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 731,
            "description": "Generic Gauss-Kronrod quadrature algorithm.\nInternal method used in {@link #GaussKronrod15}, {@link #GaussKronrod21}, {@link #GaussKronrod31}.\nTaken from QUADPACK.",
            "itemtype": "method",
            "name": "_gaussKonrod",
            "params": [
                {
                    "name": "interval",
                    "description": "The integration interval, e.g. [0, 3].",
                    "type": "Array"
                },
                {
                    "name": "f",
                    "description": "A function which takes one argument of type number and returns a number.",
                    "type": "Function"
                },
                {
                    "name": "n",
                    "description": "order",
                    "type": "Number"
                },
                {
                    "name": "xgk",
                    "description": "Kronrod quadrature abscissae",
                    "type": "Array"
                },
                {
                    "name": "wg",
                    "description": "Weights of the Gauss rule",
                    "type": "Array"
                },
                {
                    "name": "wgk",
                    "description": "Weights of the Kronrod rule",
                    "type": "Array"
                },
                {
                    "name": "resultObj",
                    "description": "Object returning resultObj.abserr, resultObj.resabs, resultObj.resasc. See the library\n QUADPACK for an explanation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Integral value of f over interval",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 826,
            "description": "15 point Gauss-Kronrod quadrature algorithm, see the library QUADPACK\n\nGauss quadrature weights and kronrod quadrature abscissae and\nweights as evaluated with 80 decimal digit arithmetic by\nL. W. Fullerton, Bell Labs, Nov. 1981.",
            "itemtype": "method",
            "name": "GaussKronrod15",
            "params": [
                {
                    "name": "interval",
                    "description": "The integration interval, e.g. [0, 3].",
                    "type": "Array"
                },
                {
                    "name": "f",
                    "description": "A function which takes one argument of type number and returns a number.",
                    "type": "Function"
                },
                {
                    "name": "resultObj",
                    "description": "Object returning resultObj.abserr, resultObj.resabs, resultObj.resasc. See the library\n QUADPACK for an explanation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Integral value of f over interval",
                "type": "Number"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 886,
            "description": "21 point Gauss-Kronrod quadrature algorithm, see the library QUADPACK\n\nGauss quadrature weights and kronrod quadrature abscissae and\nweights as evaluated with 80 decimal digit arithmetic by\nL. W. Fullerton, Bell Labs, Nov. 1981.",
            "itemtype": "method",
            "name": "GaussKronrod21",
            "params": [
                {
                    "name": "interval",
                    "description": "The integration interval, e.g. [0, 3].",
                    "type": "Array"
                },
                {
                    "name": "f",
                    "description": "A function which takes one argument of type number and returns a number.",
                    "type": "Function"
                },
                {
                    "name": "resultObj",
                    "description": "Object returning resultObj.abserr, resultObj.resabs, resultObj.resasc. See the library\n QUADPACK for an explanation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Integral value of f over interval",
                "type": "Number"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 950,
            "description": "31 point Gauss-Kronrod quadrature algorithm, see the library QUADPACK\n\nGauss quadrature weights and kronrod quadrature abscissae and\nweights as evaluated with 80 decimal digit arithmetic by\nL. W. Fullerton, Bell Labs, Nov. 1981.",
            "itemtype": "method",
            "name": "GaussKronrod31",
            "params": [
                {
                    "name": "interval",
                    "description": "The integration interval, e.g. [0, 3].",
                    "type": "Array"
                },
                {
                    "name": "f",
                    "description": "A function which takes one argument of type number and returns a number.",
                    "type": "Function"
                },
                {
                    "name": "resultObj",
                    "description": "Object returning resultObj.abserr, resultObj.resabs, resultObj.resasc. See the library\n QUADPACK for an explanation.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Integral value of f over interval",
                "type": "Number"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1029,
            "description": "Generate workspace object for {@link #Qag}.",
            "itemtype": "method",
            "name": "_workspace",
            "params": [
                {
                    "name": "interval",
                    "description": "The integration interval, e.g. [0, 3].",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "Max. limit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Workspace object",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1197,
            "description": "Quadrature algorithm qag from QUADPACK.\nInternal method used in {@link #GaussKronrod15}, {@link #GaussKronrod21}, {@link #GaussKronrod31}.",
            "itemtype": "method",
            "name": "Qag",
            "params": [
                {
                    "name": "interval",
                    "description": "The integration interval, e.g. [0, 3].",
                    "type": "Array"
                },
                {
                    "name": "f",
                    "description": "A function which takes one argument of type number and returns a number.",
                    "type": "Function"
                },
                {
                    "name": "config",
                    "description": "The algorithm setup. Accepted propert are max. recursion limit of type number,\nand epsrel and epsabs, the relative and absolute required precision of type number. Further,\nq the internal quadrature sub-algorithm of type function.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "limit",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "15"
                        },
                        {
                            "name": "epsrel",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.0000001"
                        },
                        {
                            "name": "epsabs",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.0000001"
                        },
                        {
                            "name": "q",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "JXG.Math.Numerics.GaussKronrod15"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Integral value of f over interval",
                "type": "Number"
            },
            "example": [
                "\n    function f(x) {\n        return x*x;\n    }\n\n    // calculates integral of <tt>f</tt> from 0 to 2.\n    var area1 = JXG.Math.Numerics.Qag([0, 2], f);\n\n    // the same with an anonymous function\n    var area2 = JXG.Math.Numerics.Qag([0, 2], function (x) { return x*x; });\n\n    // use JXG.Math.Numerics.GaussKronrod31 rule as sub-algorithm.\n    var area3 = JXG.Math.Numerics.Quag([0, 2], f,\n                                  {q: JXG.Math.Numerics.GaussKronrod31});"
            ],
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1402,
            "description": "Integral of function f over interval.",
            "itemtype": "method",
            "name": "I",
            "params": [
                {
                    "name": "interval",
                    "description": "The integration interval, e.g. [0, 3].",
                    "type": "Array"
                },
                {
                    "name": "f",
                    "description": "A function which takes one argument of type number and returns a number.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The value of the integral of f over interval",
                "type": "Number"
            },
            "references": [
                "JXG.Math.Numerics.NewtonCotes",
                "JXG.Math.Numerics.Romberg",
                "JXG.Math.Numerics.Qag"
            ],
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1420,
            "description": "Newton's method to find roots of a funtion in one variable.",
            "itemtype": "method",
            "name": "Newton",
            "params": [
                {
                    "name": "f",
                    "description": "We search for a solution of f(x)=0.",
                    "type": "Function"
                },
                {
                    "name": "x",
                    "description": "initial guess for the root, i.e. start value.",
                    "type": "Number"
                },
                {
                    "name": "context",
                    "description": "optional object that is treated as \"this\" in the function body. This is useful if\nthe function is a method of an object and contains a reference to its parent object via \"this\".",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A root of the function f.",
                "type": "Number"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1461,
            "description": "Abstract method to find roots of univariate functions.",
            "itemtype": "method",
            "name": "root",
            "params": [
                {
                    "name": "f",
                    "description": "We search for a solution of f(x)=0.",
                    "type": "Function"
                },
                {
                    "name": "x",
                    "description": "initial guess for the root, i.e. starting value.",
                    "type": "Number"
                },
                {
                    "name": "context",
                    "description": "optional object that is treated as \"this\" in the function body. This is useful if\nthe function is a method of an object and contains a reference to its parent object via \"this\".",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A root of the function f.",
                "type": "Number"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1476,
            "description": "Compute an intersection of the curves c1 and c2\nwith a generalized Newton method.\nWe want to find values t1, t2 such that\nc1(t1) = c2(t2), i.e.\n(c1_x(t1)-c2_x(t2),c1_y(t1)-c2_y(t2)) = (0,0).\nWe set\n(e,f) := (c1_x(t1)-c2_x(t2),c1_y(t1)-c2_y(t2))\n\nThe Jacobian J is defined by\nJ = (a, b)\n    (c, d)\nwhere\na = c1_x'(t1)\nb = -c2_x'(t2)\nc = c1_y'(t1)\nd = -c2_y'(t2)\n\nThe inverse J^(-1) of J is equal to\n (d, -b)/\n (-c, a) / (ad-bc)\n\nThen, (t1new, t2new) := (t1,t2) - J^(-1)*(e,f).\nIf the function meetCurveCurve possesses the properties\nt1memo and t2memo then these are taken as start values\nfor the Newton algorithm.\nAfter stopping of the Newton algorithm the values of t1 and t2 are stored in\nt1memo and t2memo.",
            "itemtype": "method",
            "name": "generalizedNewton",
            "params": [
                {
                    "name": "c1",
                    "description": "Curve, Line or Circle",
                    "type": "JXG.Curve"
                },
                {
                    "name": "c2",
                    "description": "Curve, Line or Circle",
                    "type": "JXG.Curve"
                },
                {
                    "name": "t1ini",
                    "description": "start value for t1",
                    "type": "Number"
                },
                {
                    "name": "t2ini",
                    "description": "start value for t2",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "intersection point",
                "type": "JXG.Coords"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1562,
            "description": "Returns the Lagrange polynomials for curves with equidistant nodes, see\nJean-Paul Berrut, Lloyd N. Trefethen: Barycentric Lagrange Interpolation,\nSIAM Review, Vol 46, No 3, (2004) 501-517.\nThe graph of the parametric curve [x(t),y(t)] runs through the given points.",
            "itemtype": "method",
            "name": "Neville",
            "params": [
                {
                    "name": "p",
                    "description": "Array of JXG.Points",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array consisting of two functions x(t), y(t) which define a parametric curve\nf(t) = (x(t), y(t)) and two numbers x1 and x2 defining the curve's domain. x1 always equals zero.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1576,
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1617,
            "description": "Calculates second derivatives at the given knots.",
            "itemtype": "method",
            "name": "splineDef",
            "params": [
                {
                    "name": "x",
                    "description": "x values of knots",
                    "type": "Array"
                },
                {
                    "name": "y",
                    "description": "y values of knots",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Second derivatives of the interpolated function at the knots.",
                "type": "Array"
            },
            "references": [
                "#splineEval"
            ],
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1688,
            "description": "Evaluate points on spline.",
            "itemtype": "method",
            "name": "splineEval",
            "params": [
                {
                    "name": "x0",
                    "description": "A single float value or an array of values to evaluate",
                    "type": "Number|Array"
                },
                {
                    "name": "x",
                    "description": "x values of knots",
                    "type": "Array"
                },
                {
                    "name": "y",
                    "description": "y values of knots",
                    "type": "Array"
                },
                {
                    "name": "F",
                    "description": "Second derivatives at knots, calculated by {@link #splineDef}",
                    "type": "Array"
                }
            ],
            "references": [
                "#splineDef"
            ],
            "return": {
                "description": "A single value or an array, depending on what is given as x0.",
                "type": "Number|Array"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1749,
            "description": "Generate a string containing the function term of a polynomial.",
            "itemtype": "method",
            "name": "generatePolynomialTerm",
            "params": [
                {
                    "name": "coeffs",
                    "description": "Coefficients of the polynomial. The position i belongs to x^i.",
                    "type": "Array"
                },
                {
                    "name": "deg",
                    "description": "Degree of the polynomial",
                    "type": "Number"
                },
                {
                    "name": "varname",
                    "description": "Name of the variable (usually 'x')",
                    "type": "String"
                },
                {
                    "name": "prec",
                    "description": "Precision",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A string containg the function term of the polynomial.",
                "type": "String"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1776,
            "description": "Computes the polynomial through a given set of coordinates in Lagrange form.\nReturns the Lagrange polynomials, see\nJean-Paul Berrut, Lloyd N. Trefethen: Barycentric Lagrange Interpolation,\nSIAM Review, Vol 46, No 3, (2004) 501-517.",
            "itemtype": "method",
            "name": "lagrangePolynomial",
            "params": [
                {
                    "name": "p",
                    "description": "Array of JXG.Points",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A function of one parameter which returns the value of the polynomial, whose graph runs through the given points.",
                "type": "Function"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1789,
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1839,
            "description": "Computes the cubic cardinal spline curve through a given set of points. The curve\nis uniformly parametrized.\nTwo artificial control points at the beginning and the end are added.",
            "itemtype": "method",
            "name": "CardinalSpline",
            "params": [
                {
                    "name": "points",
                    "description": "Array consisting of JXG.Points.",
                    "type": "Array"
                },
                {
                    "name": "tau",
                    "description": "The tension parameter, either a constant number or a function returning a number. This number is between 0 and 1.\ntau=1/2 give Catmull-Rom splines.",
                    "type": "Number|Function"
                }
            ],
            "return": {
                "description": "An Array consisting of four components: Two functions each of one parameter t\nwhich return the x resp. y coordinates of the Catmull-Rom-spline curve in t, a zero value, and a function simply\nreturning the length of the points array minus three.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1868,
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1935,
            "description": "Computes the cubic Catmull-Rom spline curve through a given set of points. The curve\nis uniformly parametrized. The curve is the cardinal spline curve for tau=0.5.\nTwo artificial control points at the beginning and the end are added.",
            "itemtype": "method",
            "name": "CatmullRomSpline",
            "params": [
                {
                    "name": "points",
                    "description": "Array consisting of JXG.Points.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An Array consisting of four components: Two functions each of one parameter t\nwhich return the x resp. y coordinates of the Catmull-Rom-spline curve in t, a zero value, and a function simply\nreturning the length of the points array minus three.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1951,
            "description": "Computes the regression polynomial of a given degree through a given set of coordinates.\nReturns the regression polynomial function.",
            "itemtype": "method",
            "name": "regressionPolynomial",
            "params": [
                {
                    "name": "degree",
                    "description": "number, function or slider.\nEither",
                    "type": "Number|Function|JXG.Slider"
                },
                {
                    "name": "dataX",
                    "description": "Array containing either the x-coordinates of the data set or both coordinates in\nan array of {@link JXG.Point}s or {@link JXG.Coords}. In the latter case, the <tt>dataY</tt> parameter will be ignored.",
                    "type": "Array"
                },
                {
                    "name": "dataY",
                    "description": "Array containing the y-coordinates of the data set,",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A function of one parameter which returns the value of the regression polynomial of the given degree.\nIt possesses the method getTerm() which returns the string containing the function term of the polynomial.",
                "type": "Function"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1971,
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 1980,
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2000,
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2087,
            "description": "Computes the cubic Bezier curve through a given set of points.",
            "itemtype": "method",
            "name": "bezier",
            "params": [
                {
                    "name": "points",
                    "description": "Array consisting of 3*k+1 {@link JXG.Points}.\nThe points at position k with k mod 3 = 0 are the data points,\npoints at position k with k mod 3 = 1 or 2 are the control points.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array consisting of two functions of one parameter t which return the\nx resp. y coordinates of the Bezier curve in t, one zero value, and a third function accepting\nno parameters and returning one third of the length of the points.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2101,
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2135,
            "description": "Computes the B-spline curve of order k (order = degree+1) through a given set of points.",
            "itemtype": "method",
            "name": "bspline",
            "params": [
                {
                    "name": "points",
                    "description": "Array consisting of JXG.Points.",
                    "type": "Array"
                },
                {
                    "name": "order",
                    "description": "Order of the B-spline curve.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An Array consisting of four components: Two functions each of one parameter t\nwhich return the x resp. y coordinates of the B-spline curve in t, a zero value, and a function simply\nreturning the length of the points array minus one.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2206,
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2251,
            "description": "Numerical (symmetric) approximation of derivative. suspendUpdate is piped through, see {@link JXG.Curve#updateCurve}\nand {@link JXG.Curve#hasPoint}.",
            "itemtype": "method",
            "name": "D",
            "params": [
                {
                    "name": "f",
                    "description": "Function in one variable to be differentiated.",
                    "type": "Function"
                },
                {
                    "name": "obj",
                    "description": "Optional object that is treated as \"this\" in the function body. This is useful, if the function is a\nmethod of an object and contains a reference to its parent object via \"this\".",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Derivative function of a given function f.",
                "type": "Function"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2277,
            "description": "Evaluate the function term for {@see #riemann}.",
            "itemtype": "method",
            "name": "_riemannValue",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x",
                    "description": "function argument",
                    "type": "Number"
                },
                {
                    "name": "f",
                    "description": "JavaScript function returning a number",
                    "type": "Function"
                },
                {
                    "name": "type",
                    "description": "Name of the Riemann sum type, e.g. 'lower', see {@see #riemann}.",
                    "type": "String"
                },
                {
                    "name": "delta",
                    "description": "Width of the bars in user coordinates",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Upper (delta > 0) or lower (delta < 0) value of the bar containing x of the Riemann sum.",
                "type": "Number"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2353,
            "description": "Helper function to create curve which displays Riemann sums.\nCompute coordinates for the rectangles showing the Riemann sum.",
            "itemtype": "method",
            "name": "riemann",
            "params": [
                {
                    "name": "f",
                    "description": "Function or array of two functions.\nIf f is a function the integral of this function is approximated by the Riemann sum.\nIf f is an array consisting of two functions the area between the two functions is filled\nby the Riemann sum bars.",
                    "type": "Function,Array"
                },
                {
                    "name": "n",
                    "description": "number of rectangles.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "Type of approximation. Possible values are: 'left', 'right', 'middle', 'lower', 'upper', 'random', 'simpson', or 'trapezoidal'.",
                    "type": "String"
                },
                {
                    "name": "start",
                    "description": "Left border of the approximation interval",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "Right border of the approximation interval",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An array of two arrays containing the x and y coordinates for the rectangles showing the Riemann sum. This\narray may be used as parent array of a {@link JXG.Curve}. The third parameteris the riemann sum, i.e. the sum of the volumes of all\nrectangles.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2456,
            "description": "Approximate the integral by Riemann sums.\nCompute the area described by the riemann sum rectangles.",
            "itemtype": "method",
            "name": "riemannsum",
            "deprecated": true,
            "deprecationMessage": "Replaced by JXG.Curve.Value(), see {@link JXG.Curve#riemannsum}",
            "params": [
                {
                    "name": "f",
                    "description": "Function or array of two functions.\nIf f is a function the integral of this function is approximated by the Riemann sum.\nIf f is an array consisting of two functions the area between the two functions is approximated\nby the Riemann sum.",
                    "type": "Function_Array"
                },
                {
                    "name": "n",
                    "description": "number of rectangles.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "Type of approximation. Possible values are: 'left', 'right', 'middle', 'lower', 'upper', 'random', 'simpson' or 'trapezoidal'.",
                    "type": "String"
                },
                {
                    "name": "start",
                    "description": "Left border of the approximation interval",
                    "type": "Number"
                },
                {
                    "name": "end",
                    "description": "Right border of the approximation interval",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The sum of the areas of the rectangles.",
                "type": "Number"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2479,
            "description": "Solve initial value problems numerically using Runge-Kutta-methods.\nSee {@link http://en.wikipedia.org/wiki/Runge-Kutta_methods} for more information on the algorithm.",
            "itemtype": "method",
            "name": "rungeKutta",
            "params": [
                {
                    "name": "butcher",
                    "description": "Butcher tableau describing the Runge-Kutta method to use. This can be either a string describing\na Runge-Kutta method with a Butcher tableau predefined in JSXGraph like 'euler', 'heun', 'rk4' or an object providing the structure\n<pre>\n{\n    s: &lt;Number&gt;,\n    A: &lt;matrix&gt;,\n    b: &lt;Array&gt;,\n    c: &lt;Array&gt;\n}\n</pre>\nwhich corresponds to the Butcher tableau structure shown here: http://en.wikipedia.org/w/index.php?title=List_of_Runge%E2%80%93Kutta_methods&oldid=357796696",
                    "type": "Object,String"
                },
                {
                    "name": "x0",
                    "description": "Initial value vector. If the problem is of one-dimensional, the initial value also has to be given in an array.",
                    "type": "Array"
                },
                {
                    "name": "I",
                    "description": "Interval on which to integrate.",
                    "type": "Array"
                },
                {
                    "name": "N",
                    "description": "Number of evaluation points.",
                    "type": "Number"
                },
                {
                    "name": "f",
                    "description": "Function describing the right hand side of the first order ordinary differential equation, i.e. if the ode\nis given by the equation <pre>dx/dt = f(t, x(t)).</pre> So f has to take two parameters, a number <tt>t</tt> and a\nvector <tt>x</tt>, and has to return a vector of the same dimension as <tt>x</tt> has.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of vectors describing the solution of the ode on the given interval I.",
                "type": "Array"
            },
            "example": [
                "\n    // A very simple autonomous system dx(t)/dt = x(t);\n    function f(t, x) {\n        return x;\n    }\n\n    // Solve it with initial value x(0) = 1 on the interval [0, 2]\n    // with 20 evaluation points.\n    var data = JXG.Math.Numerics.rungeKutta('heun', [1], [0, 2], 20, f);\n\n    // Prepare data for plotting the solution of the ode using a curve.\n    var dataX = [];\n    var dataY = [];\n    var h = 0.1;        // (I[1] - I[0])/N  = (2-0)/20\n    for(var i=0; i&lt;data.length; i++) {\n        dataX[i] = i*h;\n        dataY[i] = data[i][0];\n    }\n    var g = board.create('curve', [dataX, dataY], {strokeWidth:'2px'});\n<div id=\"d2432d04-4ef7-4159-a90b-a2eb8d38c4f6\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\nvar board = JXG.JSXGraph.initBoard('d2432d04-4ef7-4159-a90b-a2eb8d38c4f6', {boundingbox: [-1, 5, 5, -1], axis: true, showcopyright: false, shownavigation: false});\nfunction f(t, x) {\n    // we have to copy the value.\n    // return x; would just return the reference.\n    return [x[0]];\n}\nvar data = JXG.Math.Numerics.rungeKutta('heun', [1], [0, 2], 20, f);\nvar dataX = [];\nvar dataY = [];\nvar h = 0.1;\nfor(var i=0; i<data.length; i++) {\n    dataX[i] = i*h;\n    dataY[i] = data[i][0];\n}\nvar g = board.create('curve', [dataX, dataY], {strokeColor:'red', strokeWidth:'2px'});\n</script>"
            ],
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2616,
            "description": "Maximum number of iterations in {@link JXG.Math.Numerics#fzero}",
            "itemtype": "property",
            "name": "maxIterationsRoot",
            "type": "Number",
            "default": "80",
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2626,
            "description": "Maximum number of iterations in {@link JXG.Math.Numerics#fminbr}",
            "itemtype": "property",
            "name": "maxIterationsMinimize",
            "type": "Number",
            "default": "500",
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2636,
            "description": "Find zero of an univariate function f.\n*Algorithm:*\n G.Forsythe, M.Malcolm, C.Moler, Computer methods for mathematical\n  computations. M., Mir, 1980, p.180 of the Russian edition\nIf x0 is an array containing lower and upper bound for the zero\n algorithm 748 is applied. Otherwise, if x0 is a number,\n the algorithm tries to bracket a zero of f starting from x0.\n If this fails, we fall back to Newton's method.",
            "itemtype": "method",
            "name": "fzero",
            "params": [
                {
                    "name": "f",
                    "description": "Function, whose root is to be found",
                    "type": "Function"
                },
                {
                    "name": "x0",
                    "description": "Start value or start interval enclosing the root",
                    "type": "Array|Number"
                },
                {
                    "name": "object",
                    "description": "Parent object in case f is method of it",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the approximation of the root",
                "type": "Number"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2823,
            "description": "Find minimum of an univariate function f.\n *Algorithm:*\n G.Forsythe, M.Malcolm, C.Moler, Computer methods for mathematical\n  computations. M., Mir, 1980, p.180 of the Russian edition\n x0",
            "itemtype": "method",
            "name": "fminbr",
            "params": [
                {
                    "name": "f",
                    "description": "Function, whose minimum is to be found",
                    "type": "Function"
                },
                {
                    "name": "x0",
                    "description": "Start interval enclosing the minimum",
                    "type": "Array"
                },
                {
                    "name": "context",
                    "description": "Parent object in case f is method of it",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the approximation of the minimum value position",
                "type": "Number"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2968,
            "description": "Implements the Ramer-Douglas-Peucker algorithm.\nIt discards points which are not necessary from the polygonal line defined by the point array\npts. The computation is done in screen coordinates.\nAverage runtime is O(nlog(n)), worst case runtime is O(n^2), where n is the number of points.",
            "itemtype": "method",
            "name": "RamerDouglasPeucker",
            "params": [
                {
                    "name": "pts",
                    "description": "Array of {@link JXG.Coords}",
                    "type": "Array"
                },
                {
                    "name": "eps",
                    "description": "If the absolute value of a given number <tt>x</tt> is smaller than <tt>eps</tt> it is considered to be equal <tt>0</tt>.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An array containing points which represent an apparently identical curve as the points of pts do, but contains fewer points.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 2983,
            "description": "findSplit() is a subroutine of {@link JXG.Math.Numerics#RamerDouglasPeucker}.\nIt searches for the point between index i and j which\nhas the largest distance from the line between the points i and j.",
            "params": [
                {
                    "name": "pts",
                    "description": "Array of {@link JXG.Coords}",
                    "type": "Array"
                },
                {
                    "name": "i",
                    "description": "Index of a point in pts",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "Index of a point in pts",
                    "type": "Number"
                }
            ],
            "ignore": "",
            "access": "private",
            "tagname": "",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 3051,
            "description": "RDP() is a private subroutine of {@link JXG.Math.Numerics#RamerDouglasPeucker}.\nIt runs recursively through the point set and searches the\npoint which has the largest distance from the line between the first point and\nthe last point. If the distance from the line is greater than eps, this point is\nincluded in our new point set otherwise it is discarded.\nIf it is taken, we recursively apply the subroutine to the point set before\nand after the chosen point.",
            "params": [
                {
                    "name": "pts",
                    "description": "Array of {@link JXG.Coords}",
                    "type": "Array"
                },
                {
                    "name": "i",
                    "description": "Index of an element of pts",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "Index of an element of pts",
                    "type": "Number"
                },
                {
                    "name": "eps",
                    "description": "If the absolute value of a given number <tt>x</tt> is smaller than <tt>eps</tt> it is considered to be equal <tt>0</tt>.",
                    "type": "Number"
                },
                {
                    "name": "newPts",
                    "description": "Array of {@link JXG.Coords}",
                    "type": "Array"
                }
            ],
            "ignore": "",
            "access": "private",
            "tagname": "",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/numerics.js",
            "line": 3111,
            "description": "Old name for the implementation of the Ramer-Douglas-Peucker algorithm.",
            "itemtype": "method",
            "name": "RamerDouglasPeuker",
            "deprecated": true,
            "deprecationMessage": "Use {@link JXG.Math.Numerics#RamerDouglasPeucker}",
            "memberof": "JXG.Math.Numerics",
            "class": "JXG.Math.Numerics"
        },
        {
            "file": "src/math/poly.js",
            "line": 42,
            "fileoverview": "In this file the namespace Math.Poly is defined, which holds algorithms to create and\nmanipulate polynomials.",
            "class": "JXG.Math.Poly"
        },
        {
            "file": "src/math/poly.js",
            "line": 65,
            "description": "A list of variables in this polynomial ring.",
            "type": "Array",
            "class": "JXG.Math.Poly.Ring"
        },
        {
            "file": "src/math/poly.js",
            "line": 102,
            "description": "A polynomial ring.",
            "itemtype": "property",
            "name": "ring",
            "type": "JXG.Math.Poly.Ring",
            "class": "JXG.Math.Poly.Monomial"
        },
        {
            "file": "src/math/poly.js",
            "line": 110,
            "description": "The monomial's coefficient",
            "itemtype": "property",
            "name": "coefficient",
            "type": "Number",
            "class": "JXG.Math.Poly.Monomial"
        },
        {
            "file": "src/math/poly.js",
            "line": 118,
            "description": "Exponent vector, the order depends on the order of the variables\nin the ring definition.",
            "itemtype": "property",
            "name": "exponents",
            "type": "Array",
            "class": "JXG.Math.Poly.Monomial"
        },
        {
            "file": "src/math/poly.js",
            "line": 130,
            "description": "Creates a deep copy of the monomial.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "JXG.Math.Poly.Monomial"
            },
            "class": "JXG.Math.Poly.Monomial"
        },
        {
            "file": "src/math/poly.js",
            "line": 140,
            "description": "Print the monomial.",
            "itemtype": "method",
            "name": "print",
            "return": {
                "description": "String representation of the monomial",
                "type": "String"
            },
            "class": "JXG.Math.Poly.Monomial"
        },
        {
            "file": "src/math/poly.js",
            "line": 182,
            "description": "A polynomial ring.",
            "itemtype": "property",
            "name": "ring",
            "type": "JXG.Math.Poly.Ring",
            "class": "JXG.Math.Poly.Polynomial"
        },
        {
            "file": "src/math/poly.js",
            "line": 190,
            "description": "List of monomials.",
            "itemtype": "property",
            "name": "monomials",
            "type": "Array",
            "class": "JXG.Math.Poly.Polynomial"
        },
        {
            "file": "src/math/poly.js",
            "line": 200,
            "description": "Find a monomial with the given signature, i.e. exponent vector.",
            "itemtype": "method",
            "name": "findSignature",
            "params": [
                {
                    "name": "sig",
                    "description": "An array of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The index of the first monomial with the given signature, or -1\nif no monomial could be found.",
                "type": "Number"
            },
            "class": "JXG.Math.Poly.Polynomial"
        },
        {
            "file": "src/math/poly.js",
            "line": 220,
            "description": "Adds a monomial to the polynomial. Checks the existing monomials for the added\nmonomial's signature and just adds the coefficient if one is found.",
            "itemtype": "method",
            "name": "addSubMonomial",
            "params": [
                {
                    "name": "m",
                    "description": "",
                    "type": "JXG.Math.Poly.Monomial"
                },
                {
                    "name": "factor",
                    "description": "Either <tt>1</tt> or <tt>-1</tt>.",
                    "type": "Number"
                }
            ],
            "class": "JXG.Math.Poly.Polynomial"
        },
        {
            "file": "src/math/poly.js",
            "line": 240,
            "description": "Adds another polynomial or monomial to this one and merges them by checking for the\nsignature of each new monomial in the existing monomials.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "mp",
                    "description": "",
                    "type": "JXG.Math.Poly.Polynomial|JXG.Math.Poly.Monomial"
                }
            ],
            "class": "JXG.Math.Poly.Polynomial"
        },
        {
            "file": "src/math/poly.js",
            "line": 265,
            "description": "Subtracts another polynomial or monomial from this one and merges them by checking for the\nsignature of each new monomial in the existing monomials.",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "mp",
                    "description": "",
                    "type": "JXG.Math.Poly.Polynomial|JXG.Math.Poly.Monomial"
                }
            ],
            "class": "JXG.Math.Poly.Polynomial"
        },
        {
            "file": "src/math/poly.js",
            "line": 290,
            "description": "Creates a deep copy of the polynomial.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "JXG.Math.Poly.Polynomial"
            },
            "class": "JXG.Math.Poly.Polynomial"
        },
        {
            "file": "src/math/poly.js",
            "line": 307,
            "description": "Prints the polynomial.",
            "itemtype": "method",
            "name": "print",
            "return": {
                "description": "A string representation of the polynomial.",
                "type": "String"
            },
            "class": "JXG.Math.Poly.Polynomial"
        },
        {
            "file": "src/math/qdt.js",
            "line": 54,
            "description": "The maximum number of points stored in a quad tree node\nbefore it is subdivided.",
            "itemtype": "property",
            "name": "capacity",
            "type": "{Number}",
            "default": "10",
            "class": "JXG.Math.Quadtree"
        },
        {
            "file": "src/math/qdt.js",
            "line": 64,
            "description": "Point storage.",
            "itemtype": "property",
            "name": "points",
            "type": "{Array}",
            "class": "JXG.Math.Quadtree"
        },
        {
            "file": "src/math/qdt.js",
            "line": 77,
            "description": "In a subdivided quad tree this represents the top left subtree.",
            "itemtype": "property",
            "name": "northWest",
            "type": "{JXG.Quadtree}",
            "class": "JXG.Math.Quadtree"
        },
        {
            "file": "src/math/qdt.js",
            "line": 85,
            "description": "In a subdivided quad tree this represents the top right subtree.",
            "itemtype": "property",
            "name": "northEast",
            "type": "{JXG.Quadtree}",
            "class": "JXG.Math.Quadtree"
        },
        {
            "file": "src/math/qdt.js",
            "line": 93,
            "description": "In a subdivided quad tree this represents the bottom right subtree.",
            "itemtype": "property",
            "name": "southEast",
            "type": "{JXG.Quadtree}",
            "class": "JXG.Math.Quadtree"
        },
        {
            "file": "src/math/qdt.js",
            "line": 101,
            "description": "In a subdivided quad tree this represents the bottom left subtree.",
            "itemtype": "property",
            "name": "southWest",
            "type": "{JXG.Quadtree}",
            "class": "JXG.Math.Quadtree"
        },
        {
            "file": "src/math/qdt.js",
            "line": 111,
            "description": "Checks if the given coordinates are inside the quad tree.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Math.Quadtree"
        },
        {
            "file": "src/math/qdt.js",
            "line": 123,
            "description": "Insert a new point into this quad tree.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "p",
                    "description": "",
                    "type": "JXG.Coords"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Math.Quadtree"
        },
        {
            "file": "src/math/qdt.js",
            "line": 161,
            "description": "Subdivide the quad tree.",
            "itemtype": "method",
            "name": "subdivide",
            "class": "JXG.Math.Quadtree"
        },
        {
            "file": "src/math/qdt.js",
            "line": 185,
            "description": "Internal _query method that lacks adjustment of the parameter.",
            "itemtype": "method",
            "name": "_query",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The quad tree if the point is found, false\nif none of the quad trees contains the point (i.e. the point is not inside\nthe root tree's AABB).",
                "type": "Boolean|JXG.Quadtree"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Math.Quadtree"
        },
        {
            "file": "src/math/qdt.js",
            "line": 228,
            "description": "Retrieve the smallest quad tree that contains the given point.",
            "itemtype": "method",
            "name": "query",
            "params": [
                {
                    "name": "xp",
                    "description": "",
                    "type": "JXG.Coords|Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The quad tree if the point is found, false\nif none of the quad trees contains the point (i.e. the point is not inside\nthe root tree's AABB).",
                "type": "Boolean|JXG.Quadtree"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Math.Quadtree"
        },
        {
            "file": "src/math/statistics.js",
            "line": 53,
            "description": "Sums up all elements of the given array.",
            "itemtype": "method",
            "name": "sum",
            "params": [
                {
                    "name": "arr",
                    "description": "An array of numbers.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 71,
            "description": "Multiplies all elements of the given array.",
            "itemtype": "method",
            "name": "prod",
            "params": [
                {
                    "name": "arr",
                    "description": "An array of numbers.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 90,
            "description": "Determines the mean value of the values given in an array.",
            "itemtype": "method",
            "name": "mean",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 106,
            "description": "The median of a finite set of values is the value that divides the set\ninto two equal sized subsets.",
            "itemtype": "method",
            "name": "median",
            "params": [
                {
                    "name": "arr",
                    "description": "The set of values.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 135,
            "description": "Bias-corrected sample variance. A variance is a measure of how far a\nset of numbers are spread out from each other.",
            "itemtype": "method",
            "name": "variance",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 159,
            "description": "Determines the <strong>s</strong>tandard <strong>d</strong>eviation which shows how much\nvariation there is from the average value of a set of numbers.",
            "itemtype": "method",
            "name": "sd",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 172,
            "description": "Weighted mean value is basically the same as {@link JXG.Math.Statistics#mean} but here the values\nare weighted, i.e. multiplied with another value called <em>weight</em>. The weight values are given\nas a second array with the same length as the value array..",
            "itemtype": "method",
            "name": "weightedMean",
            "throws": {
                "description": "If the dimensions of the arrays don't match.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "arr",
                    "description": "Set of alues.",
                    "type": "Array"
                },
                {
                    "name": "w",
                    "description": "Weight values.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 196,
            "description": "Extracts the maximum value from the array.",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The highest number from the array. It returns <tt>NaN</tt> if not every element could be\ninterpreted as a number and <tt>-Infinity</tt> if an empty array is given or no element could be interpreted\nas a number.",
                "type": "Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 210,
            "description": "Extracts the minimum value from the array.",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The lowest number from the array. It returns <tt>NaN</tt> if not every element could be\ninterpreted as a number and <tt>Infinity</tt> if an empty array is given or no element could be interpreted\nas a number.",
                "type": "Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 224,
            "description": "Determines the lowest and the highest value from the given array.",
            "itemtype": "method",
            "name": "range",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The minimum value as the first and the maximum value as the second value.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 236,
            "description": "Determines the absolute value of every given value.",
            "itemtype": "method",
            "name": "abs",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array|Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 261,
            "description": "Adds up two (sequences of) values. If one value is an array and the other one is a number the number\nis added to every element of the array. If two arrays are given and the lengths don't match the shortest\nlength is taken.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "arr1",
                    "description": "",
                    "type": "Array|Number"
                },
                {
                    "name": "arr2",
                    "description": "",
                    "type": "Array|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array|Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 303,
            "description": "Divides two (sequences of) values. If two arrays are given and the lengths don't match the shortest length\nis taken.",
            "itemtype": "method",
            "name": "div",
            "params": [
                {
                    "name": "arr1",
                    "description": "Dividend",
                    "type": "Array|Number"
                },
                {
                    "name": "arr2",
                    "description": "Divisor",
                    "type": "Array|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array|Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 344,
            "description": "Use {@link JXG.Math.Statistics#div} instead.",
            "itemtype": "method",
            "name": "divide",
            "deprecated": true,
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 355,
            "description": "Divides two (sequences of) values and returns the remainder. If two arrays are given and the lengths don't\nmatch the shortest length is taken.",
            "itemtype": "method",
            "name": "mod",
            "params": [
                {
                    "name": "arr1",
                    "description": "Dividend",
                    "type": "Array|Number"
                },
                {
                    "name": "arr2",
                    "description": "Divisor",
                    "type": "Array|Number"
                },
                {
                    "name": "math",
                    "description": "Mathematical mod or symmetric mod? Default is symmetric, the JavaScript <tt>%</tt> operator.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Array|Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 405,
            "description": "Multiplies two (sequences of) values. If one value is an array and the other one is a number the number\nis multiplied to every element of the array. If two arrays are given and the lengths don't match the shortest\nlength is taken.",
            "itemtype": "method",
            "name": "multiply",
            "params": [
                {
                    "name": "arr1",
                    "description": "",
                    "type": "Array|Number"
                },
                {
                    "name": "arr2",
                    "description": "",
                    "type": "Array|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array|Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 447,
            "description": "Subtracts two (sequences of) values. If two arrays are given and the lengths don't match the shortest\nlength is taken.",
            "itemtype": "method",
            "name": "subtract",
            "params": [
                {
                    "name": "arr1",
                    "description": "Minuend",
                    "type": "Array|Number"
                },
                {
                    "name": "arr2",
                    "description": "Subtrahend",
                    "type": "Array|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array|Number"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/statistics.js",
            "line": 488,
            "description": "The Theil-Sen estimator can be used to determine a more robust linear regression of a set of sample\npoints than least squares regression in {@link JXG.Math.Numerics.regressionPolynomial}.",
            "itemtype": "method",
            "name": "TheilSenRegression",
            "params": [
                {
                    "name": "coords",
                    "description": "Array of {@link JXG.Coords}.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The stdform of the regression line.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Statistics",
            "class": "JXG.Math.Statistics"
        },
        {
            "file": "src/math/symbolic.js",
            "line": 46,
            "fileoverview": "In this file the namespace Math.Symbolic is defined, which holds methods\nand algorithms for symbolic computations.",
            "author": "graphjs",
            "class": "JXG.Math.Symbolic"
        },
        {
            "file": "src/math/symbolic.js",
            "line": 66,
            "description": "Generates symbolic coordinates for the part of a construction including all the elements from that\na specific element depends of. These coordinates will be stored in GeometryElement.symbolic.",
            "itemtype": "method",
            "name": "generateSymbolicCoordinatesPartial",
            "params": [
                {
                    "name": "board",
                    "description": "The board that's element get some symbolic coordinates.",
                    "type": "JXG.Board"
                },
                {
                    "name": "element",
                    "description": "All ancestor of this element get symbolic coordinates.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "variable",
                    "description": "Name for the coordinates, e.g. x or u.",
                    "type": "String"
                },
                {
                    "name": "append",
                    "description": "Method for how to append the number of the coordinates. Possible values are\n                       'underscore' (e.g. x_2), 'none' (e.g. x2), 'brace' (e.g. x[2]).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Number of coordinates given.",
                "type": "Number"
            },
            "memberof": "JXG.Math.Symbolic",
            "class": "JXG.Math.Symbolic"
        },
        {
            "file": "src/math/symbolic.js",
            "line": 135,
            "description": "Clears all `.symbolic.x` and `.symbolic.y` members on every point of a given board.",
            "itemtype": "method",
            "name": "clearSymbolicCoordinates",
            "params": [
                {
                    "name": "board",
                    "description": "The board that's points get cleared their symbolic coordinates.",
                    "type": "JXG.Board"
                }
            ],
            "memberof": "JXG.Math.Symbolic",
            "class": "JXG.Math.Symbolic"
        },
        {
            "file": "src/math/symbolic.js",
            "line": 161,
            "description": "Generates polynomials for a part of the construction including all the points from that\na specific element depends of.",
            "itemtype": "method",
            "name": "generatePolynomials",
            "params": [
                {
                    "name": "board",
                    "description": "The board that's points polynomials will be generated.",
                    "type": "JXG.Board"
                },
                {
                    "name": "element",
                    "description": "All points in the set of ancestors of this element are used to generate the set of polynomials.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "generateCoords",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "An array of polynomials as strings.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Symbolic",
            "class": "JXG.Math.Symbolic"
        },
        {
            "file": "src/math/symbolic.js",
            "line": 214,
            "description": "Calculate geometric locus of a point given on a board. Invokes python script on server.",
            "itemtype": "method",
            "name": "geometricLocusByGroebnerBase",
            "params": [
                {
                    "name": "board",
                    "description": "The board on which the point lies.",
                    "type": "JXG.Board"
                },
                {
                    "name": "point",
                    "description": "The point that will be traced.",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "An array of points.",
                "type": "Array"
            },
            "memberof": "JXG.Math.Symbolic",
            "class": "JXG.Math.Symbolic"
        },
        {
            "file": "src/parser/datasource.js",
            "line": 41,
            "fileoverview": "The JXG.DataSource is a helper class for data organization. Currently supported data sources are\njavascript arrays and HTML tables.",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/geonext.js",
            "line": 50,
            "description": "Parser helper routines. The methods in here are for parsing expressions in Geonext Syntax.",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/geonext.js",
            "line": 55,
            "description": "Converts expression of the form <i>leftop^rightop</i> into <i>Math.pow(leftop,rightop)</i>.",
            "params": [
                {
                    "name": "te",
                    "description": "Expression of the form <i>leftop^rightop</i>",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Converted expression.",
                "type": "String"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/geonext.js",
            "line": 153,
            "description": "Converts expression of the form <i>If(a,b,c)</i> into <i>(a)?(b):(c)/i>.",
            "params": [
                {
                    "name": "te",
                    "description": "Expression of the form <i>If(a,b,c)</i>",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Converted expression.",
                "type": "String"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/geonext.js",
            "line": 234,
            "description": "Replace an element's name in terms by an element's id.",
            "params": [
                {
                    "name": "term",
                    "description": "Term containing names of elements.",
                    "type": "String"
                },
                {
                    "name": "board",
                    "description": "Reference to the board the elements are on.",
                    "type": "JXG.Board"
                },
                {
                    "name": "jc",
                    "description": "If true, all id's will be surrounded by <tt>$('</tt> and <tt>')</tt>.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The same string with names replaced by ids.",
                "type": "String"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/geonext.js",
            "line": 360,
            "description": "Replaces element ids in terms by element this.board.objects['id'].",
            "params": [
                {
                    "name": "term",
                    "description": "A GEONE<sub>x</sub>T function string with JSXGraph ids in it.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The input string with element ids replaced by this.board.objects[\"id\"].",
                "type": "String"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/geonext.js",
            "line": 391,
            "description": "Converts the given algebraic expression in GEONE<sub>x</sub>T syntax into an equivalent expression in JavaScript syntax.",
            "params": [
                {
                    "name": "term",
                    "description": "Expression in GEONExT syntax",
                    "type": "String"
                },
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                }
            ],
            "return": {
                "description": "Given expression translated to JavaScript.",
                "type": "String"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/geonext.js",
            "line": 432,
            "description": "Finds dependencies in a given term and resolves them by adding the\ndependent object to the found objects child elements.",
            "params": [
                {
                    "name": "me",
                    "description": "Object depending on objects in given term.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "term",
                    "description": "String containing dependencies for the given object.",
                    "type": "String"
                },
                {
                    "name": "board",
                    "description": "Reference to a board",
                    "type": "JXG.Board",
                    "optional": true,
                    "optdefault": "me.board"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/geonext.js",
            "line": 479,
            "description": "Converts the given algebraic expression in GEONE<sub>x</sub>T syntax into an equivalent expression in JessieCode syntax.",
            "params": [
                {
                    "name": "term",
                    "description": "Expression in GEONExT syntax",
                    "type": "String"
                },
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                }
            ],
            "return": {
                "description": "Given expression translated to JavaScript.",
                "type": "String"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 43,
            "fileoverview": "JessieCode is a scripting language designed to provide a simple scripting language to build constructions\nwith JSXGraph. It is similar to JavaScript, but prevents access to the DOM. Hence, it can be used in community driven\nMath portals which want to use JSXGraph to display interactive math graphics.",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 64,
            "description": "A JessieCode object provides an interfacce to the parser and stores all variables and objects used within a JessieCode script.\nThe optional argument <tt>code</tt> is interpreted after initializing. To evaluate more code after initializing a JessieCode instance\nplease use {@link JXG.JessieCode#parse}. For code snippets like single expressions use {@link JXG.JessieCode#snippet}.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "code",
                    "description": "Code to parse.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "geonext",
                    "description": "Geonext compatibility mode.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 75,
            "description": "The global scope.",
            "type": "{Object}",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 88,
            "description": "Keeps track of all possible scopes every required.",
            "type": "{Array}",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 95,
            "description": "A stack to store debug information (like line and column where it was defined) of a parameter",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 102,
            "description": "Determines the parameter stack scope.",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 109,
            "description": "Used to store the property-value definition while parsing an object literal.",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 116,
            "description": "The current scope of the object literal stack {@link JXG.JessieCode#propstack}.",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 123,
            "description": "Store the left hand side of an assignment. If an element is constructed and no attributes are given, this is\nused as the element's name.",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 131,
            "description": "lhs flag, used by JXG.JessieCode#replaceNames",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 138,
            "description": "The id of an HTML node in which innerHTML all warnings are stored (if no <tt>console</tt> object is available).",
            "type": "String",
            "default": "'jcwarn'",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 145,
            "description": "Store $log messages in case there's no console.",
            "type": "{Array}",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 151,
            "description": "Built-in functions and constants",
            "type": "Object",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 157,
            "description": "The board which currently is used to create and look up elements.",
            "type": "JXG.Board",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 163,
            "description": "Keep track of which element is created in which line.",
            "type": "Object",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 183,
            "description": "Create a new parse tree node.",
            "params": [
                {
                    "name": "type",
                    "description": "Type of node, e.g. node_op, node_var, or node_const",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The nodes value, e.g. a variables value or a functions body."
                },
                {
                    "name": "children",
                    "description": "Arbitrary number of child nodes.",
                    "type": "Array"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 197,
            "description": "Create a new parse tree node. Basically the same as node(), but this builds\nthe children part out of an arbitrary number of parameters, instead of one\narray parameter.",
            "params": [
                {
                    "name": "type",
                    "description": "Type of node, e.g. node_op, node_var, or node_const",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The nodes value, e.g. a variables value or a functions body."
                },
                {
                    "name": "children",
                    "description": "Arbitrary number of parameters; define the child nodes."
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 219,
            "description": "Create a new scope.",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 239,
            "description": "Remove the current scope and reinstate the previous scope",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 252,
            "description": "Looks up an {@link JXG.GeometryElement} by its id.",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "JXG.GeometryElement"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 269,
            "description": "Returns a element creator function which takes two parameters: the parents array and the attributes object.",
            "params": [
                {
                    "name": "vname",
                    "description": "The element type, e.g. 'point', 'line', 'midpoint'",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 313,
            "description": "Assigns a value to a variable in the current scope.",
            "params": [
                {
                    "name": "vname",
                    "description": "Variable name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Anything"
                }
            ],
            "references": [
                "JXG.JessieCode#sstack",
                "JXG.JessieCode#scope"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 329,
            "description": "Checks if the given variable name can be found in the current scope chain.",
            "params": [
                {
                    "name": "vname",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A reference to the scope object the variable can be found in or null if it can't be found.",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 348,
            "description": "Checks if the given variable name is a parameter in any scope from the current to the global scope.",
            "params": [
                {
                    "name": "vname",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A reference to the scope object that contains the variable in its arg list.",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 367,
            "description": "Checks if the given variable name is a valid creator method.",
            "params": [
                {
                    "name": "vname",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 377,
            "description": "Checks if the given variable identifier is a valid member of the JavaScript Math Object.",
            "params": [
                {
                    "name": "vname",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 386,
            "description": "Returns true if the given identifier is a builtIn variable/function.",
            "params": [
                {
                    "name": "vname",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 395,
            "description": "Looks up the value of the given variable.",
            "params": [
                {
                    "name": "vname",
                    "description": "Name of the variable",
                    "type": "String"
                },
                {
                    "name": "local",
                    "description": "Only look up the internal symbol table and don't look for\nthe <tt>vname</tt> in Math or the element list.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 434,
            "description": "Look up the value of a local variable.",
            "params": [
                {
                    "name": "vname",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 453,
            "description": "TODO this needs to be called from JS and should not generate JS code\nLooks up a variable identifier in various tables and generates JavaScript code that could be eval'd to get the value.",
            "params": [
                {
                    "name": "vname",
                    "description": "Identifier",
                    "type": "String"
                },
                {
                    "name": "local",
                    "description": "Don't resolve ids and names of elements",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "withProps",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 510,
            "description": "Adds the property <tt>isMap</tt> to a function and sets it to true.",
            "params": [
                {
                    "name": "f",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 540,
            "description": "Converts a node type <tt>node_op</tt> and value <tt>op_map</tt> or <tt>op_function</tt> into a executable\nfunction.",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 622,
            "description": "Merge all atribute values given with an element creator into one object.",
            "params": [
                {
                    "name": "o",
                    "description": "An arbitrary number of objects",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "All given objects merged into one. If properties appear in more (case sensitive) than one\nobject the last value is taken.",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 638,
            "description": "Sets the property <tt>what</tt> of <tt>o</tt> to <tt>value</tt>",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "JXG.Point|JXG.Text"
                },
                {
                    "name": "what",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 705,
            "description": "Parses JessieCode",
            "params": [
                {
                    "name": "code",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "geonext",
                    "description": "Geonext compatibility mode.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "dontstore",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 750,
            "description": "Parses a JessieCode snippet, e.g. \"3+4\", and wraps it into a function, if desired.",
            "params": [
                {
                    "name": "code",
                    "description": "A small snippet of JessieCode. Must not be an assignment.",
                    "type": "String"
                },
                {
                    "name": "funwrap",
                    "description": "If true, the code is wrapped in a function.",
                    "type": "Boolean"
                },
                {
                    "name": "varname",
                    "description": "Name of the parameter(s)",
                    "type": "String"
                },
                {
                    "name": "geonext",
                    "description": "Geonext compatibility mode.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 769,
            "description": "Traverses through the given subtree and changes all values of nodes with the replaced flag set by\n{@link JXG.JessieCode#replaceNames} to the name of the element (if not empty).",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 805,
            "description": "Traverses through the given subtree and changes all elements referenced by names through referencing them by ID.\nAn identifier is only replaced if it is not found in all scopes above the current scope and if it\nhas not been blacklisted within the codeblock determined by the given subtree.",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 845,
            "description": "Replaces node_var nodes with node_op&gt;op_execfun nodes, calling the internal $() function with the id of the\nelement accessed by the node_var node.",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "op_execfun node",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 864,
            "description": "Search the parse tree below <tt>node</tt> for <em>stationary</em> dependencies, i.e. dependencies hard coded into\nthe function.",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "result",
                    "description": "An object where the referenced elements will be stored. Access key is their id.",
                    "type": "Object"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 932,
            "description": "Resolves the lefthand side of an assignment operation",
            "params": [
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "return": {
                "description": "An object with two properties. <strong>o</strong> which contains the object, and\na string <strong>what</strong> which contains the property name.",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 985,
            "description": "Executes a parse subtree.",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Something",
                "type": "Number|String|Object|Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1324,
            "description": "Compiles a parse tree back to JessieCode.",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "js",
                    "description": "Currently ignored. Compile either to JavaScript or back to JessieCode (required for the UI).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Something"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1607,
            "description": "This is used as the global X() function.",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "JXG.Point|JXG.Text"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1616,
            "description": "This is used as the global Y() function.",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "JXG.Point|JXG.Text"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1625,
            "description": "This is used as the global V() function.",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Glider|Slider"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1634,
            "description": "This is used as the global L() function.",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "JXG.Line"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1643,
            "description": "This is used as the global dist() function.",
            "params": [
                {
                    "name": "p1",
                    "description": "",
                    "type": "JXG.Point"
                },
                {
                    "name": "p2",
                    "description": "",
                    "type": "JXG.Point"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1657,
            "description": "+ operator implementation",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number|Array|JXG.Point"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number|Array|JXG.Point"
                }
            ],
            "return": {
                "description": "",
                "type": "Number|Array"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1687,
            "description": "+ operator implementation",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number|Array|JXG.Point"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number|Array|JXG.Point"
                }
            ],
            "return": {
                "description": "",
                "type": "Number|Array"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1715,
            "description": "Multiplication of vectors and numbers",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number|Array"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number|Array"
                }
            ],
            "return": {
                "description": "(Inner) product of the given input values.",
                "type": "Number|Array"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1753,
            "description": "Implementation of the / operator.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number|Array"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number|Array"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1781,
            "description": "Implementation of the % operator.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number|Array"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number|Array"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1809,
            "description": "Pow function wrapper to allow direct usage of sliders.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number|Slider"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number|Slider"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1822,
            "description": "Implementation of the ?: operator",
            "params": [
                {
                    "name": "cond",
                    "description": "Condition",
                    "type": "Boolean"
                },
                {
                    "name": "v1",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Either v1 or v2.",
                "type": "*"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1837,
            "description": "Implementation of the delete() builtin function",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1847,
            "description": "Implementation of the use() builtin function",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1878,
            "description": "Find the first symbol to the given value from the given scope upwards.",
            "params": [
                {
                    "name": "v",
                    "description": "Value"
                },
                {
                    "name": "scope",
                    "description": "The scope, default is to start with current scope (-1).",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "-1"
                }
            ],
            "return": {
                "description": "An array containing the symbol and the scope if a symbol could be found,\nan empty array otherwise;",
                "type": "Array"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1909,
            "description": "Import modules into a JessieCode script.",
            "params": [
                {
                    "name": "module",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1917,
            "description": "Defines built in methods and constants.",
            "return": {
                "description": "BuiltIn control object",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 1993,
            "description": "Output a debugging message. Uses debug console, if available. Otherwise an HTML element with the\nid \"debug\" and an innerHTML property is used.",
            "params": [
                {
                    "name": "log",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 2007,
            "description": "Throws an exception with the given error message.",
            "params": [
                {
                    "name": "msg",
                    "description": "Error message",
                    "type": "String"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiecode.js",
            "line": 2017,
            "description": "Output a warning message using {@link JXG#debug} and precedes the message with \"Warning: \".",
            "params": [
                {
                    "name": "msg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiescript.js",
            "line": 33,
            "params": [
                {
                    "name": "string",
                    "description": "A string containing construction(s) in JSXGraph Construction Syntax.",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "Possible values seem are \"normal\" or \"macro\"",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Parameters, only used in macro mode",
                    "type": "Array"
                },
                {
                    "name": "paraIn",
                    "description": "Parameters, only used in macro mode",
                    "type": "Array"
                },
                {
                    "name": "macroName",
                    "description": "Name of the macro, only used in macro mode",
                    "type": "String"
                }
            ],
            "type": "object",
            "return": {
                "description": "An object consisting of several arrays (lines, circles, points, angles, ...) where the created elements are stored."
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/parser/jessiescript.js",
            "line": 651,
            "description": "Parses a string like<br />\n<tt>&lt;macro-name&gt; = Macro(A, B, C) { <Command in JSXGraph Construction syntax>; ...<Command in JXG-Construct syntax>; }</tt><br />\nand adds it as a macro so it can be used in the JSXGraph Construction Syntax.",
            "params": [
                {
                    "name": "string",
                    "description": "A string like the one in the methods description.",
                    "type": "String"
                }
            ],
            "references": [
                "#construct"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/file.js",
            "line": 50,
            "description": "The FileReader object bundles the file input capabilities of JSXGraph.",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/file.js",
            "line": 55,
            "description": "Opens a file using the given URL and passes the contents to {@link JXG.FileReader#parseString}",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "board",
                    "description": "Either a board or in case <tt>format</tt> equals 'raw' this has to be a callback function.",
                    "type": "JXG.Board|function"
                },
                {
                    "name": "format",
                    "description": "The expected file format. Possible values are <dl>\n<dt>raw</dt><dd>Raw text file. In this case <tt>board</tt> has to be a callback function.</dd>\n<dt>geonext</dt><dd>Geonext File <a href=\"http://www.geonext.de\">http://www.geonext.de</a></dd>\n<dt>intergeo</dt><dd>Intergeo file format <a href=\"http://www.i2geo.net\">http://www.i2geo.net</a></dd>\n<dt>tracenpoche</dt><dd>Tracenpoche construction <a href=\"http://www.tracenpoche.net\">http://www.tracenpoche.net</a></dd>\n<dt>graph</dt><dd>Graph file</dd>\n<dt>digraph</dt><dd>DiGraph file</dd>\n<dt>geogebra</dt><dd>Geogebra File <a href=\"http://www.geogebra.org\">http://www.geogebra.org</a></dd>\n<dl><dt>cdy or cinderella</dt><dd>Cinderella (<a href=\"http://www.cinderella.de/\">http://www.cinderella.de</a></dd>\n</dl>",
                    "type": "String"
                },
                {
                    "name": "async",
                    "description": "Call ajax asynchonously.",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "A function that is run when the board is ready.",
                    "type": "Function"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/file.js",
            "line": 146,
            "description": "Parses a given string according to the file format given in format.",
            "params": [
                {
                    "name": "str",
                    "description": "Contents of the file.",
                    "type": "String"
                },
                {
                    "name": "board",
                    "description": "The board the construction in the file should be loaded in.",
                    "type": "JXG.Board"
                },
                {
                    "name": "format",
                    "description": "Possible values are <dl>\n<dt>raw</dt><dd>Raw text file. In this case <tt>board</tt> has to be a callback function.</dd>\n<dt>geonext</dt><dd>Geonext File <a href=\"http://www.geonext.de\">http://www.geonext.de</a></dd>\n<dt>intergeo</dt><dd>Intergeo file format <a href=\"http://www.i2geo.net\">http://www.i2geo.net</a></dd>\n<dt>tracenpoche</dt><dd>Tracenpoche construction <a href=\"http://www.tracenpoche.net\">http://www.tracenpoche.net</a></dd>\n<dt>graph</dt><dd>Graph file</dd>\n<dt>digraph</dt><dd>DiGraph file</dd>\n<dt>geogebra</dt><dd>Geogebra File <a href=\"http://www.geogebra.org\">http://www.geogebra.org</a></dd>\n<dl><dt>cdy or cinderella</dt><dd>Cinderella (<a href=\"http://www.cinderella.de/\">http://www.cinderella.de</a></dd>\n</dl>",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 104,
            "params": [
                {
                    "name": "type",
                    "description": "the type of expression",
                    "type": "String"
                },
                {
                    "name": "m",
                    "description": "first input value",
                    "type": "String"
                },
                {
                    "name": "n",
                    "description": "second input value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "return the object, string or calculated value",
                "type": "String|Array|Number"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 404,
            "description": "JS/CC parser to convert the input expression to a working javascript function.",
            "params": [
                {
                    "name": "exp",
                    "description": "String which contains the function, expression or information",
                    "type": "String"
                },
                {
                    "name": "el",
                    "description": "Element that needs to be updated",
                    "type": "Object"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 435,
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 1407,
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 1421,
            "description": "Override JSxGraph defaults with Geogebra settings",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 1456,
            "description": "Set color properties of a geogebra element.\nSet stroke, fill, lighting, label and draft color attributes.",
            "params": [
                {
                    "name": "Data",
                    "description": "gxtEl element of which attributes are to set",
                    "type": "Object"
                },
                {
                    "name": "attr",
                    "description": "object carrying all necessary attribute values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returning the updated attr-attributes object",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 1496,
            "description": "Set the board properties.\nSet active, area, dash, draft and showinfo attributes.",
            "params": [
                {
                    "name": "gxtEl",
                    "description": "element of which attributes are to set",
                    "type": "Object"
                },
                {
                    "name": "Data",
                    "description": "element of which attributes are to set",
                    "type": "Object"
                },
                {
                    "name": "attr",
                    "description": "object containing the necessary attribute values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The attr parameter",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 1508,
            "params": [
                {
                    "name": "gxtEl",
                    "description": "element of which attributes are to set",
                    "type": "Object"
                },
                {
                    "name": "Data",
                    "description": "element of which attributes are to set",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "updated element",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 1559,
            "description": "Writing element attributes to the given object",
            "params": [
                {
                    "name": "Data",
                    "description": "expects the content of the current element",
                    "type": "Object"
                },
                {
                    "name": "attr",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "object with according attributes",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 1677,
            "description": "Searching for an element in the geogebra tree",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the element to search for",
                    "type": "String"
                },
                {
                    "name": "expr",
                    "description": "whether it is search for an expression or not",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "object with according label",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 1711,
            "description": "Check if an element is already registered in the temporary ggbElements register. If not, create and register the element.",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the element to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "newly created element",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 1764,
            "description": "Prepare expression for this.ggbParse with solving multiplications and replacing mathematical functions.",
            "params": [
                {
                    "name": "type",
                    "description": "c, s, or something else",
                    "type": "String"
                },
                {
                    "name": "exp",
                    "description": "Expression to parse and correct",
                    "type": "String"
                }
            ],
            "return": {
                "description": "correct expression with fixed function and multiplication",
                "type": "String"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 1855,
            "description": "Searching for an element in the geogebra tree",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 1897,
            "description": "Searching for an element in the geogebra tree",
            "params": [
                {
                    "name": "output",
                    "description": "ggb element whose attributes are to parse",
                    "type": "Object"
                },
                {
                    "name": "input",
                    "description": "list of all input elements",
                    "type": "Array"
                },
                {
                    "name": "cmd",
                    "description": "output construction method",
                    "type": "String"
                }
            ],
            "return": {
                "description": "return newly created element or false",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 3024,
            "description": "Reading the elements of a geogebra file",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 3115,
            "description": "Clean the utf8-symbols in a Geogebra expression in JavaScript syntax",
            "params": [
                {
                    "name": "exp",
                    "description": "string to clean",
                    "type": "String"
                }
            ],
            "return": {
                "description": "replaced string",
                "type": "String"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 3134,
            "description": "Extracting the packed geogebra file in order to return the \"blank\" xml-tree for further parsing.",
            "params": [
                {
                    "name": "fileStr",
                    "description": "archive containing geogebra.xml-file or raw input string (eg. xml-tree)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "content of geogebra.xml-file if an archive was passed in",
                "type": "String"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geogebra.js",
            "line": 3175,
            "description": "Checking if a parameter is a Geogebra vector (array with length 3)",
            "params": [
                {
                    "name": "v",
                    "description": "possible Geogebra vector",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geonext.js",
            "line": 97,
            "description": "Retrieves data by TagName from an XML node.",
            "params": [
                {
                    "name": "node",
                    "description": "The Node that contains the data we want to get.",
                    "type": "Object"
                },
                {
                    "name": "tag",
                    "description": "The Name of the tag we are looking for.",
                    "type": "String"
                },
                {
                    "name": "idx",
                    "description": "getElementsByTagName returns an array; This parameter decides which element to use.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "fc",
                    "description": "If True, the result will be the <tt>data</tt> of <tt>firstChild</tt> instead of the result node.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "The gathered data",
                "type": "Object|Array|String"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geonext.js",
            "line": 132,
            "description": "Set color properties of a geonext element.\nSet stroke, fill, lighting, label and draft color attributes.",
            "params": [
                {
                    "name": "gxtEl",
                    "description": "element of which attributes are to set",
                    "type": "Object"
                },
                {
                    "name": "Data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns gxtEl",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geonext.js",
            "line": 204,
            "description": "Set the defining properties of a geonext element.\nWriting the nodeName to ident; setting the name attribute and defining the element id.",
            "params": [
                {
                    "name": "gxtEl",
                    "description": "element of which attributes are to set",
                    "type": "Object"
                },
                {
                    "name": "Data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geonext.js",
            "line": 236,
            "description": "Transforms the Geonext properties to jsxgraph properties",
            "params": [
                {
                    "name": "gxtEl",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "gxtEl",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/geonext.js",
            "line": 1091,
            "description": "Reading the elements of a geonext file",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/intergeo.js",
            "line": 75,
            "description": "this.objects holds all objects from the XML file.\nEvery object gets an attribute \"exists\"",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/intergeo.js",
            "line": 122,
            "description": "Element part",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/intergeo.js",
            "line": 133,
            "description": "Points are created instantly via create",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/intergeo.js",
            "line": 219,
            "description": "Line data is stored in an array\nfor further access during the reading of constraints.\nThere, id and name are needed.",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/intergeo.js",
            "line": 257,
            "description": "Circle / conic data is stored in an array\nfor further access during the reading of constraints.\nThere, id and name are needed.\nConcretely, the circle   (x-1)^2 + (y-3)^2 = 4   has matrix\n(  1  0 -1 )\n(  0  1 -3 )\n( -1 -3  6 )\n\nIn general\nAx^2+Bxy+Cy^2+Dx+Ey+F = 0\nis stored as\n(  A   B/2  D/2 )\n(  B/2  C   E/2 )\n(  D/2 E/2  F )\n\n Mx = D/A\n My = E/C\n r = A*Mx^2+B*My^2-F",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/intergeo.js",
            "line": 311,
            "description": "Constraint part",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/intergeo.js",
            "line": 441,
            "description": "Direct construction of a line\nin read elements",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/intergeo.js",
            "line": 836,
            "description": "The angular bisectors of two line [c1,a1,b1] and [c2,a2,b2] are determined by the equation:\n(a1*x+b1*y+c1*z)/sqrt(a1^2+b1^2) = +/- (a2*x+b2*y+c2*z)/sqrt(a2^2+b2^2)",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/intergeo.js",
            "line": 935,
            "description": "Extract the xml-code as String from the zipped Intergeo archive.",
            "params": [
                {
                    "name": "fileStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "xml code",
                "type": "String"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/intergeo.js",
            "line": 969,
            "description": "Displpay part",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/reader/sketch.js",
            "line": 119,
            "description": "Generates {@link JXG.JessieCode} code from a sketchometry construction step.",
            "params": [
                {
                    "name": "step",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "One of the JXG.GENTYPE_* constant values",
                            "type": "Number"
                        },
                        {
                            "name": "args",
                            "description": "Mostly visual properties",
                            "type": "Array"
                        },
                        {
                            "name": "src_ids",
                            "description": "Parent element ids",
                            "type": "Array"
                        },
                        {
                            "name": "dest_sub_ids",
                            "description": "Ids for subelements, e.g. the center of a circumcircle or the baseline\nof a glider",
                            "type": "Array"
                        },
                        {
                            "name": "dest_id",
                            "description": "Id of the generated main element",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                },
                {
                    "name": "step_log",
                    "description": "The complete step log",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "JessieCode to set and reset the step.",
                "type": "Array"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 53,
            "fileoverview": "JSXGraph can use various technologies to render the contents of a construction, e.g.\nSVG, VML, and HTML5 Canvas. To accomplish this, The rendering and the logic and control mechanisms\nare completely separated from each other. Every rendering technology has it's own class, called\nRenderer, e.g. SVGRenderer for SVG, the same for VML and Canvas. The common base for all available\nrenderers is the class AbstractRenderer defined in this file.",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 129,
            "description": "The vertical offset for {@link Text} elements. Every {@link Text} element will\nbe placed this amount of pixels below the user given coordinates.",
            "itemtype": "property",
            "name": "vOffsetText",
            "type": "number",
            "default": "8",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 139,
            "description": "If this property is set to <tt>true</tt> the visual properties of the elements are updated\non every update. Visual properties means: All the stuff stored in the\n{@link JXG.GeometryElement#visProp} property won't be set if enhancedRendering is <tt>false</tt>",
            "itemtype": "property",
            "name": "enhancedRendering",
            "type": "Boolean",
            "default": "true",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 150,
            "description": "The HTML element that stores the JSXGraph board in it.",
            "itemtype": "property",
            "name": "container",
            "type": "Node",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 157,
            "description": "This is used to easily determine which renderer we are using.\nPossible values are 'svg', 'vml', 'canvas', 'no'.",
            "itemtype": "property",
            "name": "type",
            "example": [
                "\n\n    if (board.renderer.type === 'vml') {\n       // do something\n    }"
            ],
            "type": "String",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 171,
            "description": "True if the browsers' SVG engine supports foreignObject.\nNot supporting browsers are IE 9 - 11.",
            "itemtype": "property",
            "name": "supportsForeignObject",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 190,
            "description": "Update visual properties, but only if {@link JXG.AbstractRenderer#enhancedRendering} or <tt>enhanced</tt> is set to true.",
            "itemtype": "method",
            "name": "_updateVisual",
            "params": [
                {
                    "name": "element",
                    "description": "The element to update",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "not",
                    "description": "Select properties you don't want to be updated: <tt>{fill: true, dash: true}</tt> updates\neverything except for fill and dash. Possible values are <tt>stroke, fill, dash, shadow, gradient</tt>.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "enhanced",
                    "description": "If true, {@link JXG.AbstractRenderer#enhancedRendering} is assumed to be true.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 238,
            "description": "Draws a point on the {@link JXG.Board}.",
            "itemtype": "method",
            "name": "drawPoint",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Point} object that has to be drawn.",
                    "type": "JXG.Point"
                }
            ],
            "references": [
                "Point",
                "JXG.Point",
                "JXG.AbstractRenderer#updatePoint",
                "JXG.AbstractRenderer#changePointStyle"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 277,
            "description": "Updates visual appearance of the renderer element assigned to the given {@link JXG.Point}.",
            "itemtype": "method",
            "name": "updatePoint",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Point} object, that has to be updated.",
                    "type": "JXG.Point"
                }
            ],
            "references": [
                "Point",
                "JXG.Point",
                "JXG.AbstractRenderer#drawPoint",
                "JXG.AbstractRenderer#changePointStyle"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 308,
            "description": "Changes the style of a {@link JXG.Point}. This is required because the point styles differ in what\nelements have to be drawn, e.g. if the point is marked by a \"x\" or a \"+\" two lines are drawn, if\nit's marked by spot a circle is drawn. This method removes the old renderer element(s) and creates\nthe new one(s).",
            "itemtype": "method",
            "name": "changePointStyle",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Point} object, that's style is changed.",
                    "type": "JXG.Point"
                }
            ],
            "references": [
                "Point",
                "JXG.Point",
                "JXG.AbstractRenderer#updatePoint",
                "JXG.AbstractRenderer#drawPoint"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 346,
            "description": "Draws a line on the {@link JXG.Board}.",
            "itemtype": "method",
            "name": "drawLine",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a line object, that has to be drawn.",
                    "type": "JXG.Line"
                }
            ],
            "references": [
                "Line",
                "JXG.Line",
                "JXG.AbstractRenderer#updateLine"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 361,
            "description": "Updates visual appearance of the renderer element assigned to the given {@link JXG.Line}.",
            "itemtype": "method",
            "name": "updateLine",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to the {@link JXG.Line} object that has to be updated.",
                    "type": "JXG.Line"
                }
            ],
            "references": [
                "Line",
                "JXG.Line",
                "JXG.AbstractRenderer#drawLine"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 431,
            "description": "Creates a rendering node for ticks added to a line.",
            "itemtype": "method",
            "name": "drawTicks",
            "params": [
                {
                    "name": "element",
                    "description": "A arbitrary line.",
                    "type": "JXG.Line"
                }
            ],
            "references": [
                "Line",
                "Ticks",
                "JXG.Line",
                "JXG.Ticks",
                "JXG.AbstractRenderer#updateTicks"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 447,
            "description": "Update {@link Ticks} on a {@link JXG.Line}. This method is only a stub and has to be implemented\nin any descendant renderer class.",
            "itemtype": "method",
            "name": "updateTicks",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of a ticks object that has to be updated.",
                    "type": "JXG.Ticks"
                }
            ],
            "references": [
                "Line",
                "Ticks",
                "JXG.Line",
                "JXG.Ticks",
                "JXG.AbstractRenderer#drawTicks"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 465,
            "description": "Draws a {@link JXG.Curve} on the {@link JXG.Board}.",
            "itemtype": "method",
            "name": "drawCurve",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a graph object, that has to be plotted.",
                    "type": "JXG.Curve"
                }
            ],
            "references": [
                "Curve",
                "JXG.Curve",
                "JXG.AbstractRenderer#updateCurve"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 481,
            "description": "Updates visual appearance of the renderer element assigned to the given {@link JXG.Curve}.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Curve} object, that has to be updated.",
                    "type": "JXG.Curve"
                }
            ],
            "itemtype": "method",
            "name": "updateCurve",
            "references": [
                "Curve",
                "JXG.Curve",
                "JXG.AbstractRenderer#drawCurve"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 506,
            "description": "Draws a {@link JXG.Circle}",
            "itemtype": "method",
            "name": "drawEllipse",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Circle} object that has to be drawn.",
                    "type": "JXG.Circle"
                }
            ],
            "references": [
                "Circle",
                "JXG.Circle",
                "JXG.AbstractRenderer#updateEllipse"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 521,
            "description": "Updates visual appearance of a given {@link JXG.Circle} on the {@link JXG.Board}.",
            "itemtype": "method",
            "name": "updateEllipse",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Circle} object, that has to be updated.",
                    "type": "JXG.Circle"
                }
            ],
            "references": [
                "Circle",
                "JXG.Circle",
                "JXG.AbstractRenderer#drawEllipse"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 549,
            "description": "Draws a {@link JXG.Polygon} on the {@link JXG.Board}.",
            "itemtype": "method",
            "name": "drawPolygon",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a Polygon object, that is to be drawn.",
                    "type": "JXG.Polygon"
                }
            ],
            "references": [
                "Polygon",
                "JXG.Polygon",
                "JXG.AbstractRenderer#updatePolygon"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 564,
            "description": "Updates properties of a {@link JXG.Polygon}'s rendering node.",
            "itemtype": "method",
            "name": "updatePolygon",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Polygon} object, that has to be updated.",
                    "type": "JXG.Polygon"
                }
            ],
            "references": [
                "Polygon",
                "JXG.Polygon",
                "JXG.AbstractRenderer#drawPolygon"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 604,
            "description": "Shows a small copyright notice in the top left corner of the board.",
            "itemtype": "method",
            "name": "displayCopyright",
            "params": [
                {
                    "name": "str",
                    "description": "The copyright notice itself",
                    "type": "String"
                },
                {
                    "name": "fontsize",
                    "description": "Size of the font the copyright notice is written in",
                    "type": "Number"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 613,
            "description": "An internal text is a {@link JXG.Text} element which is drawn using only\nthe given renderer but no HTML. This method is only a stub, the drawing\nis done in the special renderers.",
            "itemtype": "method",
            "name": "drawInternalText",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Text} object",
                    "type": "JXG.Text"
                }
            ],
            "references": [
                "Text",
                "JXG.Text",
                "JXG.AbstractRenderer#updateInternalText",
                "JXG.AbstractRenderer#drawText",
                "JXG.AbstractRenderer#updateText",
                "JXG.AbstractRenderer#updateTextStyle"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 629,
            "description": "Updates visual properties of an already existing {@link JXG.Text} element.",
            "itemtype": "method",
            "name": "updateInternalText",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to an {@link JXG.Text} object, that has to be updated.",
                    "type": "JXG.Text"
                }
            ],
            "references": [
                "Text",
                "JXG.Text",
                "JXG.AbstractRenderer#drawInternalText",
                "JXG.AbstractRenderer#drawText",
                "JXG.AbstractRenderer#updateText",
                "JXG.AbstractRenderer#updateTextStyle"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 643,
            "description": "Displays a {@link JXG.Text} on the {@link JXG.Board} by putting a HTML div over it.",
            "itemtype": "method",
            "name": "drawText",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to an {@link JXG.Text} object, that has to be displayed",
                    "type": "JXG.Text"
                }
            ],
            "references": [
                "Text",
                "JXG.Text",
                "JXG.AbstractRenderer#drawInternalText",
                "JXG.AbstractRenderer#updateText",
                "JXG.AbstractRenderer#updateInternalText",
                "JXG.AbstractRenderer#updateTextStyle"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 697,
            "description": "Updates visual properties of an already existing {@link JXG.Text} element.",
            "itemtype": "method",
            "name": "updateText",
            "params": [
                {
                    "name": "el",
                    "description": "Reference to an {@link JXG.Text} object, that has to be updated.",
                    "type": "JXG.Text"
                }
            ],
            "references": [
                "Text",
                "JXG.Text",
                "JXG.AbstractRenderer#drawText",
                "JXG.AbstractRenderer#drawInternalText",
                "JXG.AbstractRenderer#updateInternalText",
                "JXG.AbstractRenderer#updateTextStyle"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 800,
            "description": "Updates font-size, color and opacity propertiey and CSS style properties of a {@link JXG.Text} node.\nThis function is also called by highlight() and nohighlight().",
            "itemtype": "method",
            "name": "updateTextStyle",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to the {@link JXG.Text} object, that has to be updated.",
                    "type": "JXG.Text"
                },
                {
                    "name": "doHighlight",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "references": [
                "Text",
                "JXG.Text",
                "JXG.AbstractRenderer#drawText",
                "JXG.AbstractRenderer#drawInternalText",
                "JXG.AbstractRenderer#updateText",
                "JXG.AbstractRenderer#updateInternalText",
                "JXG.AbstractRenderer#updateInternalTextStyle"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 859,
            "description": "Set color and opacity of internal texts.\nThis method is used for Canvas and VML.\nSVG needs its own version.",
            "itemtype": "method",
            "name": "updateInternalTextStyle",
            "access": "private",
            "tagname": "",
            "references": [
                "JXG.AbstractRenderer#updateTextStyle",
                "JXG.SVGRenderer#updateInternalTextStyle"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 877,
            "description": "Draws an {@link JXG.Image} on a board; This is just a template that has to be implemented by special\nrenderers.",
            "itemtype": "method",
            "name": "drawImage",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to the image object that is to be drawn",
                    "type": "JXG.Image"
                }
            ],
            "references": [
                "Image",
                "JXG.Image",
                "JXG.AbstractRenderer#updateImage"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 888,
            "description": "Updates the properties of an {@link JXG.Image} element.",
            "itemtype": "method",
            "name": "updateImage",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to an {@link JXG.Image} object, that has to be updated.",
                    "type": "JXG.Image"
                }
            ],
            "references": [
                "Image",
                "JXG.Image",
                "JXG.AbstractRenderer#drawImage"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 906,
            "description": "Multiplication of transformations without updating. That means, at that point it is expected that the\nmatrices contain numbers only. First, the origin in user coords is translated to <tt>(0,0)</tt> in screen\ncoords. Then, the stretch factors are divided out. After the transformations in user coords, the stretch\nfactors are multiplied in again, and the origin in user coords is translated back to its position. This\nmethod does not have to be implemented in a new renderer.",
            "itemtype": "method",
            "name": "joinTransforms",
            "params": [
                {
                    "name": "element",
                    "description": "A JSXGraph element. We only need its board property.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "transformations",
                    "description": "An array of JXG.Transformations.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A matrix represented by a two dimensional array of numbers.",
                "type": "Array"
            },
            "references": [
                "JXG.AbstractRenderer#transformImage"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 964,
            "description": "Applies transformations on images and text elements. This method is just a stub and has to be implemented in\nall descendant classes where text and image transformations are to be supported.",
            "itemtype": "method",
            "name": "transformImage",
            "params": [
                {
                    "name": "element",
                    "description": "A {@link JXG.Image} or {@link JXG.Text} object.",
                    "type": "JXG.Image|JXG.Text"
                },
                {
                    "name": "transformations",
                    "description": "An array of {@link JXG.Transformation} objects. This is usually the\ntransformations property of the given element <tt>el</tt>.",
                    "type": "Array"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 975,
            "description": "If the URL of the image is provided by a function the URL has to be updated during updateImage()",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to an image object.",
                    "type": "JXG.Image"
                }
            ],
            "itemtype": "method",
            "name": "updateImageURL",
            "references": [
                "JXG.AbstractRenderer#updateImage"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 984,
            "description": "Updates CSS style properties of a {@link JXG.Image} node.\nIn SVGRenderer opacity is the only available style element.\nThis function is called by highlight() and nohighlight().\nThis function works for VML.\nIt does not work for Canvas.\nSVGRenderer overwrites this method.",
            "itemtype": "method",
            "name": "updateImageStyle",
            "params": [
                {
                    "name": "el",
                    "description": "Reference to the {@link JXG.Image} object, that has to be updated.",
                    "type": "JXG.Text"
                },
                {
                    "name": "doHighlight",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "references": [
                "Image",
                "JXG.Image",
                "JXG.AbstractRenderer#highlight",
                "JXG.AbstractRenderer#noHighlight"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1009,
            "description": "Appends a node to a specific layer level. This is just an abstract method and has to be implemented\nin all renderers that want to use the <tt>createPrim</tt> model to draw.",
            "itemtype": "method",
            "name": "appendChildPrim",
            "params": [
                {
                    "name": "node",
                    "description": "A DOM tree node.",
                    "type": "Node"
                },
                {
                    "name": "level",
                    "description": "The layer the node is attached to. This is the index of the layer in\n{@link JXG.SVGRenderer#layer} or the <tt>z-index</tt> style property of the node in VMLRenderer.",
                    "type": "Number"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1020,
            "description": "Stores the rendering nodes. This is an abstract method which has to be implemented in all renderers that use\nthe <tt>createPrim</tt> method.",
            "itemtype": "method",
            "name": "appendNodesToElement",
            "params": [
                {
                    "name": "element",
                    "description": "A JSXGraph element.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "type",
                    "description": "The XML node name. Only used in VMLRenderer.",
                    "type": "String"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1030,
            "description": "Creates a node of a given type with a given id.",
            "itemtype": "method",
            "name": "createPrim",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the node to create.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "Set the id attribute to this.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Reference to the created node.",
                "type": "Node"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1043,
            "description": "Removes an element node. Just a stub.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "node",
                    "description": "The node to remove.",
                    "type": "Node"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1051,
            "description": "Can be used to create the nodes to display arrows. This is an abstract method which has to be implemented\nin any descendant renderer.",
            "itemtype": "method",
            "name": "makeArrows",
            "params": [
                {
                    "name": "element",
                    "description": "The element the arrows are to be attached to.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1060,
            "description": "Updates an ellipse node primitive. This is an abstract method which has to be implemented in all renderers\nthat use the <tt>createPrim</tt> method.",
            "itemtype": "method",
            "name": "updateEllipsePrim",
            "params": [
                {
                    "name": "node",
                    "description": "Reference to the node.",
                    "type": "Node"
                },
                {
                    "name": "x",
                    "description": "Centre X coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Centre Y coordinate",
                    "type": "Number"
                },
                {
                    "name": "rx",
                    "description": "The x-axis radius.",
                    "type": "Number"
                },
                {
                    "name": "ry",
                    "description": "The y-axis radius.",
                    "type": "Number"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1073,
            "description": "Refreshes a line node. This is an abstract method which has to be implemented in all renderers that use\nthe <tt>createPrim</tt> method.",
            "itemtype": "method",
            "name": "updateLinePrim",
            "params": [
                {
                    "name": "node",
                    "description": "The node to be refreshed.",
                    "type": "Node"
                },
                {
                    "name": "p1x",
                    "description": "The first point's x coordinate.",
                    "type": "Number"
                },
                {
                    "name": "p1y",
                    "description": "The first point's y coordinate.",
                    "type": "Number"
                },
                {
                    "name": "p2x",
                    "description": "The second point's x coordinate.",
                    "type": "Number"
                },
                {
                    "name": "p2y",
                    "description": "The second point's y coordinate.",
                    "type": "Number"
                },
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1087,
            "description": "Updates a path element. This is an abstract method which has to be implemented in all renderers that use\nthe <tt>createPrim</tt> method.",
            "itemtype": "method",
            "name": "updatePathPrim",
            "params": [
                {
                    "name": "node",
                    "description": "The path node.",
                    "type": "Node"
                },
                {
                    "name": "pathString",
                    "description": "A string formatted like e.g. <em>'M 1,2 L 3,1 L5,5'</em>. The format of the string\ndepends on the rendering engine.",
                    "type": "String"
                },
                {
                    "name": "board",
                    "description": "Reference to the element's board.",
                    "type": "JXG.Board"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1099,
            "description": "Builds a path data string to draw a point with a face other than <em>rect</em> and <em>circle</em>. Since\nthe format of such a string usually depends on the renderer this method\nis only an abstract method. Therefore, it has to be implemented in the descendant renderer itself unless\nthe renderer does not use the createPrim interface but the draw* interfaces to paint.",
            "itemtype": "method",
            "name": "updatePathStringPoint",
            "params": [
                {
                    "name": "element",
                    "description": "The point element",
                    "type": "JXG.Point"
                },
                {
                    "name": "size",
                    "description": "A positive number describing the size. Usually the half of the width and height of\nthe drawn point.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "A string describing the point's face. This method only accepts the shortcut version of\neach possible face: <tt>x, +, <>, ^, v, >, <",
                    "type": "String"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1114,
            "description": "Builds a path data string from a {@link JXG.Curve} element. Since the path data strings heavily depend on the\nunderlying rendering technique this method is just a stub. Although such a path string is of no use for the\nCanvasRenderer, this method is used there to draw a path directly.",
            "itemtype": "method",
            "name": "updatePathStringPrim",
            "params": [
                {
                    "name": "element",
                    "description": ""
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1124,
            "description": "Builds a path data string from a {@link JXG.Curve} element such that the curve looks like hand drawn. Since\nthe path data strings heavily depend on the underlying rendering technique this method is just a stub.\nAlthough such a path string is of no use for the CanvasRenderer, this method is used there to draw a path\ndirectly.",
            "itemtype": "method",
            "name": "updatePathStringBezierPrim",
            "params": [
                {
                    "name": "element",
                    "description": ""
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1135,
            "description": "Update a polygon primitive.",
            "itemtype": "method",
            "name": "updatePolygonPrim",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "element",
                    "description": "A JSXGraph element of type {@link JXG.Polygon}",
                    "type": "JXG.Polygon"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1144,
            "description": "Update a rectangle primitive. This is used only for points with face of type 'rect'.",
            "itemtype": "method",
            "name": "updateRectPrim",
            "params": [
                {
                    "name": "node",
                    "description": "The node yearning to be updated.",
                    "type": "Node"
                },
                {
                    "name": "x",
                    "description": "x coordinate of the top left vertex.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y coordinate of the top left vertex.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The rectangle's height.",
                    "type": "Number"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1160,
            "description": "Sets a node's attribute.",
            "itemtype": "method",
            "name": "setPropertyPrim",
            "params": [
                {
                    "name": "node",
                    "description": "The node that is to be updated.",
                    "type": "Node"
                },
                {
                    "name": "key",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "New value for the attribute.",
                    "type": "String"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1170,
            "description": "Shows a hidden element on the canvas; Only a stub, requires implementation in the derived renderer.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to the object that has to appear.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "references": [
                "JXG.AbstractRenderer#hide"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1179,
            "description": "Hides an element on the canvas; Only a stub, requires implementation in the derived renderer.",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to the geometry element that has to disappear.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "references": [
                "JXG.AbstractRenderer#show"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1188,
            "description": "Sets the buffering as recommended by SVGWG. Until now only Opera supports this and will be ignored by other\nbrowsers. Although this feature is only supported by SVG we have this method in {@link JXG.AbstractRenderer}\nbecause it is called from outside the renderer.",
            "itemtype": "method",
            "name": "setBuffering",
            "params": [
                {
                    "name": "node",
                    "description": "The SVG DOM Node which buffering type to update.",
                    "type": "Node"
                },
                {
                    "name": "type",
                    "description": "Either 'auto', 'dynamic', or 'static'. For an explanation see\n  {@link http://www.w3.org/TR/SVGTiny12/painting.html#BufferedRenderingProperty}.",
                    "type": "String"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1200,
            "description": "Sets an element's dash style.",
            "itemtype": "method",
            "name": "setDashStyle",
            "params": [
                {
                    "name": "element",
                    "description": "An JSXGraph element.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1208,
            "description": "Puts an object into draft mode, i.e. it's visual appearance will be changed. For GEONE<sub>x</sub>T backwards\ncompatibility.",
            "itemtype": "method",
            "name": "setDraft",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of the object that is in draft mode.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1235,
            "description": "Puts an object from draft mode back into normal mode.",
            "itemtype": "method",
            "name": "removeDraft",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of the object that no longer is in draft mode.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1253,
            "description": "Sets up nodes for rendering a gradient fill.",
            "itemtype": "method",
            "name": "setGradient",
            "params": [
                {
                    "name": "element",
                    "description": ""
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1261,
            "description": "Updates the gradient fill.",
            "itemtype": "method",
            "name": "updateGradient",
            "params": [
                {
                    "name": "element",
                    "description": "An JSXGraph element with an area that can be filled.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1269,
            "description": "Sets an objects fill color.",
            "itemtype": "method",
            "name": "setObjectFillColor",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of the object that wants a new fill color.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "color",
                    "description": "Color in a HTML/CSS compatible format. If you don't want any fill color at all, choose\n'none'.",
                    "type": "String"
                },
                {
                    "name": "opacity",
                    "description": "Opacity of the fill color. Must be between 0 and 1.",
                    "type": "Number"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1280,
            "description": "Changes an objects stroke color to the given color.",
            "itemtype": "method",
            "name": "setObjectStrokeColor",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of the {@link JXG.GeometryElement} that gets a new stroke\ncolor.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "color",
                    "description": "Color value in a HTML compatible format, e.g. <strong>#00ff00</strong> or\n<strong>green</strong> for green.",
                    "type": "String"
                },
                {
                    "name": "opacity",
                    "description": "Opacity of the fill color. Must be between 0 and 1.",
                    "type": "Number"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1292,
            "description": "Sets an element's stroke width.",
            "itemtype": "method",
            "name": "setObjectStrokeWidth",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to the geometry element.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "width",
                    "description": "The new stroke width to be assigned to the element.",
                    "type": "Number"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1301,
            "description": "Sets the shadow properties to a geometry element. This method is only a stub, it is implemented in the actual\nrenderers.",
            "itemtype": "method",
            "name": "setShadow",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a geometry object, that should get a shadow",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1310,
            "description": "Highlights an object, i.e. changes the current colors of the object to its highlighting colors",
            "itemtype": "method",
            "name": "highlight",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of the object that will be highlighted.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "Reference to the renderer",
                "type": "JXG.AbstractRenderer"
            },
            "references": [
                "JXG.AbstractRenderer#updateTextStyle"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1346,
            "description": "Uses the normal colors of an object, i.e. the opposite of {@link JXG.AbstractRenderer#highlight}.",
            "itemtype": "method",
            "name": "noHighlight",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of the object that will get its normal colors.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "Reference to the renderer",
                "type": "JXG.AbstractRenderer"
            },
            "references": [
                "JXG.AbstractRenderer#updateTextStyle"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1384,
            "description": "Stop redraw. This method is called before every update, so a non-vector-graphics based renderer can use this\nmethod to delete the contents of the drawing panel. This is an abstract method every descendant renderer\nshould implement, if appropriate.",
            "itemtype": "method",
            "name": "suspendRedraw",
            "references": [
                "JXG.AbstractRenderer#unsuspendRedraw"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1394,
            "description": "Restart redraw. This method is called after updating all the rendering node attributes.",
            "itemtype": "method",
            "name": "unsuspendRedraw",
            "references": [
                "JXG.AbstractRenderer#suspendRedraw"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1402,
            "description": "The tiny zoom bar shown on the bottom of a board (if showNavigation on board creation is true).",
            "itemtype": "method",
            "name": "drawZoomBar",
            "params": [
                {
                    "name": "board",
                    "description": "Reference to a JSXGraph board.",
                    "type": "JXG.Board"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1494,
            "description": "Wrapper for getElementById for maybe other renderers which elements are not directly accessible by DOM\nmethods like document.getElementById().",
            "itemtype": "method",
            "name": "getElementById",
            "params": [
                {
                    "name": "id",
                    "description": "Unique identifier for element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Reference to a JavaScript object. In case of SVG/VMLRenderer it's a reference to a SVG/VML\nnode.",
                "type": "Object"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1507,
            "description": "Remove an element and provide a function that inserts it into its original position. This method\nis taken from this article {@link https://developers.google.com/speed/articles/javascript-dom}.",
            "itemtype": "method",
            "name": "removeToInsertLater",
            "author": "KeeKim Heng, Google Web Developer",
            "params": [
                {
                    "name": "element",
                    "description": "The element to be temporarily removed",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "A function that inserts the element into its original position",
                "type": "Function"
            },
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1531,
            "description": "Resizes the rendering element",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "w",
                    "description": "New width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "New height",
                    "type": "Number"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1540,
            "description": "Create crosshair elements (Fadenkreuz) for presentations.",
            "itemtype": "method",
            "name": "createTouchpoints",
            "params": [
                {
                    "name": "n",
                    "description": "Number of crosshairs.",
                    "type": "Number"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1548,
            "description": "Show a specific crosshair.",
            "itemtype": "method",
            "name": "showTouchpoint",
            "params": [
                {
                    "name": "i",
                    "description": "Number of the crosshair to show",
                    "type": "Number"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1556,
            "description": "Hide a specific crosshair.",
            "itemtype": "method",
            "name": "hideTouchpoint",
            "params": [
                {
                    "name": "i",
                    "description": "Number of the crosshair to show",
                    "type": "Number"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1564,
            "description": "Move a specific crosshair.",
            "itemtype": "method",
            "name": "updateTouchpoint",
            "params": [
                {
                    "name": "i",
                    "description": "Number of the crosshair to show",
                    "type": "Number"
                },
                {
                    "name": "pos",
                    "description": "New positon in screen coordinates",
                    "type": "Array"
                }
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/abstract.js",
            "line": 1573,
            "description": "Convert SVG construction to canvas.\nOnly available on SVGRenderer.",
            "itemtype": "method",
            "name": "dumpToCanvas",
            "references": [
                "JXG.SVGRenderer#dumpToCanvas"
            ],
            "class": "JXG.AbstractRenderer"
        },
        {
            "file": "src/renderer/canvas.js",
            "line": 110,
            "description": "Draws a filled polygon.",
            "itemtype": "method",
            "name": "_drawFilledPolygon",
            "params": [
                {
                    "name": "shape",
                    "description": "A matrix presented by a two dimensional array of numbers.",
                    "type": "Array"
                }
            ],
            "references": [
                "JXG.AbstractRenderer#makeArrows"
            ],
            "access": "private",
            "tagname": "",
            "class": "JXG.CanvasRenderer"
        },
        {
            "file": "src/renderer/canvas.js",
            "line": 135,
            "description": "Sets the fill color and fills an area.",
            "itemtype": "method",
            "name": "_fill",
            "params": [
                {
                    "name": "element",
                    "description": "An arbitrary JSXGraph element, preferably one with an area.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JXG.CanvasRenderer"
        },
        {
            "file": "src/renderer/canvas.js",
            "line": 152,
            "description": "Rotates a point around <tt>(0, 0)</tt> by a given angle.",
            "itemtype": "method",
            "name": "_rotatePoint",
            "params": [
                {
                    "name": "angle",
                    "description": "An angle, given in rad.",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "X coordinate of the point.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y coordinate of the point.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An array containing the x and y coordinate of the rotated point.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.CanvasRenderer"
        },
        {
            "file": "src/renderer/canvas.js",
            "line": 169,
            "description": "Rotates an array of points around <tt>(0, 0)</tt>.",
            "itemtype": "method",
            "name": "_rotateShape",
            "params": [
                {
                    "name": "shape",
                    "description": "An array of array of point coordinates.",
                    "type": "Array"
                },
                {
                    "name": "angle",
                    "description": "The angle in rad the points are rotated by.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Array of array of two dimensional point coordinates.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.CanvasRenderer"
        },
        {
            "file": "src/renderer/canvas.js",
            "line": 192,
            "description": "Sets color and opacity for filling and stroking.\ntype is the attribute from visProp and targetType the context[targetTypeStyle].\nThis is necessary, because the fill style of a text is set by the stroke attributes of the text element.",
            "itemtype": "method",
            "name": "_setColor",
            "params": [
                {
                    "name": "element",
                    "description": "Any JSXGraph element.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "type",
                    "description": "Either <em>fill</em> or <em>stroke</em>.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'stroke'"
                },
                {
                    "name": "targetType",
                    "description": "(optional) Either <em>fill</em> or <em>stroke</em>.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "type"
                }
            ],
            "return": {
                "description": "If the color could be set, <tt>true</tt> is returned.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.CanvasRenderer"
        },
        {
            "file": "src/renderer/canvas.js",
            "line": 258,
            "description": "Sets color and opacity for drawing paths and lines and draws the paths and lines.",
            "itemtype": "method",
            "name": "_stroke",
            "params": [
                {
                    "name": "element",
                    "description": "An JSXGraph element with a stroke.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JXG.CanvasRenderer"
        },
        {
            "file": "src/renderer/canvas.js",
            "line": 285,
            "description": "Translates a set of points.",
            "itemtype": "method",
            "name": "_translateShape",
            "params": [
                {
                    "name": "shape",
                    "description": "An array of point coordinates.",
                    "type": "Array"
                },
                {
                    "name": "x",
                    "description": "Translation in X direction.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Translation in Y direction.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "An array of translated point coordinates.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.CanvasRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 41,
            "fileoverview": "JSXGraph can use various technologies to render the contents of a construction, e.g.\nSVG, VML, and HTML5 Canvas. To accomplish this, The rendering and the logic and control mechanisms\nare completely separated from each other. Every rendering technology has it's own class, called\nRenderer, e.g. SVGRenderer for SVG, the same for VML and Canvas. The common base for all available\nrenderers is the class AbstractRenderer.",
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 60,
            "description": "If this property is set to <tt>true</tt> the visual properties of the elements are updated\non every update. Visual properties means: All the stuff stored in the\n{@link JXG.GeometryElement#visProp} property won't be set if enhancedRendering is <tt>false</tt>",
            "type": "Boolean",
            "default": "true",
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 69,
            "description": "This is used to easily determine which renderer we are using",
            "example": [
                " if (board.renderer.type === 'vml') {\n    // do something\n}"
            ],
            "type": "String",
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 84,
            "description": "Draws a point on the {@link JXG.Board}.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Point} object that has to be drawn.",
                    "type": "JXG.Point"
                }
            ],
            "references": [
                "Point",
                "JXG.Point",
                "JXG.AbstractRenderer#updatePoint",
                "JXG.AbstractRenderer#changePointStyle"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 94,
            "description": "Updates visual appearance of the renderer element assigned to the given {@link JXG.Point}.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Point} object, that has to be updated.",
                    "type": "JXG.Point"
                }
            ],
            "references": [
                "Point",
                "JXG.Point",
                "JXG.AbstractRenderer#drawPoint",
                "JXG.AbstractRenderer#changePointStyle"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 104,
            "description": "Changes the style of a {@link JXG.Point}. This is required because the point styles differ in what\nelements have to be drawn, e.g. if the point is marked by a \"x\" or a \"+\" two lines are drawn, if\nit's marked by spot a circle is drawn. This method removes the old renderer element(s) and creates\nthe new one(s).",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Point} object, that's style is changed.",
                    "type": "JXG.Point"
                }
            ],
            "references": [
                "Point",
                "JXG.Point",
                "JXG.AbstractRenderer#updatePoint",
                "JXG.AbstractRenderer#drawPoint"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 121,
            "description": "Draws a line on the {@link JXG.Board}.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a line object, that has to be drawn.",
                    "type": "JXG.Line"
                }
            ],
            "references": [
                "Line",
                "JXG.Line",
                "JXG.AbstractRenderer#updateLine"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 130,
            "description": "Updates visual appearance of the renderer element assigned to the given {@link JXG.Line}.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to the {@link JXG.Line} object that has to be updated.",
                    "type": "JXG.Line"
                }
            ],
            "references": [
                "Line",
                "JXG.Line",
                "JXG.AbstractRenderer#drawLine"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 139,
            "description": "Creates a rendering node for ticks added to a line.",
            "params": [
                {
                    "name": "element",
                    "description": "A arbitrary line.",
                    "type": "JXG.Line"
                }
            ],
            "references": [
                "Line",
                "Ticks",
                "JXG.Line",
                "JXG.Ticks",
                "JXG.AbstractRenderer#updateTicks"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 150,
            "description": "Update {@link Ticks} on a {@link JXG.Line}. This method is only a stub and has to be implemented\nin any descendant renderer class.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of an line object, thats ticks have to be updated.",
                    "type": "JXG.Line"
                }
            ],
            "references": [
                "Line",
                "Ticks",
                "JXG.Line",
                "JXG.Ticks",
                "JXG.AbstractRenderer#drawTicks"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 166,
            "description": "Draws a {@link JXG.Curve} on the {@link JXG.Board}.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a graph object, that has to be plotted.",
                    "type": "JXG.Curve"
                }
            ],
            "references": [
                "Curve",
                "JXG.Curve",
                "JXG.AbstractRenderer#updateCurve"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 175,
            "description": "Updates visual appearance of the renderer element assigned to the given {@link JXG.Curve}.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Curve} object, that has to be updated.",
                    "type": "JXG.Curve"
                }
            ],
            "references": [
                "Curve",
                "JXG.Curve",
                "JXG.AbstractRenderer#drawCurve"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 188,
            "description": "Draws a {@link JXG.Circle}",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Circle} object that has to be drawn.",
                    "type": "JXG.Circle"
                }
            ],
            "references": [
                "Circle",
                "JXG.Circle",
                "JXG.AbstractRenderer#updateEllipse"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 197,
            "description": "Updates visual appearance of a given {@link JXG.Circle} on the {@link JXG.Board}.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Circle} object, that has to be updated.",
                    "type": "JXG.Circle"
                }
            ],
            "references": [
                "Circle",
                "JXG.Circle",
                "JXG.AbstractRenderer#drawEllipse"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 211,
            "description": "Draws a {@link JXG.Polygon} on the {@link JXG.Board}.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a Polygon object, that is to be drawn.",
                    "type": "JXG.Polygon"
                }
            ],
            "references": [
                "Polygon",
                "JXG.Polygon",
                "JXG.AbstractRenderer#updatePolygon"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 220,
            "description": "Updates properties of a {@link JXG.Polygon}'s rendering node.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Polygon} object, that has to be updated.",
                    "type": "JXG.Polygon"
                }
            ],
            "references": [
                "Polygon",
                "JXG.Polygon",
                "JXG.AbstractRenderer#drawPolygon"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 233,
            "description": "Shows a small copyright notice in the top left corner of the board.",
            "params": [
                {
                    "name": "str",
                    "description": "The copyright notice itself",
                    "type": "String"
                },
                {
                    "name": "fontsize",
                    "description": "Size of the font the copyright notice is written in",
                    "type": "Number"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 240,
            "description": "An internal text is a {@link JXG.Text} element which is drawn using only\nthe given renderer but no HTML. This method is only a stub, the drawing\nis done in the special renderers.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a {@link JXG.Text} object",
                    "type": "JXG.Text"
                }
            ],
            "references": [
                "Text",
                "JXG.Text",
                "JXG.AbstractRenderer#updateInternalText",
                "JXG.AbstractRenderer#drawText",
                "JXG.AbstractRenderer#updateText",
                "JXG.AbstractRenderer#updateTextStyle"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 254,
            "description": "Updates visual properties of an already existing {@link JXG.Text} element.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to an {@link JXG.Text} object, that has to be updated.",
                    "type": "JXG.Text"
                }
            ],
            "references": [
                "Text",
                "JXG.Text",
                "JXG.AbstractRenderer#drawInternalText",
                "JXG.AbstractRenderer#drawText",
                "JXG.AbstractRenderer#updateText",
                "JXG.AbstractRenderer#updateTextStyle"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 266,
            "description": "Displays a {@link JXG.Text} on the {@link JXG.Board} by putting a HTML div over it.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to an {@link JXG.Text} object, that has to be displayed",
                    "type": "JXG.Text"
                }
            ],
            "references": [
                "Text",
                "JXG.Text",
                "JXG.AbstractRenderer#drawInternalText",
                "JXG.AbstractRenderer#updateText",
                "JXG.AbstractRenderer#updateInternalText",
                "JXG.AbstractRenderer#updateTextStyle"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 278,
            "description": "Updates visual properties of an already existing {@link JXG.Text} element.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to an {@link JXG.Text} object, that has to be updated.",
                    "type": "JXG.Text"
                }
            ],
            "references": [
                "Text",
                "JXG.Text",
                "JXG.AbstractRenderer#drawText",
                "JXG.AbstractRenderer#drawInternalText",
                "JXG.AbstractRenderer#updateInternalText",
                "JXG.AbstractRenderer#updateTextStyle"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 290,
            "description": "Updates CSS style properties of a {@link JXG.Text} node.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to the {@link JXG.Text} object, that has to be updated.",
                    "type": "JXG.Text"
                },
                {
                    "name": "doHighlight",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "references": [
                "Text",
                "JXG.Text",
                "JXG.AbstractRenderer#drawText",
                "JXG.AbstractRenderer#drawInternalText",
                "JXG.AbstractRenderer#updateText",
                "JXG.AbstractRenderer#updateInternalText"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 303,
            "description": "Set color and opacity of internal texts.\nSVG needs its own version.",
            "access": "private",
            "tagname": "",
            "references": [
                "JXG.AbstractRenderer#updateTextStyle",
                "JXG.AbstractRenderer#updateInternalTextStyle"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 316,
            "description": "Draws an {@link JXG.Image} on a board; This is just a template that has to be implemented by special renderers.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to the image object that is to be drawn",
                    "type": "JXG.Image"
                }
            ],
            "references": [
                "Image",
                "JXG.Image",
                "JXG.AbstractRenderer#updateImage"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 325,
            "description": "Updates the properties of an {@link JXG.Image} element.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to an {@link JXG.Image} object, that has to be updated.",
                    "type": "JXG.Image"
                }
            ],
            "references": [
                "Image",
                "JXG.Image",
                "JXG.AbstractRenderer#drawImage"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 334,
            "description": "Applies transformations on images and text elements. This method is just a stub and has to be implemented in all\ndescendant classes where text and image transformations are to be supported.",
            "params": [
                {
                    "name": "element",
                    "description": "A {@link JXG.Image} or {@link JXG.Text} object.",
                    "type": "JXG.Image|JXG.Text"
                },
                {
                    "name": "transformations",
                    "description": "An array of {@link JXG.Transformation} objects. This is usually the transformations property\nof the given element <tt>el</tt>.",
                    "type": "Array"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 343,
            "description": "If the URL of the image is provided by a function the URL has to be updated during updateImage()",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to an image object.",
                    "type": "JXG.Image"
                }
            ],
            "references": [
                "JXG.AbstractRenderer#updateImage"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 354,
            "description": "Appends a node to a specific layer level. This is just an abstract method and has to be implemented\nin all renderers that want to use the <tt>createPrim</tt> model to draw.",
            "params": [
                {
                    "name": "node",
                    "description": "A DOM tree node.",
                    "type": "Node"
                },
                {
                    "name": "level",
                    "description": "The layer the node is attached to. This is the index of the layer in\n{@link JXG.SVGRenderer#layer} or the <tt>z-index</tt> style property of the node in VMLRenderer.",
                    "type": "Number"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 363,
            "description": "Stores the rendering nodes. This is an abstract method which has to be implemented in all renderers that use\nthe <tt>createPrim</tt> method.",
            "params": [
                {
                    "name": "element",
                    "description": "A JSXGraph element.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "type",
                    "description": "The XML node name. Only used in VMLRenderer.",
                    "type": "String"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 371,
            "description": "Creates a node of a given type with a given id.",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the node to create.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "Set the id attribute to this.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Reference to the created node.",
                "type": "Node"
            },
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 382,
            "description": "Removes an element node. Just a stub.",
            "params": [
                {
                    "name": "node",
                    "description": "The node to remove.",
                    "type": "Node"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 388,
            "description": "Can be used to create the nodes to display arrows. This is an abstract method which has to be implemented\nin any descendant renderer.",
            "params": [
                {
                    "name": "element",
                    "description": "The element the arrows are to be attached to.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 395,
            "description": "Updates an ellipse node primitive. This is an abstract method which has to be implemented in all renderers\nthat use the <tt>createPrim</tt> method.",
            "params": [
                {
                    "name": "node",
                    "description": "Reference to the node.",
                    "type": "Node"
                },
                {
                    "name": "x",
                    "description": "Centre X coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Centre Y coordinate",
                    "type": "Number"
                },
                {
                    "name": "rx",
                    "description": "The x-axis radius.",
                    "type": "Number"
                },
                {
                    "name": "ry",
                    "description": "The y-axis radius.",
                    "type": "Number"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 406,
            "description": "Refreshes a line node. This is an abstract method which has to be implemented in all renderers that use\nthe <tt>createPrim</tt> method.",
            "params": [
                {
                    "name": "node",
                    "description": "The node to be refreshed.",
                    "type": "Node"
                },
                {
                    "name": "p1x",
                    "description": "The first point's x coordinate.",
                    "type": "Number"
                },
                {
                    "name": "p1y",
                    "description": "The first point's y coordinate.",
                    "type": "Number"
                },
                {
                    "name": "p2x",
                    "description": "The second point's x coordinate.",
                    "type": "Number"
                },
                {
                    "name": "p2y",
                    "description": "The second point's y coordinate.",
                    "type": "Number"
                },
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 418,
            "description": "Updates a path element. This is an abstract method which has to be implemented in all renderers that use\nthe <tt>createPrim</tt> method.",
            "params": [
                {
                    "name": "node",
                    "description": "The path node.",
                    "type": "Node"
                },
                {
                    "name": "pathString",
                    "description": "A string formatted like e.g. <em>'M 1,2 L 3,1 L5,5'</em>. The format of the string\ndepends on the rendering engine.",
                    "type": "String"
                },
                {
                    "name": "board",
                    "description": "Reference to the element's board.",
                    "type": "JXG.Board"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 428,
            "description": "Builds a path data string to draw a point with a face other than <em>rect</em> and <em>circle</em>. Since\nthe format of such a string usually depends on the renderer this method\nis only an abstract method. Therefore, it has to be implemented in the descendant renderer itself unless\nthe renderer does not use the createPrim interface but the draw* interfaces to paint.",
            "params": [
                {
                    "name": "element",
                    "description": "The point element",
                    "type": "JXG.Point"
                },
                {
                    "name": "size",
                    "description": "A positive number describing the size. Usually the half of the width and height of\nthe drawn point.",
                    "type": "Number"
                },
                {
                    "name": "type",
                    "description": "A string describing the point's face. This method only accepts the shortcut version of\neach possible face: <tt>x, +, <>, ^, v, >, <",
                    "type": "String"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 441,
            "description": "Builds a path data string from a {@link JXG.Curve} element. Since the path data strings heavily depend on the\nunderlying rendering technique this method is just a stub. Although such a path string is of no use for the\nCanvasRenderer, this method is used there to draw a path directly.",
            "params": [
                {
                    "name": "element",
                    "description": ""
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 449,
            "description": "Builds a path data string from a {@link JXG.Curve} element such that the curve looks like\nhand drawn.\nSince the path data strings heavily depend on the\nunderlying rendering technique this method is just a stub. Although such a path string is of no use for the\nCanvasRenderer, this method is used there to draw a path directly.",
            "params": [
                {
                    "name": "element",
                    "description": ""
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 460,
            "description": "Update a polygon primitive.",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "Node"
                },
                {
                    "name": "element",
                    "description": "A JSXGraph element of type {@link JXG.Polygon}",
                    "type": "JXG.Polygon"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 467,
            "description": "Update a rectangle primitive. This is used only for points with face of type 'rect'.",
            "params": [
                {
                    "name": "node",
                    "description": "The node yearning to be updated.",
                    "type": "Node"
                },
                {
                    "name": "x",
                    "description": "x coordinate of the top left vertex.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y coordinate of the top left vertex.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "Width of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The rectangle's height.",
                    "type": "Number"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 481,
            "description": "Sets a node's attribute.",
            "params": [
                {
                    "name": "node",
                    "description": "The node that is to be updated.",
                    "type": "Node"
                },
                {
                    "name": "key",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "New value for the attribute.",
                    "type": "String"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 489,
            "description": "Shows a hidden element on the canvas; Only a stub, requires implementation in the derived renderer.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to the object that has to appear.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "references": [
                "JXG.AbstractRenderer#hide"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 496,
            "description": "Hides an element on the canvas; Only a stub, requires implementation in the derived renderer.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to the geometry element that has to disappear.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "references": [
                "JXG.AbstractRenderer#show"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 503,
            "description": "Sets the buffering as recommended by SVGWG. Until now only Opera supports this and will be ignored by\nother browsers. Although this feature is only supported by SVG we have this method in {@link JXG.AbstractRenderer}\nbecause it is called from outside the renderer.",
            "params": [
                {
                    "name": "node",
                    "description": "The SVG DOM Node which buffering type to update.",
                    "type": "Node"
                },
                {
                    "name": "type",
                    "description": "Either 'auto', 'dynamic', or 'static'. For an explanation see\n  {@link http://www.w3.org/TR/SVGTiny12/painting.html#BufferedRenderingProperty}.",
                    "type": "String"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 513,
            "description": "Sets an element's dash style.",
            "params": [
                {
                    "name": "element",
                    "description": "An JSXGraph element.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 519,
            "description": "Puts an object into draft mode, i.e. it's visual appearance will be changed. For GEONE<sub>x</sub>T backwards compatibility.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of the object that is in draft mode.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 525,
            "description": "Puts an object from draft mode back into normal mode.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of the object that no longer is in draft mode.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 531,
            "description": "Sets up nodes for rendering a gradient fill.",
            "params": [
                {
                    "name": "element",
                    "description": ""
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 537,
            "description": "Updates the gradient fill.",
            "params": [
                {
                    "name": "element",
                    "description": "An JSXGraph element with an area that can be filled.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 543,
            "description": "Sets an objects fill color.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of the object that wants a new fill color.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "color",
                    "description": "Color in a HTML/CSS compatible format. If you don't want any fill color at all, choose 'none'.",
                    "type": "String"
                },
                {
                    "name": "opacity",
                    "description": "Opacity of the fill color. Must be between 0 and 1.",
                    "type": "Number"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 551,
            "description": "Changes an objects stroke color to the given color.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of the {@link JXG.GeometryElement} that gets a new stroke color.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "color",
                    "description": "Color value in a HTML compatible format, e.g. <strong>#00ff00</strong> or <strong>green</strong> for green.",
                    "type": "String"
                },
                {
                    "name": "opacity",
                    "description": "Opacity of the fill color. Must be between 0 and 1.",
                    "type": "Number"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 559,
            "description": "Sets an element's stroke width.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to the geometry element.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "width",
                    "description": "The new stroke width to be assigned to the element.",
                    "type": "Number"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 566,
            "description": "Sets the shadow properties to a geometry element. This method is only a stub, it is implemented in the actual renderers.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference to a geometry object, that should get a shadow",
                    "type": "JXG.GeometryElement"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 572,
            "description": "Highlights an object, i.e. changes the current colors of the object to its highlighting colors",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of the object that will be highlighted.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "Reference to the renderer",
                "type": "JXG.AbstractRenderer"
            },
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 579,
            "description": "Uses the normal colors of an object, i.e. the opposite of {@link JXG.AbstractRenderer#highlight}.",
            "params": [
                {
                    "name": "element",
                    "description": "Reference of the object that will get its normal colors.",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "Reference to the renderer",
                "type": "JXG.AbstractRenderer"
            },
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 591,
            "description": "Stop redraw. This method is called before every update, so a non-vector-graphics based renderer\ncan use this method to delete the contents of the drawing panel. This is an abstract method every\ndescendant renderer should implement, if appropriate.",
            "references": [
                "JXG.AbstractRenderer#unsuspendRedraw"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 599,
            "description": "Restart redraw. This method is called after updating all the rendering node attributes.",
            "references": [
                "JXG.AbstractRenderer#suspendRedraw"
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 605,
            "description": "The tiny zoom bar shown on the bottom of a board (if showNavigation on board creation is true).",
            "params": [
                {
                    "name": "board",
                    "description": "Reference to a JSXGraph board.",
                    "type": "JXG.Board"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 611,
            "description": "Wrapper for getElementById for maybe other renderers which elements are not directly accessible by DOM methods like document.getElementById().",
            "params": [
                {
                    "name": "id",
                    "description": "Unique identifier for element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Reference to a JavaScript object. In case of SVG/VMLRenderer it's a reference to a SVG/VML node.",
                "type": "Object"
            },
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/no.js",
            "line": 620,
            "description": "Resizes the rendering element",
            "params": [
                {
                    "name": "w",
                    "description": "New width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "New height",
                    "type": "Number"
                }
            ],
            "class": "JXG.NoRenderer"
        },
        {
            "file": "src/renderer/svg.js",
            "line": 70,
            "description": "SVG root node",
            "type": "Node",
            "class": "JXG.SVGRenderer"
        },
        {
            "file": "src/renderer/svg.js",
            "line": 76,
            "description": "The SVG Namespace used in JSXGraph.",
            "references": [
                "http://www.w3.org/TR/SVG/"
            ],
            "type": "String",
            "default": "http://www.w3.org/2000/svg",
            "class": "JXG.SVGRenderer"
        },
        {
            "file": "src/renderer/svg.js",
            "line": 84,
            "description": "The xlink namespace. This is used for images.",
            "references": [
                "http://www.w3.org/TR/xlink/"
            ],
            "type": "String",
            "default": "http://www.w3.org/1999/xlink",
            "class": "JXG.SVGRenderer"
        },
        {
            "file": "src/renderer/svg.js",
            "line": 111,
            "description": "The <tt>defs</tt> element is a container element to reference reusable SVG elements.",
            "type": "Node",
            "references": [
                "http://www.w3.org/TR/SVG/struct.html#DefsElement"
            ],
            "class": "JXG.SVGRenderer"
        },
        {
            "file": "src/renderer/svg.js",
            "line": 119,
            "description": "Filters are used to apply shadows.",
            "type": "Node",
            "references": [
                "http://www.w3.org/TR/SVG/filters.html#FilterElement"
            ],
            "class": "JXG.SVGRenderer"
        },
        {
            "file": "src/renderer/svg.js",
            "line": 158,
            "description": "JSXGraph uses a layer system to sort the elements on the board. This puts certain types of elements in front\nof other types of elements. For the order used see {@link JXG.Options.layer}. The number of layers is documented\nthere, too. The higher the number, the \"more on top\" are the elements on this layer.",
            "type": "Array",
            "class": "JXG.SVGRenderer"
        },
        {
            "file": "src/renderer/svg.js",
            "line": 185,
            "description": "Defines dash patterns. Defined styles are: <ol>\n<li value=\"-1\"> 2px dash, 2px space</li>\n<li> 5px dash, 5px space</li>\n<li> 10px dash, 10px space</li>\n<li> 20px dash, 20px space</li>\n<li> 20px dash, 10px space, 10px dash, 10px dash</li>\n<li> 20px dash, 5px space, 10px dash, 5px space</li></ol>",
            "type": "Array",
            "default": "['2, 2', '5, 5', '10, 10', '20, 20', '20, 10, 10, 10', '20, 5, 10, 5']",
            "references": [
                "http://www.w3.org/TR/SVG/painting.html#StrokeProperties"
            ],
            "class": "JXG.SVGRenderer"
        },
        {
            "file": "src/renderer/svg.js",
            "line": 204,
            "description": "Creates an arrow DOM node. Arrows are displayed in SVG with a <em>marker</em> tag.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "A JSXGraph element, preferably one that can have an arrow attached.",
                    "type": "JXG.GeometryElement"
                },
                {
                    "name": "idAppendix",
                    "description": "A string that is added to the node's id.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "''"
                }
            ],
            "return": {
                "description": "Reference to the node added to the DOM.",
                "type": "Node"
            },
            "class": "JXG.SVGRenderer"
        },
        {
            "file": "src/renderer/svg.js",
            "line": 263,
            "description": "Updates an arrow DOM node.",
            "params": [
                {
                    "name": "node",
                    "description": "The arrow node.",
                    "type": "Node"
                },
                {
                    "name": "color",
                    "description": "Color value in a HTML compatible format, e.g. <tt>#00ff00</tt> or <tt>green</tt> for green.",
                    "type": "String"
                },
                {
                    "name": "opacity",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "JXG.SVGRenderer"
        },
        {
            "file": "src/renderer/svg.js",
            "line": 417,
            "description": "Set color and opacity of internal texts.\nSVG needs its own version.",
            "access": "private",
            "tagname": "",
            "references": [
                "JXG.AbstractRenderer#updateTextStyle",
                "JXG.AbstractRenderer#updateInternalTextStyle"
            ],
            "class": "JXG.SVGRenderer"
        },
        {
            "file": "src/renderer/svg.js",
            "line": 1170,
            "description": "Convert the SVG construction into an HTML canvas image.\nThis works for all SVG supporting browsers.\nFor IE it works from version 9.\nBut HTML texts are ignored on IE. The drawing is done with a delay of\n200 ms. Otherwise there are problems with IE.",
            "params": [
                {
                    "name": "canvasId",
                    "description": "Id of an HTML canvas element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the svg renderer object.",
                "type": "Object"
            },
            "example": [
                "\n    board.renderer.dumpToCanvas('canvas');"
            ],
            "class": "JXG.SVGRenderer"
        },
        {
            "file": "src/renderer/vml.js",
            "line": 104,
            "description": "Sets attribute <tt>key</tt> of node <tt>node</tt> to <tt>value</tt>.",
            "params": [
                {
                    "name": "node",
                    "description": "A DOM node.",
                    "type": "Node"
                },
                {
                    "name": "key",
                    "description": "Name of the attribute.",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "New value of the attribute.",
                    "type": "String"
                },
                {
                    "name": "iFlag",
                    "description": "If false, the attribute's name is case insensitive.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "JXG.VMLRenderer"
        },
        {
            "file": "src/server/server.js",
            "line": 43,
            "fileoverview": "The JXG.Server is a wrapper for a smoother integration of server side calculations. on the\nserver side a python plugin system is used.",
            "class": "JXG.Util.Base64"
        },
        {
            "file": "src/server/server.js",
            "line": 54,
            "class": "JXG.Util.Base64",
            "namespace": "JXG.Server namespace holding functions to load JXG server modules."
        },
        {
            "file": "src/server/server.js",
            "line": 59,
            "description": "This is where all of a module's handlers are accessed from. If you're loading a module named JXGModule which\nprovides a handler called ImaHandler, then this handler can be called by invoking JXG.Server.modules.JXGModule.ImaHandler().",
            "class": "JXG.Util.Base64"
        },
        {
            "file": "src/server/server.js",
            "line": 66,
            "description": "Stores all asynchronous calls to server which aren't finished yet.",
            "access": "private",
            "tagname": "",
            "class": "JXG.Util.Base64"
        },
        {
            "file": "src/server/server.js",
            "line": 72,
            "description": "Handles errors, just a default implementation, can be overwritten by you, if you want to handle errors by yourself.",
            "params": [
                {
                    "name": "data",
                    "description": "An object holding a field of type string named message handling the error described in the message string.",
                    "type": "Object"
                }
            ],
            "class": "JXG.Util.Base64"
        },
        {
            "file": "src/server/server.js",
            "line": 80,
            "description": "The main method of JXG.Server. Actually makes the calls to the server and parses the feedback.",
            "params": [
                {
                    "name": "action",
                    "description": "Can be 'load' or 'exec'.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function pointer or anonymous function which takes as it's only argument an\nobject containing the data from the server. The fields of this object depend on the reply of the server\nmodule. See the correspondings server module readme.",
                    "type": "Function"
                },
                {
                    "name": "data",
                    "description": "What is to be sent to the server.",
                    "type": "Object"
                },
                {
                    "name": "sync",
                    "description": "If the call should be synchronous or not.",
                    "type": "Boolean"
                }
            ],
            "class": "JXG.Util.Base64"
        },
        {
            "file": "src/server/server.js",
            "line": 219,
            "description": "Callback for the default action 'load'.",
            "class": "JXG.Util.Base64"
        },
        {
            "file": "src/server/server.js",
            "line": 229,
            "description": "Loads a module from the server.",
            "params": [
                {
                    "name": "module",
                    "description": "A string containing the module. Has to match the filename of the Python module on the server exactly including\nlower and upper case letters without the file ending .py.",
                    "type": "String"
                }
            ],
            "class": "JXG.Util.Base64"
        },
        {
            "file": "src/utils/base64.js",
            "line": 52,
            "description": "Extracts one byte from a string and ensures the result is less than or equal to 255.",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "i",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "<= 255",
                "type": "Number"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Util.Base64"
        },
        {
            "file": "src/utils/base64.js",
            "line": 63,
            "description": "Determines the index of a base64 character in the base64 alphabet.",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "i",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "throws": {
                "description": "If the character can not be found in the alphabet.",
                "type": "Error"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Util.Base64"
        },
        {
            "file": "src/utils/base64.js",
            "line": 87,
            "description": "Encode the given string.",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "base64 encoded version of the input string.",
                "type": "String"
            },
            "class": "JXG.Util.Base64"
        },
        {
            "file": "src/utils/base64.js",
            "line": 129,
            "description": "Decode from Base64",
            "params": [
                {
                    "name": "input",
                    "description": "Base64 encoded data",
                    "type": "String"
                },
                {
                    "name": "utf8",
                    "description": "In case this parameter is true {@link JXG.Util.UTF8.decode} will be applied to\nthe result of the base64 decoder.",
                    "type": "Boolean"
                }
            ],
            "throws": {
                "description": "If the string has the wrong length.",
                "type": "Error"
            },
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "JXG.Util.Base64"
        },
        {
            "file": "src/utils/base64.js",
            "line": 197,
            "description": "Decode the base64 input data as an array",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.Util.Base64"
        },
        {
            "file": "src/utils/color.js",
            "line": 43,
            "description": "Functions for color conversions. This was originally based on a class to parse color values by\nStoyan Stefanov <sstoo@gmail.com> (see http://www.phpied.com/rgb-color-parser-in-javascript/)",
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 244,
            "description": "Converts a valid HTML/CSS color string into a rgb value array. This is the base\nfunction for the following wrapper functions which only adjust the output to\ndifferent flavors like an object, string or hex values.",
            "params": [
                {
                    "name": "color",
                    "description": "A valid HTML or CSS styled color value, e.g. '#12ab21', '#abc', 'black',\nor 'rgb(12, 132, 233)'. This can also be an array containing three color values either from 0.0 to 1.0 or\nfrom 0 to 255. They will be interpreted as red, green, and blue values. In case this is a number this method\nexpects the parameters ag and ab.",
                    "type": "String,Array,Number"
                },
                {
                    "name": "ag",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ab",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "RGB color values as an array [r, g, b] with values ranging from 0 to 255.",
                "type": "Array"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 330,
            "description": "Converts a valid HTML/CSS color string into a string of the 'rgb(r, g, b)' format.",
            "params": [
                {
                    "name": "color",
                    "description": "A valid HTML or CSS styled color value, e.g. '#12ab21', '#abc', 'black',\nor 'rgb(12, 132, 233)'. This can also be an array containing three color values either from 0.0 to 1.0 or\nfrom 0 to 255. They will be interpreted as red, green, and blue values. In case this is a number this method\nexpects the parameters ag and ab.",
                    "type": "String,Array,Number"
                },
                {
                    "name": "ag",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ab",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A 'rgb(r, g, b)' formatted string",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 348,
            "description": "Converts a valid HTML/CSS color string into a HTML rgb string.",
            "params": [
                {
                    "name": "color",
                    "description": "A valid HTML or CSS styled color value, e.g. '#12ab21', '#abc', 'black',\nor 'rgb(12, 132, 233)'. This can also be an array containing three color values either from 0.0 to 1.0 or\nfrom 0 to 255. They will be interpreted as red, green, and blue values. In case this is a number this method\nexpects the parameters ag and ab.",
                    "type": "String,Array,Number"
                },
                {
                    "name": "ag",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ab",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A '#rrggbb' formatted string",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 384,
            "description": "Converts a valid HTML/CSS color string from the '#rrggbb' format into the 'rgb(r, g, b)' format.",
            "params": [
                {
                    "name": "hex",
                    "description": "A valid HTML or CSS styled color value, e.g. '#12ab21', '#abc', or 'black'",
                    "type": "String"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use {@link JXG#rgb2css} instead.",
            "return": {
                "description": "A 'rgb(r, g, b)' formatted string",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 395,
            "description": "Converts HSV color to RGB color.\nBased on C Code in \"Computer Graphics -- Principles and Practice,\"\nFoley et al, 1996, p. 593.\nSee also http://www.efg2.com/Lab/Graphics/Colors/HSV.htm",
            "params": [
                {
                    "name": "H",
                    "description": "value between 0 and 360",
                    "type": "Number"
                },
                {
                    "name": "S",
                    "description": "value between 0.0 (shade of gray) to 1.0 (pure color)",
                    "type": "Number"
                },
                {
                    "name": "V",
                    "description": "value between 0.0 (black) to 1.0 (white)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "RGB color string",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 479,
            "description": "Converts a color from the RGB color space into the HSV space. Input can be any valid HTML/CSS color definition.",
            "params": [
                {
                    "name": "color",
                    "description": "A valid HTML or CSS styled color value, e.g. '#12ab21', '#abc', 'black',\nor 'rgb(12, 132, 233)'. This can also be an array containing three color values either from 0.0 to 1.0 or\nfrom 0 to 255. They will be interpreted as red, green, and blue values. In case this is a number this method\nexpects the parameters ag and ab.",
                    "type": "String,Array,Number"
                },
                {
                    "name": "ag",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ab",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Contains the h, s, and v value in this order.",
                "type": "Array"
            },
            "references": [
                "http://zach.in.tu-clausthal.de/teaching/cg1_0708/folien/13_color_3_4up.pdf"
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 539,
            "description": "Converts a color from the RGB color space into the LMS space. Input can be any valid HTML/CSS color definition.",
            "params": [
                {
                    "name": "color",
                    "description": "A valid HTML or CSS styled color value, e.g. '#12ab21', '#abc', 'black',\nor 'rgb(12, 132, 233)'. This can also be an array containing three color values either from 0.0 to 1.0 or\nfrom 0 to 255. They will be interpreted as red, green, and blue values. In case this is a number this method\nexpects the parameters ag and ab.",
                    "type": "String,Array,Number"
                },
                {
                    "name": "ag",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "ab",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Contains the l, m, and s value in this order.",
                "type": "Array"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 579,
            "description": "Convert color information from LMS to RGB color space.",
            "params": [
                {
                    "name": "l",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "m",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "s",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Contains the r, g, and b value in this order.",
                "type": "Array"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 643,
            "description": "Splits a RGBA color value like #112233AA into it's RGB and opacity parts.",
            "params": [
                {
                    "name": "rgba",
                    "description": "A RGBA color value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array containing the rgb color value in the first and the opacity in the second field.",
                "type": "Array"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 661,
            "description": "Generates a RGBA color value like #112233AA from it's RGB and opacity parts.",
            "params": [
                {
                    "name": "rgb",
                    "description": "A RGB color value.",
                    "type": "String"
                },
                {
                    "name": "o",
                    "description": "The desired opacity >=0, <=1.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The RGBA color value.",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 682,
            "description": "Decolorizes the given color.",
            "params": [
                {
                    "name": "color",
                    "description": "HTML string containing the HTML color code.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a HTML color string",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 708,
            "description": "Converts a color into how a colorblind human approximately would see it.",
            "params": [
                {
                    "name": "color",
                    "description": "HTML string containing the HTML color code.",
                    "type": "String"
                },
                {
                    "name": "deficiency",
                    "description": "The type of color blindness. Possible\noptions are <i>protanopia</i>, <i>deuteranopia</i>, and <i>tritanopia</i>.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a HTML color string",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/color.js",
            "line": 801,
            "description": "Determines highlight color to a given color. Done by reducing (or increasing) the opacity,",
            "params": [
                {
                    "name": "color",
                    "description": "HTML RGBA string containing the HTML color code.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a HTML RGBA color string",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/dump.js",
            "line": 41,
            "fileoverview": "The JXG.Dump namespace provides methods to save a board to javascript.",
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/dump.js",
            "line": 49,
            "description": "The JXG.Dump namespace provides classes and methods to save a board to javascript.",
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/dump.js",
            "line": 55,
            "description": "Adds markers to every element of the board",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                },
                {
                    "name": "markers",
                    "description": "",
                    "type": "Array|String"
                },
                {
                    "name": "values",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/dump.js",
            "line": 86,
            "description": "Removes markers from every element on the board.",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                },
                {
                    "name": "markers",
                    "description": "",
                    "type": "Array|String"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/dump.js",
            "line": 111,
            "description": "Stringifies a string, i.e. puts some quotation marks around <tt>s</tt> if it is of type string.",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "\" + s + \"",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/dump.js",
            "line": 124,
            "description": "Eliminate default values given by {@link JXG.Options} from the attributes object.",
            "params": [
                {
                    "name": "instance",
                    "description": "Attribute object of the element",
                    "type": "Object"
                },
                {
                    "name": "s",
                    "description": "Arbitrary number of objects <tt>instance</tt> will be compared to. Usually these are\nsub-objects of the {@link JXG.Board#options} structure.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Minimal attributes object",
                "type": "Object"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/dump.js",
            "line": 158,
            "description": "Prepare the attributes object for an element.",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                },
                {
                    "name": "obj",
                    "description": "Geometry element which attributes object is generated",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "An attributes object.",
                "type": "Object"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/dump.js",
            "line": 183,
            "description": "Generate a save-able structure with all elements. This is used by {@link JXG.Dump#toJessie} and {@link JXG.Dump#toJavaScript}\nto generate the script.",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                }
            ],
            "return": {
                "description": "An array with all metadata necessary to save the construction.",
                "type": "Array"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/dump.js",
            "line": 243,
            "description": "Converts an array of different values into a parameter string that can be used by the code generators.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "converter",
                    "description": "A function that is used to transform the elements of <tt>a</tt>. Usually\n{@link JXG.toJSON} or {@link JXG.Dump.toJCAN} are used.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/dump.js",
            "line": 261,
            "description": "Converts a JavaScript object into a JCAN (JessieCode Attribute Notation) string.",
            "params": [
                {
                    "name": "obj",
                    "description": "A JavaScript object, functions will be ignored.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The given object stored in a JCAN string.",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/dump.js",
            "line": 301,
            "description": "Saves the construction in <tt>board</tt> to JessieCode.",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                }
            ],
            "return": {
                "description": "JessieCode",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/dump.js",
            "line": 335,
            "description": "Saves the construction in <tt>board</tt> to JavaScript.",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                }
            ],
            "return": {
                "description": "JavaScript",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/encoding.js",
            "line": 39,
            "description": "UTF8 encoding routines",
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/encoding.js",
            "line": 44,
            "description": "Encode a string to utf-8.",
            "params": [
                {
                    "name": "string",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "utf8 encoded string",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/encoding.js",
            "line": 82,
            "description": "Decode a string from utf-8.",
            "params": [
                {
                    "name": "utftext",
                    "description": "to decode",
                    "type": "String"
                }
            ],
            "return": {
                "description": "utf8 decoded string",
                "type": "String"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/encoding.js",
            "line": 140,
            "description": "Extends the standard charCodeAt() method of the String class to find the ASCII char code of\na character at a given position in a UTF8 encoded string.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "i",
                    "description": "position of the character",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 41,
            "fileoverview": "The functions in this file help with the detection of the environment JSXGraph runs in. We can distinguish\nbetween node.js, windows 8 app and browser, what rendering techniques are supported and (most of the time) if the device\nthe browser runs on is a tablet/cell or a desktop computer.",
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 52,
            "description": "Determines the property that stores the relevant information in the event object.",
            "type": "{String}",
            "default": "'touches'",
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 59,
            "description": "A document/window environment is available.",
            "type": "Boolean",
            "default": "false",
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 66,
            "description": "Detect browser support for VML.",
            "return": {
                "description": "True, if the browser supports VML.",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 75,
            "description": "Detect browser support for SVG.",
            "return": {
                "description": "True, if the browser supports SVG.",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 83,
            "description": "Detect browser support for Canvas.",
            "return": {
                "description": "True, if the browser supports HTML canvas.",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 100,
            "description": "True, if run inside a node.js environment.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 116,
            "description": "True if run inside a webworker environment.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 124,
            "description": "Checks if the environments supports the W3C Pointer Events API {@link http://www.w3.org/Submission/pointer-events/}",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 132,
            "description": "Determine if the current browser supports touch events",
            "return": {
                "description": "True, if the browser supports touch events.",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 140,
            "description": "Detects if the user is using an Android powered device.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 148,
            "description": "Detects if the user is using the default Webkit browser on an Android powered device.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 156,
            "description": "Detects if the user is using a Apple iPad / iPhone.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 164,
            "description": "Detects if the user is using Safari on an Apple device.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 172,
            "description": "Returns true if the run inside a Windows 8 \"Metro\" App.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 180,
            "description": "Detects if the user is using a Mozilla browser",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 190,
            "description": "Detects if the user is using a firefoxOS powered device.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 202,
            "description": "Internet Explorer version. Works only for IE > 4.",
            "type": "Number",
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 225,
            "description": "Reads the width and height of an HTML element.",
            "params": [
                {
                    "name": "elementId",
                    "description": "The HTML id of an HTML DOM node.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object with the two properties width and height.",
                "type": "Object"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 294,
            "description": "Adds an event listener to a DOM element.",
            "params": [
                {
                    "name": "obj",
                    "description": "Reference to a DOM node.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event to catch, without leading 'on', e.g. 'mousemove' instead of 'onmousemove'.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to call when the event is triggered.",
                    "type": "Function"
                },
                {
                    "name": "owner",
                    "description": "The scope in which the event trigger is called.",
                    "type": "Object"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 321,
            "description": "Removes an event listener from a DOM element.",
            "params": [
                {
                    "name": "obj",
                    "description": "Reference to a DOM node.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event to catch, without leading 'on', e.g. 'mousemove' instead of 'onmousemove'.",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to call when the event is triggered.",
                    "type": "Function"
                },
                {
                    "name": "owner",
                    "description": "The scope in which the event trigger is called.",
                    "type": "Object"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 370,
            "description": "Removes all events of the given type from a given DOM node; Use with caution and do not use it on a container div\nof a {@link JXG.Board} because this might corrupt the event handling system.",
            "params": [
                {
                    "name": "obj",
                    "description": "Reference to a DOM node.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event to catch, without leading 'on', e.g. 'mousemove' instead of 'onmousemove'.",
                    "type": "String"
                },
                {
                    "name": "owner",
                    "description": "The scope in which the event trigger is called.",
                    "type": "Object"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 392,
            "description": "Cross browser mouse / touch coordinates retrieval relative to the board's top left corner.",
            "params": [
                {
                    "name": "e",
                    "description": "The browsers event object. If omitted, <tt>window.event</tt> will be used.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "index",
                    "description": "If <tt>e</tt> is a touch event, this provides the index of the touch coordinates, i.e. it determines which finger.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "doc",
                    "description": "The document object.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Contains the position as x,y-coordinates in the first resp. second component.",
                "type": "Array"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 443,
            "description": "Calculates recursively the offset of the DOM element in which the board is stored.",
            "params": [
                {
                    "name": "obj",
                    "description": "A DOM element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An array with the elements left and top offset.",
                "type": "Array"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 497,
            "description": "Access CSS style sheets.",
            "params": [
                {
                    "name": "obj",
                    "description": "A DOM element",
                    "type": "Object"
                },
                {
                    "name": "stylename",
                    "description": "The CSS property to read.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the CSS property and <tt>undefined</tt> if it is not set."
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 527,
            "description": "Reads css style sheets of a given element. This method is a getStyle wrapper and\ndefaults the read value to <tt>0</tt> if it can't be parsed as an integer value.",
            "params": [
                {
                    "name": "el",
                    "description": "",
                    "type": "DOMElement"
                },
                {
                    "name": "css",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 539,
            "description": "Correct position of upper left corner in case of\na CSS transformation. Here, only translations are\nextracted. All scaling transformations are corrected\nin {@link JXG.Board#getMousePosition}.",
            "params": [
                {
                    "name": "cPos",
                    "description": "Previously determined position",
                    "type": "Array"
                },
                {
                    "name": "obj",
                    "description": "A DOM element",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The corrected position.",
                "type": "Array"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 562,
            "description": "Extract the coordinates and apply the transformation\nto cPos",
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 594,
            "description": "Scaling CSS transformations applied to the div element containing the JSXGraph constructions\nare determined. Not implemented are 'rotate', 'skew', 'skewX', 'skewY'.",
            "return": {
                "description": "3x3 transformation matrix. See {@link JXG.Board#updateCSSTransforms}.",
                "type": "Array"
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/env.js",
            "line": 645,
            "description": "Process data in timed chunks. Data which takes long to process, either because it is such\na huge amount of data or the processing takes some time, causes warnings in browsers about\nirresponsive scripts. To prevent these warnings, the processing is split into smaller pieces\ncalled chunks which will be processed in serial order.\nCopyright 2009 Nicholas C. Zakas. All rights reserved. MIT Licensed",
            "params": [
                {
                    "name": "items",
                    "description": "to do",
                    "type": "Array"
                },
                {
                    "name": "process",
                    "description": "Function that is applied for every array item",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "The scope of function process",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "This function is called after the last array element has been processed.",
                    "type": "Function"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/event.js",
            "line": 41,
            "fileoverview": "In this file the EventEmitter interface is defined.",
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/event.js",
            "line": 54,
            "description": "Holds the registered event handlers.",
            "itemtype": "property",
            "name": "JXG.EventEmitter#eventHandlers",
            "type": "Object",
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/event.js",
            "line": 61,
            "description": "Events can be suspended to prevent endless loops.",
            "itemtype": "property",
            "name": "JXG.EventEmitter#suspended",
            "type": "Object",
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/event.js",
            "line": 68,
            "description": "Triggers all event handlers of this element for a given event.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "args",
                    "description": "The arguments passed onto the event handler",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Reference to the object."
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/event.js",
            "line": 101,
            "description": "Register a new event handler. For a list of possible events see documentation of the elements and objects implementing\nthe {@link EventEmitter} interface.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "The context the handler will be called in, default is the element itself.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Reference to the object."
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/event.js",
            "line": 125,
            "description": "Unregister an event handler.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Reference to the object."
            },
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/event.js",
            "line": 155,
            "description": "Implements the functionality from this interface in the given object. All objects getting their event handling\ncapabilities from this method should document it by adding the <tt>on, off, triggerEventHandlers</tt> via the\nborrows tag as methods to their documentation: <pre>@borrows JXG.EventEmitter#on as this.on</pre>",
            "itemtype": "method",
            "name": "eventify",
            "params": [
                {
                    "name": "o",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "EventEmitter"
        },
        {
            "file": "src/utils/expect.js",
            "line": 41,
            "fileoverview": "expect.js provides utilities for parameter magic by normalizing multi-type parameters.",
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/expect.js",
            "line": 52,
            "description": "Apply an expect method on every element of an array.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "copy",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/expect.js",
            "line": 75,
            "description": "Normalize points and coord objects into a coord object.",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "JXG.Point|JXG.Coords"
                },
                {
                    "name": "copy",
                    "description": "Return a copy, not a reference",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "JXG.Coords"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/expect.js",
            "line": 99,
            "description": "Normalize points, coordinate arrays and coord objects into a coordinate array.",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "JXG.Point|JXG.Coords|Array"
                },
                {
                    "name": "copy",
                    "description": "Return a copy, not a reference",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Homogeneous coordinates",
                "type": "Array"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 41,
            "fileoverview": "type.js contains several functions to help deal with javascript's weak types. This file mainly consists\nof detector functions which verify if a variable is or is not of a specific type and converter functions that convert\nvariables to another type or normalize the type of a variable.",
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 54,
            "description": "Checks if the given string is an id within the given board.",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                },
                {
                    "name": "s",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 64,
            "description": "Checks if the given string is a name within the given board.",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                },
                {
                    "name": "s",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 74,
            "description": "Checks if the given string is a group id within the given board.",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                },
                {
                    "name": "s",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 84,
            "description": "Checks if the value of a given variable is of type string.",
            "params": [
                {
                    "name": "v",
                    "description": "A variable of any type."
                }
            ],
            "return": {
                "description": "True, if v is of type string.",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 93,
            "description": "Checks if the value of a given variable is of type number.",
            "params": [
                {
                    "name": "v",
                    "description": "A variable of any type."
                }
            ],
            "return": {
                "description": "True, if v is of type number.",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 102,
            "description": "Checks if a given variable references a function.",
            "params": [
                {
                    "name": "v",
                    "description": "A variable of any type."
                }
            ],
            "return": {
                "description": "True, if v is a function.",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 111,
            "description": "Checks if a given variable references an array.",
            "params": [
                {
                    "name": "v",
                    "description": "A variable of any type."
                }
            ],
            "return": {
                "description": "True, if v is of type array.",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 129,
            "description": "Tests if the input variable is an Object",
            "params": [
                {
                    "name": "v",
                    "description": ""
                }
            ],
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 137,
            "description": "Checks if a given variable is a reference of a JSXGraph Point element.",
            "params": [
                {
                    "name": "v",
                    "description": "A variable of any type."
                }
            ],
            "return": {
                "description": "True, if v is of type JXG.Point.",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 150,
            "description": "Checks if a given variable is a reference of a JSXGraph Point element or an array of length at least two or\na function returning an array of length two or three.",
            "params": [
                {
                    "name": "board",
                    "description": "",
                    "type": "JXG.Board"
                },
                {
                    "name": "v",
                    "description": "A variable of any type."
                }
            ],
            "return": {
                "description": "True, if v is of type JXG.Point.",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 173,
            "description": "Checks if a given variable is neither undefined nor null. You should not use this together with global\nvariables!",
            "params": [
                {
                    "name": "v",
                    "description": "A variable of any type."
                }
            ],
            "return": {
                "description": "True, if v is neither undefined nor null.",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 185,
            "description": "Handle default parameters.",
            "params": [
                {
                    "name": "v",
                    "description": "Given value"
                },
                {
                    "name": "d",
                    "description": "Default value"
                }
            ],
            "return": {
                "description": "<tt>d</tt>, if <tt>v</tt> is undefined or null."
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 199,
            "description": "Converts a string containing either <strong>true</strong> or <strong>false</strong> into a boolean value.",
            "params": [
                {
                    "name": "s",
                    "description": "String containing either <strong>true</strong> or <strong>false</strong>.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String typed boolean value converted to boolean.",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 220,
            "description": "Convert a String, a number or a function into a function. This method is used in Transformation.js",
            "params": [
                {
                    "name": "board",
                    "description": "Reference to a JSXGraph board. It is required to resolve dependencies given\nby a GEONE<sub>X</sub>T string, thus it must be a valid reference only in case one of the param\nvalues is of type string.",
                    "type": "JXG.Board"
                },
                {
                    "name": "param",
                    "description": "An array containing strings, numbers, or functions.",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "Length of <tt>param</tt>.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A function taking one parameter k which specifies the index of the param element\nto evaluate.",
                "type": "Function"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 242,
            "description": "Convert a String, number or function into a function.",
            "params": [
                {
                    "name": "term",
                    "description": "A variable of type string, function or number.",
                    "type": "String|Number|Function"
                },
                {
                    "name": "board",
                    "description": "Reference to a JSXGraph board. It is required to resolve dependencies given\nby a GEONE<sub>X</sub>T string, thus it must be a valid reference only in case one of the param\nvalues is of type string.",
                    "type": "JXG.Board"
                },
                {
                    "name": "variableName",
                    "description": "Only required if evalGeonext is set to true. Describes the variable name\nof the variable in a GEONE<sub>X</sub>T string given as term.",
                    "type": "String"
                },
                {
                    "name": "evalGeonext",
                    "description": "Set this true, if term should be treated as a GEONE<sub>X</sub>T string.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "A function evaluation the value given by term or null if term is not of type string,\nfunction or number.",
                "type": "Function"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 268,
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 274,
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 287,
            "description": "Test if the parents array contains existing points. If instead parents contains coordinate arrays or function returning coordinate arrays\nfree points with these coordinates are created.",
            "params": [
                {
                    "name": "board",
                    "description": "Board object",
                    "type": "JXG.Board"
                },
                {
                    "name": "parents",
                    "description": "Array containing parent elements for a new object. This array may contain\n  <ul>\n    <li> {@link JXG.Point} objects\n    <li> {@link JXG.Element#name} of {@link JXG.Point} objects\n    <li> {@link JXG.Element#id} of {@link JXG.Point} objects\n    <li> Coordinates of points given as array of numbers of length two or three, e.g. [2, 3].\n    <li> Coordinates of points given as array of functions of length two or three. Each function returns one coordinate, e.g.\n         [function(){ return 2; }, function(){ return 3; }]\n    <li> Function returning coordinates, e.g. function() { return [2, 3]; }\n  </ul>\nIn the last three cases a new point will be created.",
                    "type": "Array"
                },
                {
                    "name": "attrClass",
                    "description": "Main attribute class of newly created points, see {@link JXG@copyAttributes}",
                    "type": "String"
                },
                {
                    "name": "attrArray",
                    "description": "List of subtype attributes for the newly created points. The list of subtypes is mapped to the list of new points.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "List of newly created {@link JXG.Point} elements or false if not all returned elements are points.",
                "type": "Array"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 348,
            "description": "Generates a function which calls the function fn in the scope of owner.",
            "params": [
                {
                    "name": "fn",
                    "description": "Function to call.",
                    "type": "Function"
                },
                {
                    "name": "owner",
                    "description": "Scope in which fn is executed.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A function with the same signature as fn.",
                "type": "Function"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 360,
            "description": "If <tt>val</tt> is a function, it will be evaluated without giving any parameters, else the input value\nis just returned.",
            "params": [
                {
                    "name": "val",
                    "description": "Could be anything. Preferably a number or a function."
                }
            ],
            "return": {
                "description": "If <tt>val</tt> is a function, it is evaluated and the result is returned. Otherwise <tt>val</tt> is returned."
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 374,
            "description": "Search an array for a given value.",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": ""
                },
                {
                    "name": "sub",
                    "description": "Use this property if the elements of the array are objects.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The index of the first appearance of the given value, or\n<tt>-1</tt> if the value was not found.",
                "type": "Number"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 398,
            "description": "Eliminates duplicate entries in an array consisting of numbers and strings.",
            "params": [
                {
                    "name": "a",
                    "description": "An array of numbers and/or strings.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The array with duplicate entries eliminated.",
                "type": "Array"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 422,
            "description": "Swaps to array elements.",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "i",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "j",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Reference to the given array.",
                "type": "Array"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 439,
            "description": "Generates a copy of an array and removes the duplicate entries. The original\nArray will be altered.",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 482,
            "description": "Checks if an array contains an element equal to <tt>val</tt> but does not check the type!",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 492,
            "description": "Converts an array of {@link JXG.Coords} objects into a coordinate matrix.",
            "params": [
                {
                    "name": "coords",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "split",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 519,
            "description": "Compare two arrays.",
            "params": [
                {
                    "name": "a1",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "a2",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "<tt>true</tt>, if the arrays coefficients are of same type and value.",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 546,
            "description": "Removes an element from the given array",
            "params": [
                {
                    "name": "ar",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "el",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 565,
            "description": "Truncate a number <tt>n</tt> after <tt>p</tt> decimals.",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "p",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 590,
            "description": "Truncate a number <tt>val</tt> automatically.",
            "params": [
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 610,
            "description": "Extracts the keys of a given object.",
            "params": [
                {
                    "name": "object",
                    "description": "The object the keys are to be extracted"
                },
                {
                    "name": "onlyOwn",
                    "description": "If true, hasOwnProperty() is used to verify that only keys are collected\nthe object owns itself and not some other object in the prototype chain."
                }
            ],
            "return": {
                "description": "All keys of the given object.",
                "type": "Array"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 636,
            "description": "This outputs an object with a base class reference to the given object. This is useful if\nyou need a copy of an e.g. attributes object and want to overwrite some of the attributes\nwithout changing the original object.",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to be embedded.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object with a base class reference to <tt>obj</tt>.",
                "type": "Object"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 651,
            "description": "Embeds an existing object into another one just like {@link #clone} and copies the contents of the second object\nto the new one. Warning: The copied properties of obj2 are just flat copies.",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to be copied.",
                    "type": "Object"
                },
                {
                    "name": "obj2",
                    "description": "Object with data that is to be copied to the new one as well.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Copy of given object including some new/overwritten data from obj2.",
                "type": "Object"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 678,
            "description": "Recursively merges obj2 into obj1. Contrary to {@link JXG#deepCopy} this won't create a new object\nbut instead will",
            "params": [
                {
                    "name": "obj1",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "obj2",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 717,
            "description": "Creates a deep copy of an existing object, i.e. arrays or sub-objects are copied component resp.\nelement-wise instead of just copying the reference. If a second object is supplied, the two objects\nare merged into one object. The properties of the second object have priority.",
            "params": [
                {
                    "name": "obj",
                    "description": "This object will be copied.",
                    "type": "Object"
                },
                {
                    "name": "obj2",
                    "description": "This object will merged into the newly created object",
                    "type": "Object"
                },
                {
                    "name": "toLower",
                    "description": "If true the keys are convert to lower case. This is needed for visProp, see JXG#copyAttributes",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "copy of obj or merge of obj and obj2.",
                "type": "Object"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 788,
            "description": "Generates an attributes object that is filled with default values from the Options object\nand overwritten by the user speciified attributes.",
            "params": [
                {
                    "name": "attributes",
                    "description": "user specified attributes",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "defaults options",
                    "type": "Object"
                },
                {
                    "name": "s",
                    "description": "variable number of strings, e.g. 'slider', subtype 'point1'.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The resulting attributes object",
                "type": "Object"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 873,
            "description": "Copy all prototype methods from object \"superObject\" to object\n\"subObject\". The constructor of superObject will be available\nin subObject as subObject.constructor[constructorName].",
            "params": [
                {
                    "name": "subObj",
                    "description": "A JavaScript object which receives new methods.",
                    "type": "Object"
                },
                {
                    "name": "superObj",
                    "description": "A JavaScript object which lends its prototype methods to subObject",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "constructorName Under this name the constructor of superObj will be available\nin subObject.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 892,
            "description": "Converts a JavaScript object into a JSON string.",
            "params": [
                {
                    "name": "obj",
                    "description": "A JavaScript object, functions will be ignored.",
                    "type": "Object"
                },
                {
                    "name": "noquote",
                    "description": "No quotes around the name of a property.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The given object stored in a JSON string.",
                "type": "String"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 956,
            "description": "Resets visPropOld.",
            "params": [
                {
                    "name": "el",
                    "description": "",
                    "type": "JXG.GeometryElement"
                }
            ],
            "return": {
                "description": "",
                "type": "GeometryElement"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 980,
            "description": "Checks if an object contains a key, whose value equals to val.",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "val",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 1000,
            "description": "Replaces all occurences of &amp; by &amp;amp;, &gt; by &amp;gt;, and &lt; by &amp;lt;.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 1009,
            "description": "Eliminates all substrings enclosed by &lt; and &gt; and replaces all occurences of\n&amp;amp; by &amp;, &amp;gt; by &gt;, and &amp;lt; by &lt;.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 1021,
            "description": "Makes a string lower case except for the first character which will be upper case.",
            "params": [
                {
                    "name": "str",
                    "description": "Arbitrary string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The capitalized string.",
                "type": "String"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 1030,
            "description": "Make numbers given as strings nicer by removing all unnecessary leading and trailing zeroes.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 1050,
            "description": "Filter an array of elements.",
            "params": [
                {
                    "name": "list",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Object|function"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 1109,
            "description": "Remove all leading and trailing whitespaces from a given string.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 1121,
            "description": "Convert HTML tags to entities or use html_sanitize if the google caja html sanitizer is available.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "caja",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Sanitized string",
                "type": "String"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/type.js",
            "line": 1139,
            "description": "If <tt>s</tt> is a slider, it returns the sliders value, otherwise it just returns the given value.",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "s.Value() if s is an element of type slider, s otherwise",
                "type": "*"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/uuid.js",
            "line": 1,
            "description": "Generate a random uuid.\nWritten by http://www.broofa.com (robert@broofa.com)\n\nCopyright (c) 2010 Robert Kieffer\nDual licensed under the MIT and GPL licenses.",
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n  var uuid = JXG.Util.genUUID();\n  > uuid = '92329D39-6F5C-4520-ABFC-AAB64544E172'"
            ],
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/uuid.js",
            "line": 28,
            "description": "General utility routines",
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/xml.js",
            "line": 45,
            "description": "Holds browser independent xml parsing routines. Won't work in environments other than browsers.",
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/xml.js",
            "line": 50,
            "description": "Cleans out unneccessary whitespaces in a chunk of xml.",
            "params": [
                {
                    "name": "el",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/xml.js",
            "line": 67,
            "description": "Converts a given string into a XML tree.",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The xml tree represented by the root node.",
                "type": "Object"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/zip.js",
            "line": 44,
            "fileoverview": "Utilities for uncompressing and base64 decoding",
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/zip.js",
            "line": 798,
            "description": "Extract file given by name from zip archive.",
            "itemtype": "method",
            "name": "unzipFile",
            "params": [
                {
                    "name": "name",
                    "description": "File name of file in zip archhive",
                    "type": "String"
                }
            ],
            "return": {
                "description": "File as string (usually base64 encoded)",
                "type": "String"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/utils/zip.js",
            "line": 819,
            "description": "Extract next file from zip archive.",
            "itemtype": "method",
            "name": "unzip",
            "return": {
                "description": "File as string (usually base64 encoded)",
                "type": "String"
            },
            "class": "JXG.Util.Unzip"
        },
        {
            "file": "src/jsxgraph.js",
            "line": 49,
            "fileoverview": "The JSXGraph object is defined in this file. JXG.JSXGraph controls all boards.\nIt has methods to create, save, load and free boards. Additionally some helper functions are\ndefined in this file directly in the JXG namespace.",
            "version": "0.99",
            "class": "JXG.JSXGraph"
        },
        {
            "file": "src/jsxgraph.js",
            "line": 71,
            "description": "Stores the renderer that is used to draw the boards.",
            "type": "String",
            "class": "JXG.JSXGraph"
        },
        {
            "file": "src/jsxgraph.js",
            "line": 160,
            "description": "Initialise a new board.",
            "params": [
                {
                    "name": "box",
                    "description": "Html-ID to the Html-element in which the board is painted.",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "An object that sets some of the board properties. Most of these properties can be set via JXG.Options. Valid properties are\n<ul>\n    <li><b>boundingbox</b>: An array containing four numbers describing the left, top, right and bottom boundary of the board in user coordinates</li>\n    <li><b>keepaspectratio</b>: If <tt>true</tt>, the bounding box is adjusted to the same aspect ratio as the aspect ratio of the div containing the board.</li>\n    <li><b>showCopyright</b>: Show the copyright string in the top left corner.</li>\n    <li><b>showNavigation</b>: Show the navigation buttons in the bottom right corner.</li>\n    <li><b>zoom</b>: Allow the user to zoom with the mouse wheel or the two-fingers-zoom gesture.</li>\n    <li><b>pan</b>: Allow the user to pan with shift+drag mouse or two-fingers-pan gesture.</li>\n    <li><b>axis</b>: If set to true, show the axis. Can also be set to an object that is given to both axes as an attribute object.</li>\n    <li><b>grid</b>: If set to true, shows the grid. Can also bet set to an object that is given to the grid as its attribute object.</li>\n    <li><b>registerEvents</b>: Register mouse / touch events.</li>\n</ul>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Reference to the created board.",
                "type": "JXG.Board"
            },
            "class": "JXG.JSXGraph"
        },
        {
            "file": "src/jsxgraph.js",
            "line": 256,
            "description": "Load a board from a file containing a construction made with either GEONExT,\nIntergeo, Geogebra, or Cinderella.",
            "params": [
                {
                    "name": "box",
                    "description": "HTML-ID to the HTML-element in which the board is painted.",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "base64 encoded string.",
                    "type": "String"
                },
                {
                    "name": "format",
                    "description": "containing the file format: 'Geonext' or 'Intergeo'.",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Reference to the created board.",
                "type": "JXG.Board"
            },
            "references": [
                "JXG.FileReader",
                "JXG.GeonextReader",
                "JXG.GeogebraReader",
                "JXG.IntergeoReader",
                "JXG.CinderellaReader"
            ],
            "class": "JXG.JSXGraph"
        },
        {
            "file": "src/jsxgraph.js",
            "line": 296,
            "description": "Load a board from a base64 encoded string containing a construction made with either GEONExT,\nIntergeo, Geogebra, or Cinderella.",
            "params": [
                {
                    "name": "box",
                    "description": "HTML-ID to the HTML-element in which the board is painted.",
                    "type": "String"
                },
                {
                    "name": "string",
                    "description": "base64 encoded string.",
                    "type": "String"
                },
                {
                    "name": "format",
                    "description": "containing the file format: 'Geonext' or 'Intergeo'.",
                    "type": "String"
                },
                {
                    "name": "attributes",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Reference to the created board.",
                "type": "JXG.Board"
            },
            "references": [
                "JXG.FileReader",
                "JXG.GeonextReader",
                "JXG.GeogebraReader",
                "JXG.IntergeoReader",
                "JXG.CinderellaReader"
            ],
            "class": "JXG.JSXGraph"
        },
        {
            "file": "src/jsxgraph.js",
            "line": 336,
            "description": "Delete a board and all its contents.",
            "params": [
                {
                    "name": "board",
                    "description": "HTML-ID to the DOM-element in which the board is drawn.",
                    "type": "JXG.Board,String"
                }
            ],
            "class": "JXG.JSXGraph"
        },
        {
            "file": "src/jsxgraph.js",
            "line": 380,
            "deprecated": true,
            "deprecationMessage": "Use JXG#registerElement",
            "params": [
                {
                    "name": "element",
                    "description": ""
                },
                {
                    "name": "creator",
                    "description": ""
                }
            ],
            "class": "JXG.JSXGraph"
        },
        {
            "file": "src/jxg.js",
            "line": 56,
            "description": "JXG is the top object of JSXGraph and defines the namespace",
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 72,
            "description": "Copy all properties of the <tt>extension</tt> object to <tt>object</tt>.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "onlyOwn",
                    "description": "Only consider properties that belong to extension itself, not any inherited properties.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "toLower",
                    "description": "If true the keys are convert to lower case. This is needed for visProp, see JXG#copyAttributes",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 103,
            "description": "Store a reference to every board in this central list. This will at some point\nreplace JXG.JSXGraph.boards.",
            "itemtype": "property",
            "name": "boards",
            "type": "Object",
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 112,
            "description": "Store the available file readers in this structure.",
            "itemtype": "property",
            "name": "readers",
            "type": "Object",
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 120,
            "description": "Associative array that keeps track of all constructable elements registered\nvia {@link JXG.JSXGraph.registerElement}.",
            "itemtype": "property",
            "name": "elements",
            "type": "Object",
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 129,
            "description": "This registers a new construction element to JSXGraph for the construction via the {@link JXG.Board.create}\ninterface.",
            "itemtype": "method",
            "name": "registerElement",
            "params": [
                {
                    "name": "element",
                    "description": "The elements name. This is case-insensitive, existing elements with the same name\nwill be overwritten.",
                    "type": "String"
                },
                {
                    "name": "creator",
                    "description": "A reference to a function taking three parameters: First the board, the element is\nto be created on, a parent element array, and an attributes object. See {@link JXG.createPoint} or any other\n<tt>JXG.create...</tt> function for an example.",
                    "type": "Function"
                }
            ],
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 145,
            "description": "Register a file reader.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "reader",
                    "description": "A file reader. This object has to provide two methods: <tt>prepareString()</tt>\nand <tt>read()</tt>.",
                    "type": "Function"
                },
                {
                    "name": "ext",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "registerReader",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 165,
            "description": "Creates a shortcut to a method, e.g. {@link JXG.Board#createElement} is a shortcut to {@link JXG.Board#create}.\nSometimes the target is undefined by the time you want to define the shortcut so we need this little helper.",
            "itemtype": "method",
            "name": "shortcut",
            "params": [
                {
                    "name": "object",
                    "description": "The object the method we want to create a shortcut for belongs to.",
                    "type": "Object"
                },
                {
                    "name": "fun",
                    "description": "The method we want to create a shortcut for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A function that calls the given method.",
                "type": "Function"
            },
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 180,
            "description": "s may be a string containing the name or id of an element or even a reference\nto the element itself. This function returns a reference to the element. Search order: id, name.",
            "itemtype": "method",
            "name": "getRef",
            "params": [
                {
                    "name": "board",
                    "description": "Reference to the board the element belongs to.",
                    "type": "JXG.Board"
                },
                {
                    "name": "s",
                    "description": "String or reference to a JSXGraph element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Reference to the object given in parameter object",
                "type": "Object"
            },
            "deprecated": true,
            "deprecationMessage": "Use {@link JXG.Board#select}",
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 195,
            "description": "This is just a shortcut to {@link JXG.getRef}.",
            "deprecated": true,
            "deprecationMessage": "Use {@link JXG.Board#select}.",
            "itemtype": "method",
            "name": "getReference",
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 206,
            "description": "This method issues a warning to the developer that the given function is deprecated\nand, if available, offers an alternative to the deprecated function.",
            "itemtype": "method",
            "name": "deprecated",
            "params": [
                {
                    "name": "what",
                    "description": "Describes the function that is deprecated",
                    "type": "String"
                },
                {
                    "name": "replacement",
                    "description": "The replacement that should be used instead.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 224,
            "description": "Outputs a warning via console.warn(), if available. If console.warn() is\nunavailable this function will look for an HTML element with the id 'warning'\nand append the warning to this element's innerHTML.",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "warning",
                    "description": "The warning text",
                    "type": "String"
                }
            ],
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 240,
            "description": "Add something to the debug log. If available a JavaScript debug console is used. Otherwise\nwe're looking for a HTML div with id \"debug\". If this doesn't exist, too, the output is omitted.",
            "itemtype": "method",
            "name": "debugInt",
            "params": [
                {
                    "name": "s",
                    "description": "An arbitrary number of parameters."
                }
            ],
            "references": [
                "JXG#debugWST"
            ],
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 261,
            "description": "Add something to the debug log. If available a JavaScript debug console is used. Otherwise\nwe're looking for a HTML div with id \"debug\". If this doesn't exist, too, the output is omitted.\nThis method adds a stack trace (if available).",
            "itemtype": "method",
            "name": "debugWST",
            "params": [
                {
                    "name": "s",
                    "description": "An arbitrary number of parameters."
                }
            ],
            "references": [
                "JXG#debug"
            ],
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 281,
            "description": "TODO",
            "itemtype": "method",
            "name": "debugLine",
            "params": [
                {
                    "name": "s",
                    "description": "Unused",
                    "type": "Object"
                }
            ],
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/jxg.js",
            "line": 297,
            "description": "Add something to the debug log. If available a JavaScript debug console is used. Otherwise\nwe're looking for a HTML div with id \"debug\". If this doesn't exist, too, the output is omitted.",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "s",
                    "description": "An arbitrary number of parameters."
                }
            ],
            "references": [
                "JXG#debugWST",
                "JXG#debugLine",
                "JXG#debugInt"
            ],
            "class": "JXG",
            "module": "JXG"
        },
        {
            "file": "src/loadjsxgraph.js",
            "line": 39,
            "description": "JSXGraph namespace. Holds all classes, objects, functions and variables belonging to JSXGraph\nto reduce the risk of interfering with other JavaScript code.",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 69,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 75,
            "description": "Bounding box of the visible area in user coordinates.\nIt is an array consisting of four values:\n[x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub>]\n\nThe canvas will be spanned from the upper left corner (<sub>1</sub>, y<sub>1</sub>)\nto the lower right corner (x<sub>2</sub>, y<sub>2</sub>).",
            "itemtype": "property",
            "name": "JXG.Board#boundingbox",
            "type": "Array",
            "default": "[-5, 5, 5, -5]",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 89,
            "description": "Additional zoom factor multiplied to {@link JXG.Board#zoomX} and {@link JXG.Board#zoomY}.",
            "itemtype": "property",
            "name": "JXG.Board#zoomFactor",
            "type": "Number",
            "default": "1.0",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 98,
            "description": "Zoom factor in horizontal direction.",
            "itemtype": "property",
            "name": "JXG.Board#zoomX",
            "references": [
                "JXG.Board#zoomY"
            ],
            "type": "Number",
            "default": "1.0",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 108,
            "description": "Zoom factor in vertical direction.",
            "itemtype": "property",
            "name": "JXG.Board#zoomY",
            "references": [
                "JXG.Board#zoomX"
            ],
            "type": "Number",
            "default": "1.0",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 118,
            "description": "Show copyright string in canvas.",
            "itemtype": "property",
            "name": "JXG.Board#showCopyright",
            "type": "Boolean",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 127,
            "description": "Show default axis.\nIf shown, the horizontal axis can be accessed via JXG.Board.defaultAxis.x, the\nvertical axis can be accessed via JXG.Board.defaultAxis.y. Both axes have a sub-element \"defaultTicks\".",
            "itemtype": "property",
            "name": "JXG.Board#axis",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 138,
            "description": "Display of navigation arrows and zoom buttons",
            "itemtype": "property",
            "name": "JXG.Board#showNavigation",
            "type": "Boolean",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 147,
            "description": "Show a button to force reload of a construction.\nWorks only with the JessieCode tag",
            "itemtype": "property",
            "name": "JXG.Board#showReload",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 157,
            "description": "Show a button which allows to clear all traces of a board.",
            "itemtype": "property",
            "name": "JXG.Board#showClearTraces",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 166,
            "description": "If set to true the bounding box might be changed such that\nthe ratio of width and height of the hosting HTML div is equal\nto the ratio of wifth and height of the bounding box.\n\nThis is necessary if circles should look like circles and not\nlike ellipses. It is recommended to set keepAspectRatio = true\nfor geometric applets. For function plotting keepAspectRatio = false\nmight be the better choice.",
            "itemtype": "property",
            "name": "JXG.Board#keepAspectRatio",
            "references": [
                "JXG.Board#boundingbox",
                "JXG.Board#setBoundingBox"
            ],
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 184,
            "description": "If set true and\nhasPoint() is true for both an element and it's label,\nthe element (and not the label) is taken as drag element.\n\nIf set false and hasPoint() is true for both an element and it's label,\nthe label is taken (if it is on a higher layer than the element)",
            "itemtype": "property",
            "name": "JXG.Board#ignoreLabels",
            "type": "Booelan",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 198,
            "description": "Maximum number of digits in automatic label generation.\nFor example, if set to 1 automatic point labels end at \"Z\".\nIf set to 2, point labels end at \"ZZ\".",
            "itemtype": "property",
            "name": "JXG.Board#maxNameLength",
            "references": [
                "JXG.Board#generateName"
            ],
            "type": "Number",
            "default": "1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 210,
            "description": "Supply the document object. Defaults to window.document",
            "itemtype": "property",
            "name": "JXG.Board#document",
            "type": "DOM object",
            "default": "false (meaning window.document)",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 219,
            "description": "If true the first element of the set JXG.board.objects having hasPoint==true is taken as drag element.",
            "itemtype": "property",
            "name": "JXG.Board#takeFirst",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 228,
            "description": "If true, when read from a file or string - the size of the div can be changed by the construction text.",
            "itemtype": "property",
            "name": "JXG.Board#takeSizeFromFile",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 237,
            "description": "Default rendering engine. Possible values are 'svg', 'canvas', 'vml', 'no'.\nIf the rendering engine is not available JSXGraph tries to detect a different engine.",
            "itemtype": "property",
            "name": "JXG.Board#renderer",
            "type": "String",
            "default": "'svg'",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 247,
            "description": "Time (in msec) between two animation steps. Used in\n{@link JXG.CoordsElement#moveAlong}, {@link JXG.CoordsElement#moveTo} and {@link JXG.CoordsElement#visit}.",
            "itemtype": "property",
            "name": "JXG.Board#animationDelay",
            "type": "Number",
            "default": "35",
            "references": [
                "JXG.CoordsElement#moveAlong",
                "JXG.CoordsElement#moveTo",
                "JXG.CoordsElement#visit"
            ],
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 260,
            "description": "Allow user interaction by registering mouse and touch events.",
            "itemtype": "property",
            "name": "JXG.Board#registerEvents",
            "type": "Boolean",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 269,
            "description": "Change redraw strategy in SVG rendering engine.\n\nIf set to 'svg', before every redrawing of the JSXGraph construction\nthe SVG sub-tree of the DOM tree is taken out of the DOM.\n\nIf set to 'all', before every redrawing of the JSXGraph construction the\ncomplete DOM tree is taken out of the DOM.\nIf set to 'none' the redrawing is done in-place.\n\nUsing 'svg' or 'all' speeds up the update process considerably. The risk\nis that if there is an exception, only a white div or window is left.",
            "itemtype": "property",
            "name": "JXG.Board#name",
            "type": "String",
            "default": "'svg'",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 288,
            "description": "A number that will be added to the absolute position of the board used in mouse coordinate\ncalculations in {@link JXG.Board#getCoordsTopLeftCorner}.",
            "itemtype": "property",
            "name": "JXG.Board#offsetX",
            "references": [
                "JXG.Board#offsetY"
            ],
            "type": "Number",
            "default": "0",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 299,
            "description": "A number that will be added to the absolute position of the board used in mouse coordinate\ncalculations in {@link JXG.Board#getCoordsTopLeftCorner}.",
            "itemtype": "property",
            "name": "JXG.Board#offsetY",
            "references": [
                "JXG.Board#offsetX"
            ],
            "type": "Number",
            "default": "0",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 310,
            "description": "Control the possibilities for zoom interaction.\n\nPossible sub-attributes with default values are:\n<pre>\nzoom: {\n  factorX: 1.25,  // horizontal zoom factor (multiplied to {@link JXG.Board#zoomX})\n  factorY: 1.25,  // vertical zoom factor (multiplied to {@link JXG.Board#zoomY})\n  wheel: false,   // allow zooming by mouse wheel\n  needshift: false, // mouse wheel zooming needs pressing of the shift key\n  eps: 0.1        // minimal values of {@link JXG.Board#zoomX} and {@link JXG.Board#zoomY}\n}\n</pre>",
            "itemtype": "property",
            "name": "JXG.Board#zoom",
            "type": "Object",
            "default": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 336,
            "description": "Control the possibilities for panning interaction (i.e. moving the origin).\n\nPossible sub-attributes with default values are:\n<pre>\npan: {\n  enabled: true   // Allow panning\n  needTwoFingers: true, // panningis done with two fingers on touch devices\n  needshift: true, // mouse panning needs pressing of the shift key\n}\n</pre>",
            "itemtype": "property",
            "name": "JXG.Board#pan",
            "type": "Object",
            "default": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 357,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 360,
            "description": "Options that are used by the navigation bar.\n\nDefault values are\n<pre>\nJXG.Option.navbar: {\n  strokeColor: '#333333',\n  fillColor: 'transparent',\n  highlightFillColor: '#aaaaaa',\n  padding: '2px',\n  position: 'absolute',\n  fontSize: '14px',\n  cursor: 'pointer',\n  zIndex: '100',\n  right: '5px',\n  bottom: '5px'\n},\n</pre>",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 400,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 404,
            "description": "The stroke color of the given geometry element.",
            "type": "String",
            "itemtype": "property",
            "name": "JXG.GeometryElement#strokeColor",
            "references": [
                "JXG.GeometryElement#highlightStrokeColor",
                "JXG.GeometryElement#strokeWidth",
                "JXG.GeometryElement#strokeOpacity",
                "JXG.GeometryElement#highlightStrokeOpacity"
            ],
            "default": "{@link JXG.Options.elements.color#strokeColor}",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 416,
            "description": "The stroke color of the given geometry element when the user moves the mouse over it.",
            "type": "String",
            "itemtype": "property",
            "name": "JXG.GeometryElement#highlightStrokeColor",
            "references": [
                "JXG.GeometryElement#strokeColor",
                "JXG.GeometryElement#strokeWidth",
                "JXG.GeometryElement#strokeOpacity",
                "JXG.GeometryElement#highlightStrokeOpacity"
            ],
            "default": "{@link JXG.Options.elements.color#highlightStrokeColor}",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 428,
            "description": "The fill color of this geometry element.",
            "type": "String",
            "itemtype": "property",
            "name": "JXG.GeometryElement#fillColor",
            "references": [
                "JXG.GeometryElement#highlightFillColor",
                "JXG.GeometryElement#fillOpacity",
                "JXG.GeometryElement#highlightFillOpacity"
            ],
            "default": "{@link JXG.Options.elements.color#fillColor}",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 439,
            "description": "The fill color of the given geometry element when the mouse is pointed over it.",
            "type": "String",
            "itemtype": "property",
            "name": "JXG.GeometryElement#highlightFillColor",
            "references": [
                "JXG.GeometryElement#fillColor",
                "JXG.GeometryElement#fillOpacity",
                "JXG.GeometryElement#highlightFillOpacity"
            ],
            "default": "{@link JXG.Options.elements.color#highlightFillColor}",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 450,
            "description": "Opacity for element's stroke color.",
            "type": "number",
            "itemtype": "property",
            "name": "JXG.GeometryElement#strokeOpacity",
            "references": [
                "JXG.GeometryElement#strokeColor",
                "JXG.GeometryElement#highlightStrokeColor",
                "JXG.GeometryElement#strokeWidth",
                "JXG.GeometryElement#highlightStrokeOpacity"
            ],
            "default": "{@link JXG.Options.elements#strokeOpacity}",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 462,
            "description": "Opacity for stroke color when the object is highlighted.",
            "type": "number",
            "itemtype": "property",
            "name": "JXG.GeometryElement#highlightStrokeOpacity",
            "references": [
                "JXG.GeometryElement#strokeColor",
                "JXG.GeometryElement#highlightStrokeColor",
                "JXG.GeometryElement#strokeWidth",
                "JXG.GeometryElement#strokeOpacity"
            ],
            "default": "{@link JXG.Options.elements#highlightStrokeOpacity}",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 474,
            "description": "Opacity for fill color.",
            "type": "number",
            "itemtype": "property",
            "name": "JXG.GeometryElement#fillOpacity",
            "references": [
                "JXG.GeometryElement#fillColor",
                "JXG.GeometryElement#highlightFillColor",
                "JXG.GeometryElement#highlightFillOpacity"
            ],
            "default": "{@link JXG.Options.elements.color#fillOpacity}",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 485,
            "description": "Opacity for fill color when the object is highlighted.",
            "type": "number",
            "itemtype": "property",
            "name": "JXG.GeometryElement#highlightFillOpacity",
            "references": [
                "JXG.GeometryElement#fillColor",
                "JXG.GeometryElement#highlightFillColor",
                "JXG.GeometryElement#fillOpacity"
            ],
            "default": "{@link JXG.Options.elements.color#highlightFillOpacity}",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 496,
            "description": "Width of the element's stroke.",
            "type": "number",
            "itemtype": "property",
            "name": "JXG.GeometryElement#strokeWidth",
            "references": [
                "JXG.GeometryElement#strokeColor",
                "JXG.GeometryElement#highlightStrokeColor",
                "JXG.GeometryElement#strokeOpacity",
                "JXG.GeometryElement#highlightStrokeOpacity"
            ],
            "default": "{@link JXG.Options.elements#strokeWidth}",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 508,
            "description": "Width of the element's stroke when the mouse is pointed over it.",
            "type": "number",
            "itemtype": "property",
            "name": "JXG.GeometryElement#highlightStrokeWidth",
            "references": [
                "JXG.GeometryElement#strokeColor",
                "JXG.GeometryElement#highlightStrokeColor",
                "JXG.GeometryElement#strokeOpacity",
                "JXG.GeometryElement#highlightStrokeOpacity",
                "JXG.GeometryElement#highlightFillColor"
            ],
            "default": "{@link JXG.Options.elements#strokeWidth}",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 522,
            "description": "If true the element is fixed and can not be dragged around. The element\nwill be repositioned on zoom and moveOrigin events.",
            "type": "Boolean",
            "default": "false",
            "itemtype": "property",
            "name": "JXG.GeometryElement#fixed",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 531,
            "description": "If true the element is fixed and can not be dragged around. The element\nwill even stay at its position on zoom and moveOrigin events.\nOnly free elements like points, texts, curves can be frozen.",
            "type": "Boolean",
            "default": "false",
            "itemtype": "property",
            "name": "JXG.GeometryElement#frozen",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 541,
            "description": "If true a label will display the element's name.",
            "type": "Boolean",
            "default": "false",
            "itemtype": "property",
            "name": "JXG.GeometryElement#withLabel",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 549,
            "description": "If false the element won't be visible on the board, otherwise it is shown.",
            "type": "boolean",
            "itemtype": "property",
            "name": "JXG.GeometryElement#visible",
            "references": [
                "JXG.GeometryElement#hideElement",
                "JXG.GeometryElement#showElement"
            ],
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 559,
            "description": "A private element will be inaccessible in certain environments, e.g. a graphical user interface.",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 565,
            "description": "Display layer which will contain the element.",
            "references": [
                "JXG.Options#layer"
            ],
            "default": "See {@link JXG.Options#layer}",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 572,
            "description": "Determines the elements border-style.\nPossible values are:\n<ul><li>0 for a solid line</li>\n<li>1 for a dotted line</li>\n<li>2 for a line with small dashes</li>\n\n\n<li>3 for a line with medium dashes</li>\n<li>4 for a line with big dashes</li>\n<li>5 for a line with alternating medium and big dashes and large gaps</li>\n<li>6 for a line with alternating medium and big dashes and small gaps</li></ul>",
            "type": "Number",
            "itemtype": "property",
            "name": "JXG.GeometryElement#dash",
            "default": "0",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 590,
            "description": "If true the element will get a shadow.",
            "type": "boolean",
            "itemtype": "property",
            "name": "JXG.GeometryElement#shadow",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 598,
            "description": "If true the element will be traced, i.e. on every movement the element will be copied\nto the background. Use {@link JXG.GeometryElement#clearTrace} to delete the trace elements.",
            "references": [
                "JXG.GeometryElement#clearTrace",
                "JXG.GeometryElement#traces",
                "JXG.GeometryElement#numTraces"
            ],
            "type": "Boolean",
            "default": "false",
            "itemtype": "property",
            "name": "JXG.GeometryElement#trace",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 610,
            "description": "Extra visual properties for traces of an element",
            "type": "Object",
            "references": [
                "JXG.GeometryElement#trace"
            ],
            "itemtype": "property",
            "name": "JXG.GeometryElement#traceAttributes",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 618,
            "type": "Boolean",
            "default": "true",
            "itemtype": "property",
            "name": "JXG.GeometryElement#highlight",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 626,
            "description": "If this is set to true, the element is updated in every update\ncall of the board. If set to false, the element is updated only after\nzoom events or more generally, when the bounding box has been changed.\nExamples for the latter behaviour should be axes.",
            "type": "Boolean",
            "default": "true",
            "references": [
                "JXG.GeometryElement#needsRegularUpdate"
            ],
            "itemtype": "property",
            "name": "JXG.GeometryElement#needsRegularUpdate",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 638,
            "description": "Snaps the element or its parents to the grid. Currently only relevant for points, circles,\nand lines. Points are snapped to grid directly, on circles and lines it's only the parent\npoints that are snapped",
            "type": "Boolean",
            "default": "false",
            "itemtype": "property",
            "name": "JXG.GeometryElement#snapToGrid",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 648,
            "description": "Determines whether two-finger manipulation of this object may change its size.\nIf set to false, the object is only rotated and translated.",
            "type": "Boolean",
            "default": "true",
            "itemtype": "property",
            "name": "JXG.GeometryElement#scalable",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 659,
            "description": "If true the element will be drawn in grey scale colors to visualize that it's only a draft.",
            "type": "boolean",
            "itemtype": "property",
            "name": "JXG.GeometryElement#draft",
            "default": "{@link JXG.Options.elements.draft#draft}",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 673,
            "access": "private",
            "tagname": "By default, an element is not a label. Do not change this.",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 679,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 686,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 690,
            "description": "A function that expects two {@link JXG.Coords}, the first one representing the coordinates of the\ntick that is to be labeled, the second one the coordinates of the center (the tick with position 0).",
            "type": "function",
            "itemtype": "property",
            "name": "Ticks#generateLabelText",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 699,
            "description": "A function that expects two {@link JXG.Coords}, the first one representing the coordinates of the\ntick that is to be labeled, the second one the coordinates of the center (the tick with position 0).",
            "deprecated": true,
            "deprecationMessage": "Use {@link JGX.Options@generateLabelValue}",
            "type": "function",
            "itemtype": "property",
            "name": "Ticks#generateLabelValue",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 709,
            "description": "Draw labels yes/no",
            "type": "Boolean",
            "itemtype": "property",
            "name": "Ticks#drawLabels",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 720,
            "description": "Use the unicode character 0x2212, i.e. the HTML entity &amp;minus; as minus sign.\nThat is &minus;1 instead of -1.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "Ticks#useUnicodeMinus",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 730,
            "description": "Determine the position of the tick with value 0. 'left' means point1 of the line, 'right' means point2,\nand 'middle' is equivalent to the midpoint of the defining points. This attribute is ignored if the parent\nline is of type axis and is parallel to either the x (i.e. y = 0) or the y (i.e. x = 0) axis.",
            "type": "String",
            "itemtype": "property",
            "name": "Ticks#anchor",
            "default": "'left'",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 741,
            "description": "Draw the zero tick, that lies at line.point1?",
            "type": "Boolean",
            "itemtype": "property",
            "name": "Ticks#drawZero",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 750,
            "description": "If the distance between two ticks is too big we could insert new ticks. If insertTicks\nis <tt>true</tt>, we'll do so, otherwise we leave the distance as is.\nThis option is ignored if equidistant is false. In the example below the distance between\ntwo ticks is given as <tt>1</tt> but because insertTicks is set to true many ticks will\nbe omitted in the rendering process to keep the display clear.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "Ticks#insertTicks",
            "references": [
                "Ticks#equidistant",
                "Ticks#minTicksDistance"
            ],
            "default": "false",
            "example": [
                "\n// Create an axis providing two coord pairs.\n  var p1 = board.create('point', [0, 0]);\n  var p2 = board.create('point', [50, 25]);\n  var l1 = board.create('line', [p1, p2]);\n  var t = board.create('ticks', [l1, 1], {\n     insertTicks: true,\n     majorHeight: -1,\n     label: {\n         offset: [4, -9]\n     },\n     drawLabels: true\n });\n<div id=\"2f6fb842-40bd-4223-aa28-3e9369d2097f\" style=\"width: 300px; height: 300px;\"></div>\n<script type=\"text/javascript\">\n(function () {\n  var board = JXG.JSXGraph.initBoard('2f6fb842-40bd-4223-aa28-3e9369d2097f', {boundingbox: [-100, 70, 70, -100], showcopyright: false, shownavigation: false});\n  var p1 = board.create('point', [0, 0]);\n  var p2 = board.create('point', [50, 25]);\n  var l1 = board.create('line', [p1, p2]);\n  var t = board.create('ticks', [l1, 1], {insertTicks: true, majorHeight: -1, label: {offset: [4, -9]}, drawLabels: true});\n})();\n</script>"
            ],
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 789,
            "description": "Total height of a minor tick. If negative the full height of the board is taken.",
            "type": "Number",
            "itemtype": "property",
            "name": "Ticks#minorHeight",
            "default": "4",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 798,
            "description": "Total height of a major tick. If negative the full height of the board is taken.",
            "type": "Number",
            "itemtype": "property",
            "name": "Ticks#majorHeight",
            "default": "10",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 807,
            "description": "Decides in which direction finite ticks are visible. Possible values are 0=false or 1=true.\nIn case of [0,1] the tick is only visible to the right of the line. In case of\n[1,0] the tick is only visible to the left of the line.",
            "type": "Array",
            "itemtype": "property",
            "name": "Ticks#tickEndings",
            "default": "[1, 1]",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 818,
            "description": "The number of minor ticks between two major ticks.",
            "type": "Number",
            "itemtype": "property",
            "name": "Ticks#minorTicks",
            "default": "4",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 826,
            "description": "Scale the ticks but not the tick labels.",
            "type": "Number",
            "default": "1",
            "itemtype": "property",
            "name": "Ticks#scale",
            "references": [
                "Ticks#scaleSymbol"
            ],
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 835,
            "description": "A string that is appended to every tick, used to represent the scale\nfactor given in {@link JXG.Ticks#scaleSymbol}.",
            "type": "String",
            "default": "''",
            "itemtype": "property",
            "name": "Ticks#scaleSymbol",
            "references": [
                "Ticks#scale"
            ],
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 846,
            "description": "User defined labels for special ticks. Instead of the i-th tick's position, the i-th string stored in this array\nis shown. If the number of strings in this array is less than the number of special ticks, the tick's position is\nshown as a fallback.",
            "type": "Array",
            "itemtype": "property",
            "name": "Ticks#labels",
            "default": "[]",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 857,
            "description": "The maximum number of characters a tick label can use.",
            "type": "Number",
            "itemtype": "property",
            "name": "Ticks#maxLabelLength",
            "references": [
                "Ticks#precision"
            ],
            "default": "5",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 867,
            "description": "If a label exceeds {@link JXG.Ticks#maxLabelLength} this determines the precision used to shorten the tick label.",
            "type": "Number",
            "itemtype": "property",
            "name": "Ticks#precision",
            "references": [
                "Ticks#maxLabelLength"
            ],
            "default": "3",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 877,
            "description": "The default distance between two ticks. Please be aware that this value does not have\nto be used if {@link JXG.Ticks#insertTicks} is set to true.",
            "type": "Number",
            "itemtype": "property",
            "name": "Ticks#ticksDistance",
            "references": [
                "Ticks#equidistant",
                "Ticks#insertTicks"
            ],
            "default": "1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 893,
            "description": "Whether line boundaries should be counted or not in the lower and upper bounds when\ncreating ticks.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "Ticks#includeBoundaries",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 903,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 919,
            "description": "Precision options.\n\nThe default values are\n<pre>\nJXG.Options.precision: {\n  touch: 30,\n  touchMax: 100,\n  mouse: 4,\n  epsilon: 0.0001,\n  hasPoint: 4\n}\n</pre>",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 941,
            "description": "Default ordering of the layers.\n\nThe default values are\n<pre>\nJXG.Options.layer: {\n  numlayers: 20, // only important in SVG\n  text: 9,\n  point: 9,\n  glider: 9,\n  arc: 8,\n  line: 7,\n  circle: 6,\n  curve: 5,\n  turtle: 5,\n  polygon: 3,\n  sector: 3,\n  angle: 3,\n  integral: 3,\n  axis: 2,\n  ticks: 2,\n  grid: 1,\n  image: 0,\n  trace: 0\n}\n</pre>",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 991,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 997,
            "description": "Radius of the sector, displaying the angle.",
            "type": "Number",
            "itemtype": "property",
            "name": "Angle#radius",
            "default": "0.5",
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1007,
            "description": "Display type of the angle field. Possible values are\n'sector' or 'sectordot' or 'square' or 'none'.",
            "type": "String",
            "default": "'sector'",
            "itemtype": "property",
            "name": "Angle#type",
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1018,
            "description": "Display type of the angle field in case of a right angle. Possible values are\n'sector' or 'sectordot' or 'square' or 'none'.",
            "type": "String",
            "default": "square",
            "itemtype": "property",
            "name": "Angle#orthoType",
            "references": [
                "Angle#orthoSensitivity"
            ],
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1030,
            "description": "Sensitivity (in degrees) to declare an angle as right angle.\nIf the angle measure is inside this distance from a rigth angle, the orthoType\nof the angle is used for display.",
            "type": "Number",
            "default": "1.0",
            "itemtype": "property",
            "name": "Angle#orthoSensitivity",
            "references": [
                "Angle#orthoType"
            ],
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1049,
            "deprecated": true,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1057,
            "deprecated": true,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1085,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1090,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1103,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1108,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1125,
            "description": "Attributes for ticks of the axis.",
            "type": "Ticks",
            "itemtype": "property",
            "name": "Axis#ticks",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1153,
            "description": "Attributes for first point the axis.",
            "type": "Point",
            "itemtype": "property",
            "name": "Axis#point1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1163,
            "description": "Attributes for second point the axis.",
            "type": "Point",
            "itemtype": "property",
            "name": "Axis#point2",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1173,
            "description": "Attributes for the axis label.",
            "type": "Label",
            "itemtype": "property",
            "name": "Axis#label",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1183,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1188,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1194,
            "description": "Attributes for the helper point of the bisector.",
            "type": "Point",
            "itemtype": "property",
            "name": "Bisector#point",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1207,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1212,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1216,
            "description": "Attributes for first line.",
            "type": "Line",
            "itemtype": "property",
            "name": "Bisectorlines#line1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1226,
            "description": "Attributes for second line.",
            "type": "Line",
            "itemtype": "property",
            "name": "Bisectorlines#line2",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1236,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1241,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1245,
            "description": "Control the attribute \"disabled\" of the HTML button.",
            "itemtype": "property",
            "name": "disabled",
            "memberof": "Button.prototype",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1256,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1261,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1273,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1278,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1282,
            "description": "Control the attribute \"disabled\" of the HTML checkbox.",
            "itemtype": "property",
            "name": "disabled",
            "memberof": "Checkbox.prototype",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1293,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1298,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1302,
            "description": "If <tt>true</tt>, moving the mouse over inner points triggers hasPoint.",
            "references": [
                "JXG.GeometryElement#hasPoint"
            ],
            "itemtype": "property",
            "name": "Circle#hasInnerPoints",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1317,
            "description": "Attributes for center point.",
            "type": "Point",
            "itemtype": "property",
            "name": "Circle#center",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1330,
            "description": "Attributes for circle label.",
            "type": "Label",
            "itemtype": "property",
            "name": "Circle#label",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1339,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1344,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1353,
            "description": "Attributes for center point.",
            "type": "Point",
            "itemtype": "property",
            "name": "Circumcircle#center",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1365,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1369,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1378,
            "description": "Attributes for center point.",
            "type": "Point",
            "itemtype": "property",
            "name": "CircumcircleArc#center",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1390,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1395,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1407,
            "description": "Attributes for center point.",
            "type": "Point",
            "itemtype": "property",
            "name": "Circle#point",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1419,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1424,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1433,
            "description": "Attributes for foci points.",
            "type": "Point",
            "itemtype": "property",
            "name": "Conic#foci",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1446,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1458,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1462,
            "description": "The data points of the curve are not connected with straight lines but with bezier curves.",
            "itemtype": "property",
            "name": "Curve#handDrawing",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1470,
            "description": "The curveType is set in {@link JXG.Curve#generateTerm} and used in {@link JXG.Curve#updateCurve}.\nPossible values are <ul>\n<li>'none'</li>\n<li>'plot': Data plot</li>\n<li>'parameter': we can not distinguish function graphs and parameter curves</li>\n<li>'functiongraph': function graph</li>\n<li>'polar'</li>\n<li>'implicit' (not yet)</li></ul>\nOnly parameter and plot are set directly. Polar is set with {@link JXG.GeometryElement#setAttribute} only.",
            "itemtype": "property",
            "name": "Curve#curveType",
            "type": "String",
            "default": "null",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1486,
            "description": "Apply Ramer-Douglas-Peuker smoothing.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "Curve#RDPsmoothing",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1495,
            "description": "Number of points used for plotting triggered by up events in case {@link Curve#doAdvancedPlot} is false.",
            "itemtype": "property",
            "name": "Curve#numberPointsHigh",
            "references": [
                "Curve#doAdvancedPlot"
            ],
            "type": "Number",
            "default": "1600",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1505,
            "description": "Number of points used for plotting triggered by move events in case {@link Curve#doAdvancedPlot} is false.",
            "itemtype": "property",
            "name": "Curve#numberPointsLow",
            "references": [
                "Curve#doAdvancedPlot"
            ],
            "type": "Number",
            "default": "400",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1515,
            "description": "If true use a recursive bisection algorithm.\nIt is slower, but usually the result is better. It tries to detect jumps\nand singularities.",
            "itemtype": "property",
            "name": "Curve#doAdvancedPlot",
            "type": "Boolean",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1526,
            "description": "If true use the algorithm by Gillam and Hohenwarter, which was default until version 0.98.",
            "itemtype": "property",
            "name": "Curve#doAdvancedPlotOld",
            "references": [
                "Curve#doAdvancedPlot"
            ],
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1536,
            "description": "Attributes for circle label.",
            "type": "Label",
            "itemtype": "property",
            "name": "Circle#label",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1546,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1550,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1555,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1560,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1576,
            "deprecated": true,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1580,
            "deprecated": true,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1584,
            "deprecated": true,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1589,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1598,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1602,
            "description": "These affect the DOM element input type=\"range\".\n The other attributes affect the DOM element div containing the range element.",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1619,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1624,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1633,
            "description": "Image rotation in degrees.",
            "itemtype": "property",
            "name": "Image#rotate",
            "type": "Number",
            "default": "0",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1642,
            "description": "Defines together with {@link Image#snapSizeY} the grid the image snaps on to.\nThe image will only snap on integer multiples to snapSizeX in x and snapSizeY in y direction.\nIf this value is equal to or less than <tt>0</tt>, it will use the grid displayed by the major ticks\nof the default ticks of the default x axes of the board.",
            "itemtype": "property",
            "name": "Image#snapSizeX",
            "references": [
                "JXG.Point#snapToGrid",
                "Image#snapSizeY",
                "JXG.Board#defaultAxes"
            ],
            "type": "Number",
            "default": "1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1658,
            "description": "Defines together with {@link Image#snapSizeX} the grid the image snaps on to.\nThe image will only snap on integer multiples to snapSizeX in x and snapSizeY in y direction.\nIf this value is equal to or less than <tt>0</tt>, it will use the grid displayed by the major ticks\nof the default ticks of the default y axes of the board.",
            "itemtype": "property",
            "name": "Image#snapSizeY",
            "references": [
                "JXG.Point#snapToGrid",
                "Image#snapSizeX",
                "JXG.Board#defaultAxes"
            ],
            "type": "Number",
            "default": "1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1674,
            "description": "List of attractor elements. If the distance of the image is less than\nattractorDistance the image is made to glider of this element.",
            "itemtype": "property",
            "name": "Image#attractors",
            "type": "array",
            "default": "empty",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1685,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1690,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1699,
            "description": "Attributes of circle center.",
            "type": "Point",
            "itemtype": "property",
            "name": "Incircle#center",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1711,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1715,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1723,
            "description": "By default an inequality is less (or equal) than. Set inverse to <tt>true</tt> will consider the inequality\ngreater (or equal) than.",
            "type": "Boolean",
            "default": "false",
            "itemtype": "property",
            "name": "Inequality#inverse",
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1733,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1737,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1753,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1758,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1768,
            "description": "Attributes of the (left) starting point of the integral.",
            "type": "Point",
            "itemtype": "property",
            "name": "Integral#curveLeft",
            "references": [
                "Integral#baseLeft"
            ],
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1781,
            "description": "Attributes of the (left) base point of the integral.",
            "type": "Point",
            "itemtype": "property",
            "name": "Integral#baseLeft",
            "references": [
                "Integral#curveLeft"
            ],
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1795,
            "description": "Attributes of the (right) end point of the integral.",
            "type": "Point",
            "itemtype": "property",
            "name": "Integral#curveRight",
            "references": [
                "Integral#baseRight"
            ],
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1808,
            "description": "Attributes of the (right) base point of the integral.",
            "type": "Point",
            "itemtype": "property",
            "name": "Integral#baseRight",
            "references": [
                "Integral#curveRight"
            ],
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1822,
            "description": "Attributes for integral label.",
            "type": "Label",
            "itemtype": "property",
            "name": "Integral#label",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1831,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1836,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1840,
            "description": "Control the attribute \"disabled\" of the HTML input field.",
            "itemtype": "property",
            "name": "disabled",
            "memberof": "Input.prototype",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1851,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1856,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1860,
            "description": "Used in {@link JXG.Intersection}.\nThis flag sets the behaviour of intersection points of e.g.\ntwo segments. If true, the intersection is treated as intersection of lines. If false\nthe intersection point exists if the segments intersect setwise.",
            "itemtype": "property",
            "name": "Intersection.alwaysIntersect",
            "type": "Boolean",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1872,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1877,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1887,
            "description": "Possible string values for the position of a label for\nlabel anchor points are:\n'lft'|'rt'|'top'|'bot'|'ulft'|'urt'|'llft'|'lrt'\nThis is relevant for non-points: line, circle, curve.",
            "type": "String",
            "default": "'urt'",
            "itemtype": "property",
            "name": "JXG.GeometryElement#label.position",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1899,
            "description": "Label offset from label anchor\nThe label anchor is determined by JXG.GeometryElement#label.position",
            "type": "Array",
            "default": "[10,10]",
            "itemtype": "property",
            "name": "JXG.GeometryElement#label.offset",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1909,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1914,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1920,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1925,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1929,
            "description": "Line has an arrow head at the position of its first point or the corresponding\nintersection with the canvas border.",
            "itemtype": "property",
            "name": "Line#firstArrow",
            "references": [
                "Line#lastArrow",
                "Line#touchFirstPoint"
            ],
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1941,
            "description": "Line has an arrow head at the position of its second point or the corresponding\nintersection with the canvas border.",
            "itemtype": "property",
            "name": "Line#lastArrow",
            "references": [
                "Line#firstArrow",
                "Line#touchLastPoint"
            ],
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1953,
            "description": "If true, line stretches infinitely in direction of its first point.\nOtherwise it ends at point1.",
            "itemtype": "property",
            "name": "Line#straightFirst",
            "references": [
                "Line#straightLast"
            ],
            "type": "Boolean",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1964,
            "description": "If true, line stretches infinitely in direction of its second point.\nOtherwise it ends at point2.",
            "itemtype": "property",
            "name": "Line#straightLast",
            "references": [
                "Line#straightFirst"
            ],
            "type": "Boolean",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1981,
            "description": "Attributes for first defining point of the line.",
            "type": "Point",
            "itemtype": "property",
            "name": "Line#point1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 1994,
            "description": "Attributes for second defining point of the line.",
            "type": "Point",
            "itemtype": "property",
            "name": "Line#point2",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2007,
            "description": "Attributes for ticks of the line.",
            "type": "Ticks",
            "itemtype": "property",
            "name": "Line#ticks",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2028,
            "description": "Attributes for the line label.",
            "type": "Label",
            "itemtype": "property",
            "name": "Line#label",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2038,
            "description": "If set to true, the point will snap to a grid defined by\n{@link JXG.Point#snapSizeX} and {@link JXG.Point#snapSizeY}.",
            "references": [
                "Point#snapSizeX",
                "Point#snapSizeY"
            ],
            "type": "Boolean",
            "itemtype": "property",
            "name": "Line#snapToGrid",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2050,
            "description": "Defines together with {@link JXG.Point#snapSizeY} the grid the point snaps on to.\nThe point will only snap on integer multiples to snapSizeX in x and snapSizeY in y direction.\nIf this value is equal to or less than <tt>0</tt>, it will use the grid displayed by the major ticks\nof the default ticks of the default x axes of the board.",
            "references": [
                "Point#snapToGrid",
                "Point#snapSizeY",
                "JXG.Board#defaultAxes"
            ],
            "type": "Number",
            "itemtype": "property",
            "name": "Line#snapSizeX",
            "default": "1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2065,
            "description": "Defines together with {@link JXG.Point#snapSizeX} the grid the point snaps on to.\nThe point will only snap on integer multiples to snapSizeX in x and snapSizeY in y direction.\nIf this value is equal to or less than <tt>0</tt>, it will use the grid displayed by the major ticks\nof the default ticks of the default y axes of the board.",
            "references": [
                "Point#snapToGrid",
                "Point#snapSizeX",
                "Board#defaultAxes"
            ],
            "type": "Number",
            "itemtype": "property",
            "name": "Line#snapSizeY",
            "default": "1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2080,
            "description": "If set to true and {@link Line#firstArrow} is set to true, the arrow head will just touch\nthe circle line of the start point of the line.",
            "references": [
                "Line#firstArrow"
            ],
            "type": "Boolean",
            "itemtype": "property",
            "name": "Line#touchFirstPoint",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2091,
            "description": "If set to true and {@link Line#lastArrow} is set to true, the arrow head will just touch\nthe circle line of the start point of the line.",
            "references": [
                "Line#firstArrow"
            ],
            "type": "Boolean",
            "itemtype": "property",
            "name": "Line#touchLastPoint",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2101,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2106,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2115,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2120,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2126,
            "description": "Attributes of helper point of normal.",
            "type": "Point",
            "itemtype": "property",
            "name": "Normal#point",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2138,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2143,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2148,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2153,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2159,
            "description": "Attributes of helper point of normal.",
            "type": "Point",
            "itemtype": "property",
            "name": "Parallel#point",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2175,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2180,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2187,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2192,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2205,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2210,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2217,
            "description": "This attribute was used to determined the point layout. It was derived from GEONExT and was\nreplaced by {@link Point#face} and {@link Point#size}.",
            "itemtype": "property",
            "name": "Point#style",
            "references": [
                "Point#face",
                "Point#size"
            ],
            "type": "Number",
            "default": "5",
            "deprecated": true,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2231,
            "description": "There are different point styles which differ in appearance.\nPosssible values are\n<table><tr><th>Value</th></tr>\n<tr><td>cross</td></tr>\n<tr><td>circle</td></tr>\n<tr><td>square</td></tr>\n<tr><td>plus</td></tr>\n<tr><td>diamond</td></tr>\n<tr><td>triangleUp</td></tr>\n<tr><td>triangleDown</td></tr>\n<tr><td>triangleLeft</td></tr>\n<tr><td>triangleRight</td></tr>\n</table>",
            "itemtype": "property",
            "name": "Point#face",
            "type": "string",
            "references": [
                "Point#setStyle"
            ],
            "default": "circle",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2254,
            "description": "Size of a point.\nMeans radius resp. half the width of a point (depending on the face).",
            "itemtype": "property",
            "name": "Point#size",
            "references": [
                "Point#face",
                "Point#setStyle"
            ],
            "type": "number",
            "default": "3",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2273,
            "description": "If true, the point size changes on zoom events.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "Point#zoom",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2283,
            "description": "If true, the infobox is shown on mouse over, else not.",
            "itemtype": "property",
            "name": "Point#showInfobox",
            "type": "Boolean",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2293,
            "description": "Truncating rule for the digits in the infobox.\n<ul>\n<li>'auto': done automatically by JXG#autoDigits\n<li>'none': no truncation\n<li>number: use String.toFixed();\n</ul>",
            "itemtype": "property",
            "name": "Point#infoboxDigits",
            "type": "String, Number",
            "default": "'auto'",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2310,
            "description": "List of attractor elements. If the distance of the point is less than\nattractorDistance the point is made to glider of this element.",
            "itemtype": "property",
            "name": "Point#attractors",
            "type": "array",
            "default": "empty",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2321,
            "description": "Unit for attractorDistance and snatchDistance, used for magnetized points and for snapToPoints.\nPossible values are 'screen' and 'user.",
            "itemtype": "property",
            "name": "Point#attractorUnit",
            "references": [
                "Point#attractorDistance",
                "Point#snatchDistance",
                "Point#snapToPoints",
                "Point#attractors"
            ],
            "type": "string",
            "default": "'user'",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2336,
            "description": "If the distance of the point to one of its attractors is less\nthan this number the point will be a glider on this\nattracting element.\nIf set to zero nothing happens.",
            "itemtype": "property",
            "name": "Point#attractorDistance",
            "type": "number",
            "default": "0.0",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2349,
            "description": "If the distance of the point to one of its attractors is at least\nthis number the point will be released from being a glider on the\nattracting element.\nIf set to zero nothing happens.",
            "itemtype": "property",
            "name": "Point#snatchDistance",
            "type": "number",
            "default": "0.0",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2362,
            "description": "If set to true, the point will snap to a grid defined by\n{@link Point#snapSizeX} and {@link Point#snapSizeY}.",
            "itemtype": "property",
            "name": "Point#snapToGrid",
            "references": [
                "JXG.Point#snapSizeX",
                "JXG.Point#snapSizeY"
            ],
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2375,
            "description": "Defines together with {@link Point#snapSizeY} the grid the point snaps on to.\nThe point will only snap on integer multiples to snapSizeX in x and snapSizeY in y direction.\nIf this value is equal to or less than <tt>0</tt>, it will use the grid displayed by the major ticks\nof the default ticks of the default x axes of the board.",
            "itemtype": "property",
            "name": "Point#snapSizeX",
            "references": [
                "Point#snapToGrid",
                "Point#snapSizeY",
                "Board#defaultAxes"
            ],
            "type": "Number",
            "default": "1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2391,
            "description": "Defines together with {@link Point#snapSizeX} the grid the point snaps on to.\nThe point will only snap on integer multiples to snapSizeX in x and snapSizeY in y direction.\nIf this value is equal to or less than <tt>0</tt>, it will use the grid displayed by the major ticks\nof the default ticks of the default y axes of the board.",
            "itemtype": "property",
            "name": "Point#snapSizeY",
            "references": [
                "Point#snapToGrid",
                "Point#snapSizeX",
                "Board#defaultAxes"
            ],
            "type": "Number",
            "default": "1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2407,
            "description": "If set to true, the point will snap to the nearest point in distance of\n{@link Point#attractorDistance}.",
            "itemtype": "property",
            "name": "Point#snapToPoints",
            "references": [
                "Point#attractorDistance"
            ],
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2419,
            "description": "List of elements which are ignored by snapToPoints.",
            "itemtype": "property",
            "name": "Point#ignoredSnapToPoints",
            "type": "array",
            "default": "empty",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2428,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2433,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2437,
            "description": "If <tt>true</tt>, moving the mouse over inner points triggers hasPoint.",
            "references": [
                "JXG.GeometryElement#hasPoint"
            ],
            "itemtype": "property",
            "name": "Polygon#hasInnerPoints",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2452,
            "description": "Is the polygon bordered by lines?",
            "type": "Boolean",
            "itemtype": "property",
            "name": "Polygon#withLines",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2461,
            "description": "Attributes for the polygon border lines.",
            "type": "Line",
            "itemtype": "property",
            "name": "Polygon#borders",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2478,
            "description": "Attributes for the polygon vertices.",
            "type": "Point",
            "itemtype": "property",
            "name": "Polygon#vertices",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2493,
            "description": "Attributes for the polygon label.",
            "type": "Label",
            "itemtype": "property",
            "name": "Polygon#label",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2503,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2508,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2512,
            "description": "Attributes for the helper point of the prescribed angle.",
            "type": "Point",
            "itemtype": "property",
            "name": "PrescribedAngle#anglepoint",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2524,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2529,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2533,
            "description": "If <tt>true</tt>, moving the mouse over inner points triggers hasPoint.",
            "references": [
                "JXG.GeometryElement#hasPoint"
            ],
            "itemtype": "property",
            "name": "RegularPolygon#hasInnerPoints",
            "type": "Boolean",
            "default": "false",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2547,
            "description": "Is the polygon bordered by lines?",
            "type": "Boolean",
            "itemtype": "property",
            "name": "RegularPolygon#withLines",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2556,
            "description": "Attributes for the polygon border lines.",
            "type": "Line",
            "itemtype": "property",
            "name": "RegularPolygon#borders",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2573,
            "description": "Attributes for the polygon vertices.",
            "type": "Point",
            "itemtype": "property",
            "name": "RegularPolygon#vertices",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2587,
            "description": "Attributes for the polygon label.",
            "type": "Label",
            "itemtype": "property",
            "name": "Polygon#label",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2597,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2602,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2610,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2615,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2626,
            "description": "Attributes for sub-element arc.",
            "type": "Arc",
            "itemtype": "property",
            "name": "Sector#arc",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2637,
            "description": "Attributes for helper point radiuspoint.",
            "type": "Point",
            "itemtype": "property",
            "name": "Sector#radiuspoint",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2648,
            "description": "Attributes for helper point center.",
            "type": "Point",
            "itemtype": "property",
            "name": "Sector#center",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2659,
            "description": "Attributes for helper point anglepoint.",
            "type": "Point",
            "itemtype": "property",
            "name": "Sector#anglepoint",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2670,
            "description": "Attributes for the sector label.",
            "type": "Label",
            "itemtype": "property",
            "name": "Sector#label",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2680,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2685,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2692,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2696,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2700,
            "description": "Attributes for center point of the semicircle.",
            "type": "Point",
            "itemtype": "property",
            "name": "Semicircle#midpoint",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2713,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2718,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2722,
            "description": "The slider only returns integer multiples of this value, e.g. for discrete values set this property to <tt>1</tt>. For\ncontinuous results set this to <tt>-1</tt>.",
            "memberof": "Slider.prototype",
            "itemtype": "property",
            "name": "snapWidth",
            "type": "Number",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2732,
            "description": "The precision of the slider value displayed in the optional text.",
            "memberof": "Slider.prototype",
            "itemtype": "property",
            "name": "precision",
            "type": "Number",
            "default": "2",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2744,
            "description": "Show slider ticks.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "Slider#withTicks",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2753,
            "description": "Show slider label.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "Slider#withLabel",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2771,
            "description": "Size of slider point.",
            "type": "Number",
            "itemtype": "property",
            "name": "Slider#size",
            "default": "6",
            "references": [
                "Point#size"
            ],
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2781,
            "description": "Attributes for first (left) helper point defining the slider position.",
            "type": "Point",
            "itemtype": "property",
            "name": "Slider#point1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2796,
            "description": "Attributes for second (right) helper point defining the slider position.",
            "type": "Point",
            "itemtype": "property",
            "name": "Slider#point2",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2811,
            "description": "Attributes for the base line of the slider.",
            "type": "Line",
            "itemtype": "property",
            "name": "Slider#baseline",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2826,
            "description": "Attributes for the ticks of the base line of the slider.",
            "type": "Ticks",
            "itemtype": "property",
            "name": "Slider#ticks",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2848,
            "description": "Attributes for the highlighting line of the slider.",
            "type": "Line",
            "itemtype": "property",
            "name": "Slider#highline",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2862,
            "description": "Attributes for the slider label.",
            "type": "Label",
            "itemtype": "property",
            "name": "Slider#label",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2872,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2877,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2886,
            "description": "Attributes for the gliding helper point.",
            "type": "Point",
            "itemtype": "property",
            "name": "Slopetriangle#glider",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2898,
            "description": "Attributes for the base line.",
            "type": "Line",
            "itemtype": "property",
            "name": "Slopetriangle#baseline",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2910,
            "description": "Attributes for the base point.",
            "type": "Point",
            "itemtype": "property",
            "name": "Slopetriangle#basepoint",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2922,
            "description": "Attributes for the top point.",
            "type": "Point",
            "itemtype": "property",
            "name": "Slopetriangle#toppoint",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2934,
            "description": "Attributes for the slope triangle label.",
            "type": "Label",
            "itemtype": "property",
            "name": "Slopetriangle#label",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2943,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2948,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2952,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2957,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2965,
            "description": "Show tape measure ticks.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "Tapemeasure#withTicks",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2974,
            "description": "Show tape measure label.",
            "type": "Boolean",
            "itemtype": "property",
            "name": "Tapemeasure#withLabel",
            "default": "true",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2983,
            "description": "The precision of the tape measure value displayed in the optional text.",
            "memberof": "Tapemeasure.prototype",
            "itemtype": "property",
            "name": "precision",
            "type": "Number",
            "default": "2",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 2992,
            "description": "Attributes for first helper point defining the tape measure position.",
            "type": "Point",
            "itemtype": "property",
            "name": "Tapemeasure#point1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3012,
            "description": "Attributes for second helper point defining the tape measure position.",
            "type": "Point",
            "itemtype": "property",
            "name": "Tapemeasure#point2",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3032,
            "description": "Attributes for the ticks of the tape measure.",
            "type": "Ticks",
            "itemtype": "property",
            "name": "Tapemeasure#ticks",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3052,
            "description": "Attributes for the tape measure label.",
            "type": "Label",
            "itemtype": "property",
            "name": "Tapemeasure#label",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3061,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3066,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3070,
            "description": "The font size in pixels.",
            "itemtype": "property",
            "name": "fontSize",
            "memberof": "Text.prototype",
            "default": "12",
            "type": "Number",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3080,
            "description": "Used to round texts given by a number.",
            "itemtype": "property",
            "name": "digits",
            "memberof": "Text.prototype",
            "default": "2",
            "type": "Number",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3090,
            "description": "If set to true, the text is parsed and evaluated.\nFor labels parse==true results in converting names of the form k_a to subscripts.\nIf the text is given by string and parse==true, the string is parsed as\nJessieCode expression.",
            "itemtype": "property",
            "name": "parse",
            "memberof": "Text.prototype",
            "default": "true",
            "type": "Boolean",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3103,
            "description": "If set to true and caja's sanitizeHTML function can be found it\nwill be used to sanitize text output.",
            "itemtype": "property",
            "name": "useCaja",
            "memberof": "Text.prototype",
            "default": "false",
            "type": "Boolean",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3114,
            "description": "If enabled, the text will be handled as label. Intended for internal use.",
            "itemtype": "property",
            "name": "isLabel",
            "memberof": "Text.prototype",
            "default": "false",
            "type": "Boolean",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3128,
            "description": "If true the input will be given to ASCIIMathML before rendering.",
            "itemtype": "property",
            "name": "useASCIIMathML",
            "memberof": "Text.prototype",
            "default": "false",
            "type": "Boolean",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3138,
            "description": "If true MathJax will be used to render the input string.",
            "itemtype": "property",
            "name": "useMathJax",
            "memberof": "Text.prototype",
            "default": "false",
            "type": "Boolean",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3148,
            "description": "Determines the rendering method of the text. Possible values\ninclude <tt>'html'</tt> and <tt>'internal</tt>.",
            "itemtype": "property",
            "name": "display",
            "memberof": "Text.prototype",
            "default": "'html'",
            "type": "String",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3159,
            "description": "Anchor element {@link Point}, {@link Text} or {@link Image} of the text. If it exists, the coordinates of the text are relative\nto this anchor element.",
            "itemtype": "property",
            "name": "anchor",
            "memberof": "Text.prototype",
            "default": "null",
            "type": "Object",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3170,
            "description": "The horizontal alignment of the text. Possible values include <tt>'left'</tt>, <tt>'middle'</tt>, and\n<tt>'right'</tt>.",
            "itemtype": "property",
            "name": "anchorX",
            "memberof": "Text.prototype",
            "default": "'left'",
            "type": "String",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3181,
            "description": "The vertical alignment of the text. Possible values include <tt>'top'</tt>, <tt>'middle'</tt>, and\n<tt>'bottom'</tt>.",
            "itemtype": "property",
            "name": "anchorY",
            "memberof": "Text.prototype",
            "default": "'middle'",
            "type": "String",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3192,
            "description": "The precision of the slider value displayed in the optional text.",
            "itemtype": "property",
            "name": "cssClass",
            "memberof": "Text.prototype",
            "type": "String",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3201,
            "description": "The precision of the slider value displayed in the optional text.",
            "itemtype": "property",
            "name": "highlightCssClass",
            "memberof": "Text.prototype",
            "type": "String",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3210,
            "description": "Sensitive area for dragging the text.\nPossible values are 'all', or something else.\nThis may be extended to left, right, ... in the future.",
            "itemtype": "property",
            "name": "Text#dragArea",
            "type": "String",
            "default": "'all'",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3223,
            "description": "Text rotation in degrees.\nWorks for non-zero values only in combination with display=='internal'.",
            "itemtype": "property",
            "name": "Text#rotate",
            "type": "Number",
            "default": "0",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3235,
            "description": "Defines together with {@link Text#snapSizeY} the grid the text snaps on to.\nThe text will only snap on integer multiples to snapSizeX in x and snapSizeY in y direction.\nIf this value is equal to or less than <tt>0</tt>, it will use the grid displayed by the major ticks\nof the default ticks of the default x axes of the board.",
            "itemtype": "property",
            "name": "snapSizeX",
            "memberof": "Text.prototype",
            "references": [
                "JXG.Point#snapToGrid",
                "Text#snapSizeY",
                "JXG.Board#defaultAxes"
            ],
            "type": "Number",
            "default": "1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3252,
            "description": "Defines together with {@link Text#snapSizeX} the grid the text snaps on to.\nThe text will only snap on integer multiples to snapSizeX in x and snapSizeY in y direction.\nIf this value is equal to or less than <tt>0</tt>, it will use the grid displayed by the major ticks\nof the default ticks of the default y axes of the board.",
            "itemtype": "property",
            "name": "snapSizeY",
            "memberof": "Text.prototype",
            "references": [
                "JXG.Point#snapToGrid",
                "Text#snapSizeX",
                "JXG.Board#defaultAxes"
            ],
            "type": "Number",
            "default": "1",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3269,
            "description": "List of attractor elements. If the distance of the text is less than\nattractorDistance the text is made to glider of this element.",
            "itemtype": "property",
            "name": "attractors",
            "memberof": "Text.prototype",
            "type": "array",
            "default": "empty",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3280,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3285,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3291,
            "description": "The number of evaluated data points.",
            "memberof": "Tracecurve.prototype",
            "default": "100",
            "itemtype": "property",
            "name": "numberPoints",
            "type": "Number",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3300,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3305,
            "visprop": "",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3313,
            "description": "Attributes for the turtle arrow.",
            "type": "Curve",
            "itemtype": "property",
            "name": "Turtle#arrow",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3324,
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3327,
            "description": "Abbreviations of properties. Setting the shortcut means setting abbreviated properties\nto the same value.\nIt is used in {@link JXG.GeometryElement#setAttribute} and in\nthe constructor {@link JXG.GeometryElement}.\nAttention: In Options.js abbreviations are not allowed.",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3344,
            "description": "Holds all possible properties and the according validators for geometry elements. A validator is either a function\nwhich takes one parameter and returns true, if the value is valid for the property, or it is false if no validator\nis required.",
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3461,
            "description": "All point faces can be defined with more than one name, e.g. a cross faced point can be given\nby face equal to 'cross' or equal to 'x'. This method maps all possible values to fixed ones to\nsimplify if- and switch-clauses regarding point faces. The translation table is as follows:\n<table>\n<tr><th>Input</th><th>Output</th></tr>\n<tr><td>cross, x</td><td>x</td></tr>\n<tr><td>circle, o</td><td>o</td></tr>\n<tr><td>square, []</td><td>[]</td></tr>\n<tr><td>plus, +</td><td>+</td></tr>\n<tr><td>diamond, &lt;&gt;</td><td>&lt;&gt;</td></tr>\n<tr><td>triangleup, a, ^</td><td>A</td></tr>\n<tr><td>triangledown, v</td><td>v</td></tr>\n<tr><td>triangleleft, &lt;</td><td>&lt;</td></tr>\n<tr><td>triangleright, &gt;</td><td>&gt;</td></tr>\n</table>",
            "params": [
                {
                    "name": "s",
                    "description": "A string which should determine a valid point face.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a normalized string or undefined if the given string is not a valid\npoint face.",
                "type": "String"
            },
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3508,
            "description": "Apply the options stored in this object to all objects on the given board.",
            "params": [
                {
                    "name": "board",
                    "description": "The board to which objects the options will be applied.",
                    "type": "JXG.Board"
                }
            ],
            "class": "JXG.Options",
            "module": "JXG"
        },
        {
            "file": "src/options.js",
            "line": 3578,
            "description": "Converts all color values to greyscale and calls useStandardOption to put them onto the board.",
            "params": [
                {
                    "name": "board",
                    "description": "The board to which objects the options will be applied.",
                    "type": "JXG.Board"
                }
            ],
            "references": [
                "#useStandardOptions"
            ],
            "class": "JXG.Options",
            "module": "JXG"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: fileoverview",
            "line": " src/base/board.js:60"
        },
        {
            "message": "unknown tag: borrows",
            "line": " src/base/board.js:75"
        },
        {
            "message": "unknown tag: borrows",
            "line": " src/base/board.js:75"
        },
        {
            "message": "unknown tag: borrows",
            "line": " src/base/board.js:75"
        },
        {
            "message": "unknown tag: borrows",
            "line": " src/base/board.js:75"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/board.js:4412"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/circle.js:751"
        },
        {
            "message": "unknown tag: borrows",
            "line": " src/base/coords.js:54"
        },
        {
            "message": "unknown tag: borrows",
            "line": " src/base/coords.js:54"
        },
        {
            "message": "unknown tag: borrows",
            "line": " src/base/coords.js:54"
        },
        {
            "message": "unknown tag: borrows",
            "line": " src/base/coords.js:54"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/curve.js:1506"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/curve.js:1652"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/curve.js:1793"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/curve.js:1910"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/curve.js:2058"
        },
        {
            "message": "unknown tag: borrows",
            "line": " src/base/element.js:54"
        },
        {
            "message": "unknown tag: borrows",
            "line": " src/base/element.js:54"
        },
        {
            "message": "unknown tag: borrows",
            "line": " src/base/element.js:54"
        },
        {
            "message": "unknown tag: borrows",
            "line": " src/base/element.js:54"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/base/element.js:1522"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/base/element.js:2055"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/base/group.js:42"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/group.js:874"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/base/image.js:46"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/image.js:298"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/base/line.js:52"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/line.js:963"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/line.js:1198"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/line.js:1299"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/line.js:1344"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/line.js:1420"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/line.js:1653"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/line.js:1722"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/base/point.js:51"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/point.js:332"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/point.js:407"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/point.js:470"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/point.js:566"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/point.js:660"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/polygon.js:855"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/polygon.js:943"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/base/text.js:47"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/text.js:763"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/base/ticks.js:48"
        },
        {
            "message": "unknown tag: version",
            "line": " src/base/ticks.js:48"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/ticks.js:1015"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/ticks.js:1077"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/base/transformation.js:43"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/transformation.js:479"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/base/turtle.js:48"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/base/turtle.js:904"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/element/arc.js:50"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/arc.js:62"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/element/arc.js:111"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/arc.js:366"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/arc.js:429"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/arc.js:496"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/arc.js:534"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/element/button.js:42"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/button.js:61"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/element/checkbox.js:42"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/checkbox.js:59"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/element/composition.js:57"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:85"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:209"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:281"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:402"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/composition.js:471"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:489"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:612"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:753"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/composition.js:836"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:849"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:899"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/composition.js:975"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:1141"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/composition.js:1198"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:1220"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/composition.js:1320"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/composition.js:1327"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:1349"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:1438"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:1497"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:1562"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/composition.js:1622"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:1644"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:1733"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:1789"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/element/composition.js:1984"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/composition.js:2066"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/composition.js:2074"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/composition.js:2082"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/composition.js:2090"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/element/composition.js:2106"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:2115"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/composition.js:2238"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/element/conic.js:48"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/conic.js:58"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/conic.js:277"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/conic.js:465"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/conic.js:631"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/element/input.js:42"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/input.js:59"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/locus.js:63"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/element/locus.js:116"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/locus.js:138"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/locus.js:146"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/element/measure.js:46"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/measure.js:58"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/sector.js:57"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:265"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:273"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:281"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:298"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/element/sector.js:319"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:367"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/element/sector.js:367"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:411"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/element/sector.js:411"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/element/sector.js:510"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/sector.js:551"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:600"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/sector.js:616"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/sector.js:654"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/sector.js:691"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:811"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:819"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/element/sector.js:861"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:861"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/element/sector.js:884"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:884"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:994"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/element/sector.js:1097"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " src/element/sector.js:1097"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/sector.js:1119"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/sector.js:1167"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/element/slider.js:51"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/slider.js:64"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/element/slopetriangle.js:40"
        },
        {
            "message": "unknown tag: pseudo",
            "line": " src/element/slopetriangle.js:67"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/math/geometry.js:45"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/math/math.js:40"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/math/numerics.js:40"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:89"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:157"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:191"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:271"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:291"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:389"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:494"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:564"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:699"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:731"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:826"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:886"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:950"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1029"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1197"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1402"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1420"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1461"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1476"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1562"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1617"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1688"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1749"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1776"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1839"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1935"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:1951"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:2087"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:2135"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:2251"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:2277"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:2353"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:2456"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:2479"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:2616"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:2626"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:2636"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:2823"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:2968"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/math/numerics.js:2983"
        },
        {
            "message": "unknown tag: ignore",
            "line": " src/math/numerics.js:3051"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/numerics.js:3111"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/math/poly.js:42"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:71"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:90"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:106"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:135"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:159"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:172"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:196"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:210"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:224"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:236"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:261"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:303"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:344"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:355"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:405"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:447"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/statistics.js:488"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/math/symbolic.js:46"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/symbolic.js:66"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/symbolic.js:135"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/symbolic.js:161"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/math/symbolic.js:214"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/parser/datasource.js:41"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/parser/jessiecode.js:43"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/renderer/abstract.js:53"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/renderer/no.js:41"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/server/server.js:43"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/utils/dump.js:41"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/utils/env.js:41"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/utils/event.js:41"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/utils/expect.js:41"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/utils/type.js:41"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/utils/zip.js:44"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/jsxgraph.js:49"
        },
        {
            "message": "unknown tag: version",
            "line": " src/jsxgraph.js:49"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " src/jxg.js:44"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:69"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:400"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:686"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:991"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:997"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1007"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1018"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1030"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1090"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1108"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1188"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1212"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1241"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:1245"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1261"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1278"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:1282"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1298"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1344"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1369"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1395"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1424"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1458"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1550"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1560"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1598"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1624"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1690"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1715"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1723"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1737"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1758"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1836"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:1840"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1856"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1877"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1914"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:1925"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2106"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2120"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2143"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2153"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2180"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2192"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2210"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2433"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2508"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2529"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2602"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2615"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2685"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2696"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2718"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:2722"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:2732"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2877"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2948"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:2957"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:2983"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:3066"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3070"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3080"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3090"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3103"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3114"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3128"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3138"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3148"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3159"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3170"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3181"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3192"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3201"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3235"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3252"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3269"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:3285"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/options.js:3291"
        },
        {
            "message": "unknown tag: visprop",
            "line": " src/options.js:3305"
        },
        {
            "message": "Missing item type",
            "line": " src/base/board.js:60"
        },
        {
            "message": "Missing item type\nThen, the update function of the renderer\nis called.  Since a chart is only an abstract element,\ncontaining other elements, this function is empty.",
            "line": " src/base/chart.js:744"
        },
        {
            "message": "Missing item type\nUpdate of the defining points",
            "line": " src/base/chart.js:753"
        },
        {
            "message": "Missing item type\nFor dynamic charts update\ncan be used to compute new entries\nfor the arrays this.dataX and\nthis.dataY. It is used in @see update.\nDefault is an empty method, can be overwritten\nby the user.",
            "line": " src/base/chart.js:764"
        },
        {
            "message": "Missing item type\nLegend for chart",
            "line": " src/base/chart.js:884"
        },
        {
            "message": "Missing item type\nConstants for JSXGraph",
            "line": " src/base/constants.js:51"
        },
        {
            "message": "Missing item type\nAlias of {@link JXG.GeometryElement#on}.",
            "line": " src/base/element.js:1914"
        },
        {
            "message": "Missing item type\nAlias of {@link JXG.GeometryElement#off}.",
            "line": " src/base/element.js:1919"
        },
        {
            "message": "Missing item type",
            "line": " src/base/element.js:2055"
        },
        {
            "message": "Missing item type",
            "line": " src/base/group.js:42"
        },
        {
            "message": "Missing item type",
            "line": " src/base/image.js:46"
        },
        {
            "message": "Missing item type",
            "line": " src/base/line.js:52"
        },
        {
            "message": "Missing item type\nThe line is defined by two points or coordinates of two points.\nIn the latter case, the points are created.",
            "line": " src/base/line.js:1009"
        },
        {
            "message": "Missing item type\nRegister the element type tangent at JSXGraph",
            "line": " src/base/line.js:1820"
        },
        {
            "message": "Missing item type",
            "line": " src/base/point.js:51"
        },
        {
            "message": "Missing item type\nInherits here from {@link JXG.GeometryElement}.",
            "line": " src/base/point.js:105"
        },
        {
            "message": "Missing item type\nArray of length 2 containing the numbers i and j.\nThe intersection point is i-th intersection point.\nj is unused.",
            "line": " src/base/point.js:540"
        },
        {
            "message": "Missing item type\nDetermines if the point c3 is right of the line through c1 and c2.\nSince the polygons are sorted counter clockwise, \"right of\" and therefore >= is needed here",
            "line": " src/base/polygon.js:701"
        },
        {
            "message": "Missing item type",
            "line": " src/base/text.js:47"
        },
        {
            "message": "Missing item type\nTransform the mouse/touch coordinates\nback to the original position of the text.",
            "line": " src/base/text.js:183"
        },
        {
            "message": "Missing item type\noffsetWidth and offsetHeight seem to be supported for internal vml elements by IE10+ in IE8 mode.",
            "line": " src/base/text.js:357"
        },
        {
            "message": "Missing item type\n[[x,y], [w px, h px], [range]",
            "line": " src/base/text.js:862"
        },
        {
            "message": "Missing item type",
            "line": " src/base/ticks.js:48"
        },
        {
            "message": "Missing item type",
            "line": " src/base/transformation.js:43"
        },
        {
            "message": "Missing item type",
            "line": " src/base/turtle.js:48"
        },
        {
            "message": "Missing item type",
            "line": " src/element/arc.js:50"
        },
        {
            "message": "Missing item type\ndocumented in JXG.GeometryElement",
            "line": " src/element/arc.js:111"
        },
        {
            "message": "Missing item type\nAt that point we know that the user has touched the circle line.",
            "line": " src/element/arc.js:250"
        },
        {
            "message": "Missing item type",
            "line": " src/element/button.js:42"
        },
        {
            "message": "Missing item type",
            "line": " src/element/checkbox.js:42"
        },
        {
            "message": "Missing item type",
            "line": " src/element/composition.js:57"
        },
        {
            "message": "Missing item type",
            "line": " src/element/composition.js:794"
        },
        {
            "message": "Missing item type",
            "line": " src/element/composition.js:801"
        },
        {
            "message": "Missing item type",
            "line": " src/element/composition.js:808"
        },
        {
            "message": "Missing item type",
            "line": " src/element/composition.js:1979"
        },
        {
            "message": "Missing item type\ndocumented in JXG.Curve",
            "line": " src/element/composition.js:1984"
        },
        {
            "message": "Missing item type\ndocumented in GeometryElement",
            "line": " src/element/composition.js:2106"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:48"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:141"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:187"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:210"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:224"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:359"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:401"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:424"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:438"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:543"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:552"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:572"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:597"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:801"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:879"
        },
        {
            "message": "Missing item type",
            "line": " src/element/conic.js:884"
        },
        {
            "message": "Missing item type",
            "line": " src/element/input.js:42"
        },
        {
            "message": "Missing item type\nshould be documented in JXG.Curve",
            "line": " src/element/locus.js:116"
        },
        {
            "message": "Missing item type",
            "line": " src/element/measure.js:46"
        },
        {
            "message": "Missing item type",
            "line": " src/element/measure.js:135"
        },
        {
            "message": "Missing item type\ndocumented in JXG.Curve",
            "line": " src/element/sector.js:319"
        },
        {
            "message": "Missing item type\nOverwrite the Radius method of the sector.\nUsed in {@link GeometryElement#setAttribute}.",
            "line": " src/element/sector.js:499"
        },
        {
            "message": "Missing item type",
            "line": " src/element/sector.js:510"
        },
        {
            "message": "Missing item type\nMoves the sector by the difference of two coordinates.",
            "line": " src/element/sector.js:519"
        },
        {
            "message": "Missing item type",
            "line": " src/element/slider.js:51"
        },
        {
            "message": "Missing item type",
            "line": " src/element/slopetriangle.js:40"
        },
        {
            "message": "Missing item type\nBalanced binary search tree",
            "line": " src/math/bst.js:45"
        },
        {
            "message": "Missing item type\npublic",
            "line": " src/math/bst.js:54"
        },
        {
            "message": "Missing item type\nprivate",
            "line": " src/math/bst.js:223"
        },
        {
            "message": "Missing item type\nRandomized Balnaced Binary Trees",
            "line": " src/math/bst.js:401"
        },
        {
            "message": "Missing item type\nTest output",
            "line": " src/math/bst.js:452"
        },
        {
            "message": "Missing item type\nHeap",
            "line": " src/math/bst.js:478"
        },
        {
            "message": "Missing item type\npublic",
            "line": " src/math/bst.js:486"
        },
        {
            "message": "Missing item type\nprivate",
            "line": " src/math/bst.js:508"
        },
        {
            "message": "Missing item type",
            "line": " src/math/geometry.js:45"
        },
        {
            "message": "Missing item type\nAt this point we have four points:\npoint1 and point2 are the first and the second defining point on the line,\nintersect1, intersect2 are the intersections of the line with border around the board.",
            "line": " src/math/geometry.js:675"
        },
        {
            "message": "Missing item type\nwe have four points:\npoint1 and point2 are the first and the second defining point on the line,\nintersect1, intersect2 are the intersections of the line with border around the board.",
            "line": " src/math/geometry.js:813"
        },
        {
            "message": "Missing item type",
            "line": " src/math/geometry.js:997"
        },
        {
            "message": "Missing item type",
            "line": " src/math/geometry.js:1006"
        },
        {
            "message": "Missing item type",
            "line": " src/math/geometry.js:1014"
        },
        {
            "message": "Missing item type",
            "line": " src/math/geometry.js:1021"
        },
        {
            "message": "Missing item type\nIf one of the lines is a segment or ray and\nthe the intersection point shpould disappear if outside\nof the segment or ray we call\nmeetSegmentSegment",
            "line": " src/math/geometry.js:1029"
        },
        {
            "message": "Missing item type",
            "line": " src/math/geometry.js:1059"
        },
        {
            "message": "Missing item type\nIf the intersection point is not part of the segment,\nthis intersection point is set to non-existent.\nThis prevents jumping of the intersection points.\nBut it may be discussed if it is the desired behavior.",
            "line": " src/math/geometry.js:1565"
        },
        {
            "message": "Missing item type\nIf the segment has length 0, i.e. is a point,\nthe projection is equal to that point.",
            "line": " src/math/geometry.js:2206"
        },
        {
            "message": "Missing item type",
            "line": " src/math/math.js:40"
        },
        {
            "message": "Missing item type",
            "line": " src/math/numerics.js:40"
        },
        {
            "message": "Missing item type\nScale error in Gauss Kronrod quadrature.\nInternal method used in {@link #_gaussKronrod}.",
            "line": " src/math/numerics.js:699"
        },
        {
            "message": "Missing item type",
            "line": " src/math/numerics.js:1576"
        },
        {
            "message": "Missing item type",
            "line": " src/math/numerics.js:1789"
        },
        {
            "message": "Missing item type",
            "line": " src/math/numerics.js:1868"
        },
        {
            "message": "Missing item type",
            "line": " src/math/numerics.js:1971"
        },
        {
            "message": "Missing item type",
            "line": " src/math/numerics.js:1980"
        },
        {
            "message": "Missing item type",
            "line": " src/math/numerics.js:2000"
        },
        {
            "message": "Missing item type",
            "line": " src/math/numerics.js:2101"
        },
        {
            "message": "Missing item type",
            "line": " src/math/numerics.js:2206"
        },
        {
            "message": "Missing item type\nfindSplit() is a subroutine of {@link JXG.Math.Numerics#RamerDouglasPeucker}.\nIt searches for the point between index i and j which\nhas the largest distance from the line between the points i and j.",
            "line": " src/math/numerics.js:2983"
        },
        {
            "message": "Missing item type\nRDP() is a private subroutine of {@link JXG.Math.Numerics#RamerDouglasPeucker}.\nIt runs recursively through the point set and searches the\npoint which has the largest distance from the line between the first point and\nthe last point. If the distance from the line is greater than eps, this point is\nincluded in our new point set otherwise it is discarded.\nIf it is taken, we recursively apply the subroutine to the point set before\nand after the chosen point.",
            "line": " src/math/numerics.js:3051"
        },
        {
            "message": "Missing item type",
            "line": " src/math/poly.js:42"
        },
        {
            "message": "Missing item type\nA list of variables in this polynomial ring.",
            "line": " src/math/poly.js:65"
        },
        {
            "message": "Missing item type",
            "line": " src/math/symbolic.js:46"
        },
        {
            "message": "Missing item type",
            "line": " src/parser/datasource.js:41"
        },
        {
            "message": "Missing item type\nParser helper routines. The methods in here are for parsing expressions in Geonext Syntax.",
            "line": " src/parser/geonext.js:50"
        },
        {
            "message": "Missing item type\nConverts expression of the form <i>leftop^rightop</i> into <i>Math.pow(leftop,rightop)</i>.",
            "line": " src/parser/geonext.js:55"
        },
        {
            "message": "Missing item type\nConverts expression of the form <i>If(a,b,c)</i> into <i>(a)?(b):(c)/i>.",
            "line": " src/parser/geonext.js:153"
        },
        {
            "message": "Missing item type\nReplace an element's name in terms by an element's id.",
            "line": " src/parser/geonext.js:234"
        },
        {
            "message": "Missing item type\nReplaces element ids in terms by element this.board.objects['id'].",
            "line": " src/parser/geonext.js:360"
        },
        {
            "message": "Missing item type\nConverts the given algebraic expression in GEONE<sub>x</sub>T syntax into an equivalent expression in JavaScript syntax.",
            "line": " src/parser/geonext.js:391"
        },
        {
            "message": "Missing item type\nFinds dependencies in a given term and resolves them by adding the\ndependent object to the found objects child elements.",
            "line": " src/parser/geonext.js:432"
        },
        {
            "message": "Missing item type\nConverts the given algebraic expression in GEONE<sub>x</sub>T syntax into an equivalent expression in JessieCode syntax.",
            "line": " src/parser/geonext.js:479"
        },
        {
            "message": "Missing item type",
            "line": " src/parser/jessiecode.js:43"
        },
        {
            "message": "Missing item type\nA JessieCode object provides an interfacce to the parser and stores all variables and objects used within a JessieCode script.\nThe optional argument <tt>code</tt> is interpreted after initializing. To evaluate more code after initializing a JessieCode instance\nplease use {@link JXG.JessieCode#parse}. For code snippets like single expressions use {@link JXG.JessieCode#snippet}.",
            "line": " src/parser/jessiecode.js:64"
        },
        {
            "message": "Missing item type\nThe global scope.",
            "line": " src/parser/jessiecode.js:75"
        },
        {
            "message": "Missing item type\nKeeps track of all possible scopes every required.",
            "line": " src/parser/jessiecode.js:88"
        },
        {
            "message": "Missing item type\nA stack to store debug information (like line and column where it was defined) of a parameter",
            "line": " src/parser/jessiecode.js:95"
        },
        {
            "message": "Missing item type\nDetermines the parameter stack scope.",
            "line": " src/parser/jessiecode.js:102"
        },
        {
            "message": "Missing item type\nUsed to store the property-value definition while parsing an object literal.",
            "line": " src/parser/jessiecode.js:109"
        },
        {
            "message": "Missing item type\nThe current scope of the object literal stack {@link JXG.JessieCode#propstack}.",
            "line": " src/parser/jessiecode.js:116"
        },
        {
            "message": "Missing item type\nStore the left hand side of an assignment. If an element is constructed and no attributes are given, this is\nused as the element's name.",
            "line": " src/parser/jessiecode.js:123"
        },
        {
            "message": "Missing item type\nlhs flag, used by JXG.JessieCode#replaceNames",
            "line": " src/parser/jessiecode.js:131"
        },
        {
            "message": "Missing item type\nThe id of an HTML node in which innerHTML all warnings are stored (if no <tt>console</tt> object is available).",
            "line": " src/parser/jessiecode.js:138"
        },
        {
            "message": "Missing item type\nStore $log messages in case there's no console.",
            "line": " src/parser/jessiecode.js:145"
        },
        {
            "message": "Missing item type\nBuilt-in functions and constants",
            "line": " src/parser/jessiecode.js:151"
        },
        {
            "message": "Missing item type\nThe board which currently is used to create and look up elements.",
            "line": " src/parser/jessiecode.js:157"
        },
        {
            "message": "Missing item type\nKeep track of which element is created in which line.",
            "line": " src/parser/jessiecode.js:163"
        },
        {
            "message": "Missing item type\nCreate a new parse tree node.",
            "line": " src/parser/jessiecode.js:183"
        },
        {
            "message": "Missing item type\nCreate a new parse tree node. Basically the same as node(), but this builds\nthe children part out of an arbitrary number of parameters, instead of one\narray parameter.",
            "line": " src/parser/jessiecode.js:197"
        },
        {
            "message": "Missing item type\nCreate a new scope.",
            "line": " src/parser/jessiecode.js:219"
        },
        {
            "message": "Missing item type\nRemove the current scope and reinstate the previous scope",
            "line": " src/parser/jessiecode.js:239"
        },
        {
            "message": "Missing item type\nLooks up an {@link JXG.GeometryElement} by its id.",
            "line": " src/parser/jessiecode.js:252"
        },
        {
            "message": "Missing item type\nReturns a element creator function which takes two parameters: the parents array and the attributes object.",
            "line": " src/parser/jessiecode.js:269"
        },
        {
            "message": "Missing item type\nAssigns a value to a variable in the current scope.",
            "line": " src/parser/jessiecode.js:313"
        },
        {
            "message": "Missing item type\nChecks if the given variable name can be found in the current scope chain.",
            "line": " src/parser/jessiecode.js:329"
        },
        {
            "message": "Missing item type\nChecks if the given variable name is a parameter in any scope from the current to the global scope.",
            "line": " src/parser/jessiecode.js:348"
        },
        {
            "message": "Missing item type\nChecks if the given variable name is a valid creator method.",
            "line": " src/parser/jessiecode.js:367"
        },
        {
            "message": "Missing item type\nChecks if the given variable identifier is a valid member of the JavaScript Math Object.",
            "line": " src/parser/jessiecode.js:377"
        },
        {
            "message": "Missing item type\nReturns true if the given identifier is a builtIn variable/function.",
            "line": " src/parser/jessiecode.js:386"
        },
        {
            "message": "Missing item type\nLooks up the value of the given variable.",
            "line": " src/parser/jessiecode.js:395"
        },
        {
            "message": "Missing item type\nLook up the value of a local variable.",
            "line": " src/parser/jessiecode.js:434"
        },
        {
            "message": "Missing item type\nTODO this needs to be called from JS and should not generate JS code\nLooks up a variable identifier in various tables and generates JavaScript code that could be eval'd to get the value.",
            "line": " src/parser/jessiecode.js:453"
        },
        {
            "message": "Missing item type\nAdds the property <tt>isMap</tt> to a function and sets it to true.",
            "line": " src/parser/jessiecode.js:510"
        },
        {
            "message": "Missing item type\nConverts a node type <tt>node_op</tt> and value <tt>op_map</tt> or <tt>op_function</tt> into a executable\nfunction.",
            "line": " src/parser/jessiecode.js:540"
        },
        {
            "message": "Missing item type\nMerge all atribute values given with an element creator into one object.",
            "line": " src/parser/jessiecode.js:622"
        },
        {
            "message": "Missing item type\nSets the property <tt>what</tt> of <tt>o</tt> to <tt>value</tt>",
            "line": " src/parser/jessiecode.js:638"
        },
        {
            "message": "Missing item type\nParses JessieCode",
            "line": " src/parser/jessiecode.js:705"
        },
        {
            "message": "Missing item type\nParses a JessieCode snippet, e.g. \"3+4\", and wraps it into a function, if desired.",
            "line": " src/parser/jessiecode.js:750"
        },
        {
            "message": "Missing item type\nTraverses through the given subtree and changes all values of nodes with the replaced flag set by\n{@link JXG.JessieCode#replaceNames} to the name of the element (if not empty).",
            "line": " src/parser/jessiecode.js:769"
        },
        {
            "message": "Missing item type\nTraverses through the given subtree and changes all elements referenced by names through referencing them by ID.\nAn identifier is only replaced if it is not found in all scopes above the current scope and if it\nhas not been blacklisted within the codeblock determined by the given subtree.",
            "line": " src/parser/jessiecode.js:805"
        },
        {
            "message": "Missing item type\nReplaces node_var nodes with node_op&gt;op_execfun nodes, calling the internal $() function with the id of the\nelement accessed by the node_var node.",
            "line": " src/parser/jessiecode.js:845"
        },
        {
            "message": "Missing item type\nSearch the parse tree below <tt>node</tt> for <em>stationary</em> dependencies, i.e. dependencies hard coded into\nthe function.",
            "line": " src/parser/jessiecode.js:864"
        },
        {
            "message": "Missing item type\nResolves the lefthand side of an assignment operation",
            "line": " src/parser/jessiecode.js:932"
        },
        {
            "message": "Missing item type\nExecutes a parse subtree.",
            "line": " src/parser/jessiecode.js:985"
        },
        {
            "message": "Missing item type\nCompiles a parse tree back to JessieCode.",
            "line": " src/parser/jessiecode.js:1324"
        },
        {
            "message": "Missing item type\nThis is used as the global X() function.",
            "line": " src/parser/jessiecode.js:1607"
        },
        {
            "message": "Missing item type\nThis is used as the global Y() function.",
            "line": " src/parser/jessiecode.js:1616"
        },
        {
            "message": "Missing item type\nThis is used as the global V() function.",
            "line": " src/parser/jessiecode.js:1625"
        },
        {
            "message": "Missing item type\nThis is used as the global L() function.",
            "line": " src/parser/jessiecode.js:1634"
        },
        {
            "message": "Missing item type\nThis is used as the global dist() function.",
            "line": " src/parser/jessiecode.js:1643"
        },
        {
            "message": "Missing item type\n+ operator implementation",
            "line": " src/parser/jessiecode.js:1657"
        },
        {
            "message": "Missing item type\n+ operator implementation",
            "line": " src/parser/jessiecode.js:1687"
        },
        {
            "message": "Missing item type\nMultiplication of vectors and numbers",
            "line": " src/parser/jessiecode.js:1715"
        },
        {
            "message": "Missing item type\nImplementation of the / operator.",
            "line": " src/parser/jessiecode.js:1753"
        },
        {
            "message": "Missing item type\nImplementation of the % operator.",
            "line": " src/parser/jessiecode.js:1781"
        },
        {
            "message": "Missing item type\nPow function wrapper to allow direct usage of sliders.",
            "line": " src/parser/jessiecode.js:1809"
        },
        {
            "message": "Missing item type\nImplementation of the ?: operator",
            "line": " src/parser/jessiecode.js:1822"
        },
        {
            "message": "Missing item type\nImplementation of the delete() builtin function",
            "line": " src/parser/jessiecode.js:1837"
        },
        {
            "message": "Missing item type\nImplementation of the use() builtin function",
            "line": " src/parser/jessiecode.js:1847"
        },
        {
            "message": "Missing item type\nFind the first symbol to the given value from the given scope upwards.",
            "line": " src/parser/jessiecode.js:1878"
        },
        {
            "message": "Missing item type\nImport modules into a JessieCode script.",
            "line": " src/parser/jessiecode.js:1909"
        },
        {
            "message": "Missing item type\nDefines built in methods and constants.",
            "line": " src/parser/jessiecode.js:1917"
        },
        {
            "message": "Missing item type\nOutput a debugging message. Uses debug console, if available. Otherwise an HTML element with the\nid \"debug\" and an innerHTML property is used.",
            "line": " src/parser/jessiecode.js:1993"
        },
        {
            "message": "Missing item type\nThrows an exception with the given error message.",
            "line": " src/parser/jessiecode.js:2007"
        },
        {
            "message": "Missing item type\nOutput a warning message using {@link JXG#debug} and precedes the message with \"Warning: \".",
            "line": " src/parser/jessiecode.js:2017"
        },
        {
            "message": "Missing item type",
            "line": " src/parser/jessiescript.js:33"
        },
        {
            "message": "Missing item type\nParses a string like<br />\n<tt>&lt;macro-name&gt; = Macro(A, B, C) { <Command in JSXGraph Construction syntax>; ...<Command in JXG-Construct syntax>; }</tt><br />\nand adds it as a macro so it can be used in the JSXGraph Construction Syntax.",
            "line": " src/parser/jessiescript.js:651"
        },
        {
            "message": "Missing item type\nThe FileReader object bundles the file input capabilities of JSXGraph.",
            "line": " src/reader/file.js:50"
        },
        {
            "message": "Missing item type\nOpens a file using the given URL and passes the contents to {@link JXG.FileReader#parseString}",
            "line": " src/reader/file.js:55"
        },
        {
            "message": "Missing item type\nParses a given string according to the file format given in format.",
            "line": " src/reader/file.js:146"
        },
        {
            "message": "Missing item type",
            "line": " src/reader/geogebra.js:104"
        },
        {
            "message": "Missing item type\nJS/CC parser to convert the input expression to a working javascript function.",
            "line": " src/reader/geogebra.js:404"
        },
        {
            "message": "Missing item type",
            "line": " src/reader/geogebra.js:435"
        },
        {
            "message": "Missing item type",
            "line": " src/reader/geogebra.js:1407"
        },
        {
            "message": "Missing item type\nOverride JSxGraph defaults with Geogebra settings",
            "line": " src/reader/geogebra.js:1421"
        },
        {
            "message": "Missing item type\nSet color properties of a geogebra element.\nSet stroke, fill, lighting, label and draft color attributes.",
            "line": " src/reader/geogebra.js:1456"
        },
        {
            "message": "Missing item type\nSet the board properties.\nSet active, area, dash, draft and showinfo attributes.",
            "line": " src/reader/geogebra.js:1496"
        },
        {
            "message": "Missing item type",
            "line": " src/reader/geogebra.js:1508"
        },
        {
            "message": "Missing item type\nWriting element attributes to the given object",
            "line": " src/reader/geogebra.js:1559"
        },
        {
            "message": "Missing item type\nSearching for an element in the geogebra tree",
            "line": " src/reader/geogebra.js:1677"
        },
        {
            "message": "Missing item type\nCheck if an element is already registered in the temporary ggbElements register. If not, create and register the element.",
            "line": " src/reader/geogebra.js:1711"
        },
        {
            "message": "Missing item type\nPrepare expression for this.ggbParse with solving multiplications and replacing mathematical functions.",
            "line": " src/reader/geogebra.js:1764"
        },
        {
            "message": "Missing item type\nSearching for an element in the geogebra tree",
            "line": " src/reader/geogebra.js:1855"
        },
        {
            "message": "Missing item type\nSearching for an element in the geogebra tree",
            "line": " src/reader/geogebra.js:1897"
        },
        {
            "message": "Missing item type\nReading the elements of a geogebra file",
            "line": " src/reader/geogebra.js:3024"
        },
        {
            "message": "Missing item type\nClean the utf8-symbols in a Geogebra expression in JavaScript syntax",
            "line": " src/reader/geogebra.js:3115"
        },
        {
            "message": "Missing item type\nExtracting the packed geogebra file in order to return the \"blank\" xml-tree for further parsing.",
            "line": " src/reader/geogebra.js:3134"
        },
        {
            "message": "Missing item type\nChecking if a parameter is a Geogebra vector (array with length 3)",
            "line": " src/reader/geogebra.js:3175"
        },
        {
            "message": "Missing item type\nRetrieves data by TagName from an XML node.",
            "line": " src/reader/geonext.js:97"
        },
        {
            "message": "Missing item type\nSet color properties of a geonext element.\nSet stroke, fill, lighting, label and draft color attributes.",
            "line": " src/reader/geonext.js:132"
        },
        {
            "message": "Missing item type\nSet the defining properties of a geonext element.\nWriting the nodeName to ident; setting the name attribute and defining the element id.",
            "line": " src/reader/geonext.js:204"
        },
        {
            "message": "Missing item type\nTransforms the Geonext properties to jsxgraph properties",
            "line": " src/reader/geonext.js:236"
        },
        {
            "message": "Missing item type\nReading the elements of a geonext file",
            "line": " src/reader/geonext.js:1091"
        },
        {
            "message": "Missing item type\nthis.objects holds all objects from the XML file.\nEvery object gets an attribute \"exists\"",
            "line": " src/reader/intergeo.js:75"
        },
        {
            "message": "Missing item type\nElement part",
            "line": " src/reader/intergeo.js:122"
        },
        {
            "message": "Missing item type\nPoints are created instantly via create",
            "line": " src/reader/intergeo.js:133"
        },
        {
            "message": "Missing item type\nLine data is stored in an array\nfor further access during the reading of constraints.\nThere, id and name are needed.",
            "line": " src/reader/intergeo.js:219"
        },
        {
            "message": "Missing item type\nCircle / conic data is stored in an array\nfor further access during the reading of constraints.\nThere, id and name are needed.\nConcretely, the circle   (x-1)^2 + (y-3)^2 = 4   has matrix\n(  1  0 -1 )\n(  0  1 -3 )\n( -1 -3  6 )\n\nIn general\nAx^2+Bxy+Cy^2+Dx+Ey+F = 0\nis stored as\n(  A   B/2  D/2 )\n(  B/2  C   E/2 )\n(  D/2 E/2  F )\n\n Mx = D/A\n My = E/C\n r = A*Mx^2+B*My^2-F",
            "line": " src/reader/intergeo.js:257"
        },
        {
            "message": "Missing item type\nConstraint part",
            "line": " src/reader/intergeo.js:311"
        },
        {
            "message": "Missing item type\nDirect construction of a line\nin read elements",
            "line": " src/reader/intergeo.js:441"
        },
        {
            "message": "Missing item type\nThe angular bisectors of two line [c1,a1,b1] and [c2,a2,b2] are determined by the equation:\n(a1*x+b1*y+c1*z)/sqrt(a1^2+b1^2) = +/- (a2*x+b2*y+c2*z)/sqrt(a2^2+b2^2)",
            "line": " src/reader/intergeo.js:836"
        },
        {
            "message": "Missing item type\nExtract the xml-code as String from the zipped Intergeo archive.",
            "line": " src/reader/intergeo.js:935"
        },
        {
            "message": "Missing item type\nDisplpay part",
            "line": " src/reader/intergeo.js:969"
        },
        {
            "message": "Missing item type\nGenerates {@link JXG.JessieCode} code from a sketchometry construction step.",
            "line": " src/reader/sketch.js:119"
        },
        {
            "message": "Missing item type",
            "line": " src/renderer/abstract.js:53"
        },
        {
            "message": "Missing item type",
            "line": " src/renderer/no.js:41"
        },
        {
            "message": "Missing item type\nIf this property is set to <tt>true</tt> the visual properties of the elements are updated\non every update. Visual properties means: All the stuff stored in the\n{@link JXG.GeometryElement#visProp} property won't be set if enhancedRendering is <tt>false</tt>",
            "line": " src/renderer/no.js:60"
        },
        {
            "message": "Missing item type\nThis is used to easily determine which renderer we are using",
            "line": " src/renderer/no.js:69"
        },
        {
            "message": "Missing item type\nDraws a point on the {@link JXG.Board}.",
            "line": " src/renderer/no.js:84"
        },
        {
            "message": "Missing item type\nUpdates visual appearance of the renderer element assigned to the given {@link JXG.Point}.",
            "line": " src/renderer/no.js:94"
        },
        {
            "message": "Missing item type\nChanges the style of a {@link JXG.Point}. This is required because the point styles differ in what\nelements have to be drawn, e.g. if the point is marked by a \"x\" or a \"+\" two lines are drawn, if\nit's marked by spot a circle is drawn. This method removes the old renderer element(s) and creates\nthe new one(s).",
            "line": " src/renderer/no.js:104"
        },
        {
            "message": "Missing item type\nDraws a line on the {@link JXG.Board}.",
            "line": " src/renderer/no.js:121"
        },
        {
            "message": "Missing item type\nUpdates visual appearance of the renderer element assigned to the given {@link JXG.Line}.",
            "line": " src/renderer/no.js:130"
        },
        {
            "message": "Missing item type\nCreates a rendering node for ticks added to a line.",
            "line": " src/renderer/no.js:139"
        },
        {
            "message": "Missing item type\nUpdate {@link Ticks} on a {@link JXG.Line}. This method is only a stub and has to be implemented\nin any descendant renderer class.",
            "line": " src/renderer/no.js:150"
        },
        {
            "message": "Missing item type\nDraws a {@link JXG.Curve} on the {@link JXG.Board}.",
            "line": " src/renderer/no.js:166"
        },
        {
            "message": "Missing item type\nUpdates visual appearance of the renderer element assigned to the given {@link JXG.Curve}.",
            "line": " src/renderer/no.js:175"
        },
        {
            "message": "Missing item type\nDraws a {@link JXG.Circle}",
            "line": " src/renderer/no.js:188"
        },
        {
            "message": "Missing item type\nUpdates visual appearance of a given {@link JXG.Circle} on the {@link JXG.Board}.",
            "line": " src/renderer/no.js:197"
        },
        {
            "message": "Missing item type\nDraws a {@link JXG.Polygon} on the {@link JXG.Board}.",
            "line": " src/renderer/no.js:211"
        },
        {
            "message": "Missing item type\nUpdates properties of a {@link JXG.Polygon}'s rendering node.",
            "line": " src/renderer/no.js:220"
        },
        {
            "message": "Missing item type\nShows a small copyright notice in the top left corner of the board.",
            "line": " src/renderer/no.js:233"
        },
        {
            "message": "Missing item type\nAn internal text is a {@link JXG.Text} element which is drawn using only\nthe given renderer but no HTML. This method is only a stub, the drawing\nis done in the special renderers.",
            "line": " src/renderer/no.js:240"
        },
        {
            "message": "Missing item type\nUpdates visual properties of an already existing {@link JXG.Text} element.",
            "line": " src/renderer/no.js:254"
        },
        {
            "message": "Missing item type\nDisplays a {@link JXG.Text} on the {@link JXG.Board} by putting a HTML div over it.",
            "line": " src/renderer/no.js:266"
        },
        {
            "message": "Missing item type\nUpdates visual properties of an already existing {@link JXG.Text} element.",
            "line": " src/renderer/no.js:278"
        },
        {
            "message": "Missing item type\nUpdates CSS style properties of a {@link JXG.Text} node.",
            "line": " src/renderer/no.js:290"
        },
        {
            "message": "Missing item type\nSet color and opacity of internal texts.\nSVG needs its own version.",
            "line": " src/renderer/no.js:303"
        },
        {
            "message": "Missing item type\nDraws an {@link JXG.Image} on a board; This is just a template that has to be implemented by special renderers.",
            "line": " src/renderer/no.js:316"
        },
        {
            "message": "Missing item type\nUpdates the properties of an {@link JXG.Image} element.",
            "line": " src/renderer/no.js:325"
        },
        {
            "message": "Missing item type\nApplies transformations on images and text elements. This method is just a stub and has to be implemented in all\ndescendant classes where text and image transformations are to be supported.",
            "line": " src/renderer/no.js:334"
        },
        {
            "message": "Missing item type\nIf the URL of the image is provided by a function the URL has to be updated during updateImage()",
            "line": " src/renderer/no.js:343"
        },
        {
            "message": "Missing item type\nAppends a node to a specific layer level. This is just an abstract method and has to be implemented\nin all renderers that want to use the <tt>createPrim</tt> model to draw.",
            "line": " src/renderer/no.js:354"
        },
        {
            "message": "Missing item type\nStores the rendering nodes. This is an abstract method which has to be implemented in all renderers that use\nthe <tt>createPrim</tt> method.",
            "line": " src/renderer/no.js:363"
        },
        {
            "message": "Missing item type\nCreates a node of a given type with a given id.",
            "line": " src/renderer/no.js:371"
        },
        {
            "message": "Missing item type\nRemoves an element node. Just a stub.",
            "line": " src/renderer/no.js:382"
        },
        {
            "message": "Missing item type\nCan be used to create the nodes to display arrows. This is an abstract method which has to be implemented\nin any descendant renderer.",
            "line": " src/renderer/no.js:388"
        },
        {
            "message": "Missing item type\nUpdates an ellipse node primitive. This is an abstract method which has to be implemented in all renderers\nthat use the <tt>createPrim</tt> method.",
            "line": " src/renderer/no.js:395"
        },
        {
            "message": "Missing item type\nRefreshes a line node. This is an abstract method which has to be implemented in all renderers that use\nthe <tt>createPrim</tt> method.",
            "line": " src/renderer/no.js:406"
        },
        {
            "message": "Missing item type\nUpdates a path element. This is an abstract method which has to be implemented in all renderers that use\nthe <tt>createPrim</tt> method.",
            "line": " src/renderer/no.js:418"
        },
        {
            "message": "Missing item type\nBuilds a path data string to draw a point with a face other than <em>rect</em> and <em>circle</em>. Since\nthe format of such a string usually depends on the renderer this method\nis only an abstract method. Therefore, it has to be implemented in the descendant renderer itself unless\nthe renderer does not use the createPrim interface but the draw* interfaces to paint.",
            "line": " src/renderer/no.js:428"
        },
        {
            "message": "Missing item type\nBuilds a path data string from a {@link JXG.Curve} element. Since the path data strings heavily depend on the\nunderlying rendering technique this method is just a stub. Although such a path string is of no use for the\nCanvasRenderer, this method is used there to draw a path directly.",
            "line": " src/renderer/no.js:441"
        },
        {
            "message": "Missing item type\nBuilds a path data string from a {@link JXG.Curve} element such that the curve looks like\nhand drawn.\nSince the path data strings heavily depend on the\nunderlying rendering technique this method is just a stub. Although such a path string is of no use for the\nCanvasRenderer, this method is used there to draw a path directly.",
            "line": " src/renderer/no.js:449"
        },
        {
            "message": "Missing item type\nUpdate a polygon primitive.",
            "line": " src/renderer/no.js:460"
        },
        {
            "message": "Missing item type\nUpdate a rectangle primitive. This is used only for points with face of type 'rect'.",
            "line": " src/renderer/no.js:467"
        },
        {
            "message": "Missing item type\nSets a node's attribute.",
            "line": " src/renderer/no.js:481"
        },
        {
            "message": "Missing item type\nShows a hidden element on the canvas; Only a stub, requires implementation in the derived renderer.",
            "line": " src/renderer/no.js:489"
        },
        {
            "message": "Missing item type\nHides an element on the canvas; Only a stub, requires implementation in the derived renderer.",
            "line": " src/renderer/no.js:496"
        },
        {
            "message": "Missing item type\nSets the buffering as recommended by SVGWG. Until now only Opera supports this and will be ignored by\nother browsers. Although this feature is only supported by SVG we have this method in {@link JXG.AbstractRenderer}\nbecause it is called from outside the renderer.",
            "line": " src/renderer/no.js:503"
        },
        {
            "message": "Missing item type\nSets an element's dash style.",
            "line": " src/renderer/no.js:513"
        },
        {
            "message": "Missing item type\nPuts an object into draft mode, i.e. it's visual appearance will be changed. For GEONE<sub>x</sub>T backwards compatibility.",
            "line": " src/renderer/no.js:519"
        },
        {
            "message": "Missing item type\nPuts an object from draft mode back into normal mode.",
            "line": " src/renderer/no.js:525"
        },
        {
            "message": "Missing item type\nSets up nodes for rendering a gradient fill.",
            "line": " src/renderer/no.js:531"
        },
        {
            "message": "Missing item type\nUpdates the gradient fill.",
            "line": " src/renderer/no.js:537"
        },
        {
            "message": "Missing item type\nSets an objects fill color.",
            "line": " src/renderer/no.js:543"
        },
        {
            "message": "Missing item type\nChanges an objects stroke color to the given color.",
            "line": " src/renderer/no.js:551"
        },
        {
            "message": "Missing item type\nSets an element's stroke width.",
            "line": " src/renderer/no.js:559"
        },
        {
            "message": "Missing item type\nSets the shadow properties to a geometry element. This method is only a stub, it is implemented in the actual renderers.",
            "line": " src/renderer/no.js:566"
        },
        {
            "message": "Missing item type\nHighlights an object, i.e. changes the current colors of the object to its highlighting colors",
            "line": " src/renderer/no.js:572"
        },
        {
            "message": "Missing item type\nUses the normal colors of an object, i.e. the opposite of {@link JXG.AbstractRenderer#highlight}.",
            "line": " src/renderer/no.js:579"
        },
        {
            "message": "Missing item type\nStop redraw. This method is called before every update, so a non-vector-graphics based renderer\ncan use this method to delete the contents of the drawing panel. This is an abstract method every\ndescendant renderer should implement, if appropriate.",
            "line": " src/renderer/no.js:591"
        },
        {
            "message": "Missing item type\nRestart redraw. This method is called after updating all the rendering node attributes.",
            "line": " src/renderer/no.js:599"
        },
        {
            "message": "Missing item type\nThe tiny zoom bar shown on the bottom of a board (if showNavigation on board creation is true).",
            "line": " src/renderer/no.js:605"
        },
        {
            "message": "Missing item type\nWrapper for getElementById for maybe other renderers which elements are not directly accessible by DOM methods like document.getElementById().",
            "line": " src/renderer/no.js:611"
        },
        {
            "message": "Missing item type\nResizes the rendering element",
            "line": " src/renderer/no.js:620"
        },
        {
            "message": "Missing item type\nSVG root node",
            "line": " src/renderer/svg.js:70"
        },
        {
            "message": "Missing item type\nThe SVG Namespace used in JSXGraph.",
            "line": " src/renderer/svg.js:76"
        },
        {
            "message": "Missing item type\nThe xlink namespace. This is used for images.",
            "line": " src/renderer/svg.js:84"
        },
        {
            "message": "Missing item type\nThe <tt>defs</tt> element is a container element to reference reusable SVG elements.",
            "line": " src/renderer/svg.js:111"
        },
        {
            "message": "Missing item type\nFilters are used to apply shadows.",
            "line": " src/renderer/svg.js:119"
        },
        {
            "message": "Missing item type\nJSXGraph uses a layer system to sort the elements on the board. This puts certain types of elements in front\nof other types of elements. For the order used see {@link JXG.Options.layer}. The number of layers is documented\nthere, too. The higher the number, the \"more on top\" are the elements on this layer.",
            "line": " src/renderer/svg.js:158"
        },
        {
            "message": "Missing item type\nDefines dash patterns. Defined styles are: <ol>\n<li value=\"-1\"> 2px dash, 2px space</li>\n<li> 5px dash, 5px space</li>\n<li> 10px dash, 10px space</li>\n<li> 20px dash, 20px space</li>\n<li> 20px dash, 10px space, 10px dash, 10px dash</li>\n<li> 20px dash, 5px space, 10px dash, 5px space</li></ol>",
            "line": " src/renderer/svg.js:185"
        },
        {
            "message": "Missing item type\nCreates an arrow DOM node. Arrows are displayed in SVG with a <em>marker</em> tag.",
            "line": " src/renderer/svg.js:204"
        },
        {
            "message": "Missing item type\nUpdates an arrow DOM node.",
            "line": " src/renderer/svg.js:263"
        },
        {
            "message": "Missing item type\nSet color and opacity of internal texts.\nSVG needs its own version.",
            "line": " src/renderer/svg.js:417"
        },
        {
            "message": "Missing item type\nConvert the SVG construction into an HTML canvas image.\nThis works for all SVG supporting browsers.\nFor IE it works from version 9.\nBut HTML texts are ignored on IE. The drawing is done with a delay of\n200 ms. Otherwise there are problems with IE.",
            "line": " src/renderer/svg.js:1170"
        },
        {
            "message": "Missing item type\nSets attribute <tt>key</tt> of node <tt>node</tt> to <tt>value</tt>.",
            "line": " src/renderer/vml.js:104"
        },
        {
            "message": "Missing item type",
            "line": " src/server/server.js:43"
        },
        {
            "message": "Missing item type",
            "line": " src/server/server.js:54"
        },
        {
            "message": "Missing item type\nThis is where all of a module's handlers are accessed from. If you're loading a module named JXGModule which\nprovides a handler called ImaHandler, then this handler can be called by invoking JXG.Server.modules.JXGModule.ImaHandler().",
            "line": " src/server/server.js:59"
        },
        {
            "message": "Missing item type\nStores all asynchronous calls to server which aren't finished yet.",
            "line": " src/server/server.js:66"
        },
        {
            "message": "Missing item type\nHandles errors, just a default implementation, can be overwritten by you, if you want to handle errors by yourself.",
            "line": " src/server/server.js:72"
        },
        {
            "message": "Missing item type\nThe main method of JXG.Server. Actually makes the calls to the server and parses the feedback.",
            "line": " src/server/server.js:80"
        },
        {
            "message": "Missing item type\nCallback for the default action 'load'.",
            "line": " src/server/server.js:219"
        },
        {
            "message": "Missing item type\nLoads a module from the server.",
            "line": " src/server/server.js:229"
        },
        {
            "message": "Missing item type\nExtracts one byte from a string and ensures the result is less than or equal to 255.",
            "line": " src/utils/base64.js:52"
        },
        {
            "message": "Missing item type\nDetermines the index of a base64 character in the base64 alphabet.",
            "line": " src/utils/base64.js:63"
        },
        {
            "message": "Missing item type\nEncode the given string.",
            "line": " src/utils/base64.js:87"
        },
        {
            "message": "Missing item type\nDecode from Base64",
            "line": " src/utils/base64.js:129"
        },
        {
            "message": "Missing item type\nDecode the base64 input data as an array",
            "line": " src/utils/base64.js:197"
        },
        {
            "message": "Missing item type\nFunctions for color conversions. This was originally based on a class to parse color values by\nStoyan Stefanov <sstoo@gmail.com> (see http://www.phpied.com/rgb-color-parser-in-javascript/)",
            "line": " src/utils/color.js:43"
        },
        {
            "message": "Missing item type\nConverts a valid HTML/CSS color string into a rgb value array. This is the base\nfunction for the following wrapper functions which only adjust the output to\ndifferent flavors like an object, string or hex values.",
            "line": " src/utils/color.js:244"
        },
        {
            "message": "Missing item type\nConverts a valid HTML/CSS color string into a string of the 'rgb(r, g, b)' format.",
            "line": " src/utils/color.js:330"
        },
        {
            "message": "Missing item type\nConverts a valid HTML/CSS color string into a HTML rgb string.",
            "line": " src/utils/color.js:348"
        },
        {
            "message": "Missing item type\nConverts a valid HTML/CSS color string from the '#rrggbb' format into the 'rgb(r, g, b)' format.",
            "line": " src/utils/color.js:384"
        },
        {
            "message": "Missing item type\nConverts HSV color to RGB color.\nBased on C Code in \"Computer Graphics -- Principles and Practice,\"\nFoley et al, 1996, p. 593.\nSee also http://www.efg2.com/Lab/Graphics/Colors/HSV.htm",
            "line": " src/utils/color.js:395"
        },
        {
            "message": "Missing item type\nConverts a color from the RGB color space into the HSV space. Input can be any valid HTML/CSS color definition.",
            "line": " src/utils/color.js:479"
        },
        {
            "message": "Missing item type\nConverts a color from the RGB color space into the LMS space. Input can be any valid HTML/CSS color definition.",
            "line": " src/utils/color.js:539"
        },
        {
            "message": "Missing item type\nConvert color information from LMS to RGB color space.",
            "line": " src/utils/color.js:579"
        },
        {
            "message": "Missing item type\nSplits a RGBA color value like #112233AA into it's RGB and opacity parts.",
            "line": " src/utils/color.js:643"
        },
        {
            "message": "Missing item type\nGenerates a RGBA color value like #112233AA from it's RGB and opacity parts.",
            "line": " src/utils/color.js:661"
        },
        {
            "message": "Missing item type\nDecolorizes the given color.",
            "line": " src/utils/color.js:682"
        },
        {
            "message": "Missing item type\nConverts a color into how a colorblind human approximately would see it.",
            "line": " src/utils/color.js:708"
        },
        {
            "message": "Missing item type\nDetermines highlight color to a given color. Done by reducing (or increasing) the opacity,",
            "line": " src/utils/color.js:801"
        },
        {
            "message": "Missing item type",
            "line": " src/utils/dump.js:41"
        },
        {
            "message": "Missing item type\nThe JXG.Dump namespace provides classes and methods to save a board to javascript.",
            "line": " src/utils/dump.js:49"
        },
        {
            "message": "Missing item type\nAdds markers to every element of the board",
            "line": " src/utils/dump.js:55"
        },
        {
            "message": "Missing item type\nRemoves markers from every element on the board.",
            "line": " src/utils/dump.js:86"
        },
        {
            "message": "Missing item type\nStringifies a string, i.e. puts some quotation marks around <tt>s</tt> if it is of type string.",
            "line": " src/utils/dump.js:111"
        },
        {
            "message": "Missing item type\nEliminate default values given by {@link JXG.Options} from the attributes object.",
            "line": " src/utils/dump.js:124"
        },
        {
            "message": "Missing item type\nPrepare the attributes object for an element.",
            "line": " src/utils/dump.js:158"
        },
        {
            "message": "Missing item type\nGenerate a save-able structure with all elements. This is used by {@link JXG.Dump#toJessie} and {@link JXG.Dump#toJavaScript}\nto generate the script.",
            "line": " src/utils/dump.js:183"
        },
        {
            "message": "Missing item type\nConverts an array of different values into a parameter string that can be used by the code generators.",
            "line": " src/utils/dump.js:243"
        },
        {
            "message": "Missing item type\nConverts a JavaScript object into a JCAN (JessieCode Attribute Notation) string.",
            "line": " src/utils/dump.js:261"
        },
        {
            "message": "Missing item type\nSaves the construction in <tt>board</tt> to JessieCode.",
            "line": " src/utils/dump.js:301"
        },
        {
            "message": "Missing item type\nSaves the construction in <tt>board</tt> to JavaScript.",
            "line": " src/utils/dump.js:335"
        },
        {
            "message": "Missing item type\nUTF8 encoding routines",
            "line": " src/utils/encoding.js:39"
        },
        {
            "message": "Missing item type\nEncode a string to utf-8.",
            "line": " src/utils/encoding.js:44"
        },
        {
            "message": "Missing item type\nDecode a string from utf-8.",
            "line": " src/utils/encoding.js:82"
        },
        {
            "message": "Missing item type\nExtends the standard charCodeAt() method of the String class to find the ASCII char code of\na character at a given position in a UTF8 encoded string.",
            "line": " src/utils/encoding.js:140"
        },
        {
            "message": "Missing item type",
            "line": " src/utils/env.js:41"
        },
        {
            "message": "Missing item type\nDetermines the property that stores the relevant information in the event object.",
            "line": " src/utils/env.js:52"
        },
        {
            "message": "Missing item type\nA document/window environment is available.",
            "line": " src/utils/env.js:59"
        },
        {
            "message": "Missing item type\nDetect browser support for VML.",
            "line": " src/utils/env.js:66"
        },
        {
            "message": "Missing item type\nDetect browser support for SVG.",
            "line": " src/utils/env.js:75"
        },
        {
            "message": "Missing item type\nDetect browser support for Canvas.",
            "line": " src/utils/env.js:83"
        },
        {
            "message": "Missing item type\nTrue, if run inside a node.js environment.",
            "line": " src/utils/env.js:100"
        },
        {
            "message": "Missing item type\nTrue if run inside a webworker environment.",
            "line": " src/utils/env.js:116"
        },
        {
            "message": "Missing item type\nChecks if the environments supports the W3C Pointer Events API {@link http://www.w3.org/Submission/pointer-events/}",
            "line": " src/utils/env.js:124"
        },
        {
            "message": "Missing item type\nDetermine if the current browser supports touch events",
            "line": " src/utils/env.js:132"
        },
        {
            "message": "Missing item type\nDetects if the user is using an Android powered device.",
            "line": " src/utils/env.js:140"
        },
        {
            "message": "Missing item type\nDetects if the user is using the default Webkit browser on an Android powered device.",
            "line": " src/utils/env.js:148"
        },
        {
            "message": "Missing item type\nDetects if the user is using a Apple iPad / iPhone.",
            "line": " src/utils/env.js:156"
        },
        {
            "message": "Missing item type\nDetects if the user is using Safari on an Apple device.",
            "line": " src/utils/env.js:164"
        },
        {
            "message": "Missing item type\nReturns true if the run inside a Windows 8 \"Metro\" App.",
            "line": " src/utils/env.js:172"
        },
        {
            "message": "Missing item type\nDetects if the user is using a Mozilla browser",
            "line": " src/utils/env.js:180"
        },
        {
            "message": "Missing item type\nDetects if the user is using a firefoxOS powered device.",
            "line": " src/utils/env.js:190"
        },
        {
            "message": "Missing item type\nInternet Explorer version. Works only for IE > 4.",
            "line": " src/utils/env.js:202"
        },
        {
            "message": "Missing item type\nReads the width and height of an HTML element.",
            "line": " src/utils/env.js:225"
        },
        {
            "message": "Missing item type\nAdds an event listener to a DOM element.",
            "line": " src/utils/env.js:294"
        },
        {
            "message": "Missing item type\nRemoves an event listener from a DOM element.",
            "line": " src/utils/env.js:321"
        },
        {
            "message": "Missing item type\nRemoves all events of the given type from a given DOM node; Use with caution and do not use it on a container div\nof a {@link JXG.Board} because this might corrupt the event handling system.",
            "line": " src/utils/env.js:370"
        },
        {
            "message": "Missing item type\nCross browser mouse / touch coordinates retrieval relative to the board's top left corner.",
            "line": " src/utils/env.js:392"
        },
        {
            "message": "Missing item type\nCalculates recursively the offset of the DOM element in which the board is stored.",
            "line": " src/utils/env.js:443"
        },
        {
            "message": "Missing item type\nAccess CSS style sheets.",
            "line": " src/utils/env.js:497"
        },
        {
            "message": "Missing item type\nReads css style sheets of a given element. This method is a getStyle wrapper and\ndefaults the read value to <tt>0</tt> if it can't be parsed as an integer value.",
            "line": " src/utils/env.js:527"
        },
        {
            "message": "Missing item type\nCorrect position of upper left corner in case of\na CSS transformation. Here, only translations are\nextracted. All scaling transformations are corrected\nin {@link JXG.Board#getMousePosition}.",
            "line": " src/utils/env.js:539"
        },
        {
            "message": "Missing item type\nExtract the coordinates and apply the transformation\nto cPos",
            "line": " src/utils/env.js:562"
        },
        {
            "message": "Missing item type\nScaling CSS transformations applied to the div element containing the JSXGraph constructions\nare determined. Not implemented are 'rotate', 'skew', 'skewX', 'skewY'.",
            "line": " src/utils/env.js:594"
        },
        {
            "message": "Missing item type\nProcess data in timed chunks. Data which takes long to process, either because it is such\na huge amount of data or the processing takes some time, causes warnings in browsers about\nirresponsive scripts. To prevent these warnings, the processing is split into smaller pieces\ncalled chunks which will be processed in serial order.\nCopyright 2009 Nicholas C. Zakas. All rights reserved. MIT Licensed",
            "line": " src/utils/env.js:645"
        },
        {
            "message": "Missing item type",
            "line": " src/utils/event.js:41"
        },
        {
            "message": "Missing item type",
            "line": " src/utils/expect.js:41"
        },
        {
            "message": "Missing item type\nApply an expect method on every element of an array.",
            "line": " src/utils/expect.js:52"
        },
        {
            "message": "Missing item type\nNormalize points and coord objects into a coord object.",
            "line": " src/utils/expect.js:75"
        },
        {
            "message": "Missing item type\nNormalize points, coordinate arrays and coord objects into a coordinate array.",
            "line": " src/utils/expect.js:99"
        },
        {
            "message": "Missing item type",
            "line": " src/utils/type.js:41"
        },
        {
            "message": "Missing item type\nChecks if the given string is an id within the given board.",
            "line": " src/utils/type.js:54"
        },
        {
            "message": "Missing item type\nChecks if the given string is a name within the given board.",
            "line": " src/utils/type.js:64"
        },
        {
            "message": "Missing item type\nChecks if the given string is a group id within the given board.",
            "line": " src/utils/type.js:74"
        },
        {
            "message": "Missing item type\nChecks if the value of a given variable is of type string.",
            "line": " src/utils/type.js:84"
        },
        {
            "message": "Missing item type\nChecks if the value of a given variable is of type number.",
            "line": " src/utils/type.js:93"
        },
        {
            "message": "Missing item type\nChecks if a given variable references a function.",
            "line": " src/utils/type.js:102"
        },
        {
            "message": "Missing item type\nChecks if a given variable references an array.",
            "line": " src/utils/type.js:111"
        },
        {
            "message": "Missing item type\nTests if the input variable is an Object",
            "line": " src/utils/type.js:129"
        },
        {
            "message": "Missing item type\nChecks if a given variable is a reference of a JSXGraph Point element.",
            "line": " src/utils/type.js:137"
        },
        {
            "message": "Missing item type\nChecks if a given variable is a reference of a JSXGraph Point element or an array of length at least two or\na function returning an array of length two or three.",
            "line": " src/utils/type.js:150"
        },
        {
            "message": "Missing item type\nChecks if a given variable is neither undefined nor null. You should not use this together with global\nvariables!",
            "line": " src/utils/type.js:173"
        },
        {
            "message": "Missing item type\nHandle default parameters.",
            "line": " src/utils/type.js:185"
        },
        {
            "message": "Missing item type\nConverts a string containing either <strong>true</strong> or <strong>false</strong> into a boolean value.",
            "line": " src/utils/type.js:199"
        },
        {
            "message": "Missing item type\nConvert a String, a number or a function into a function. This method is used in Transformation.js",
            "line": " src/utils/type.js:220"
        },
        {
            "message": "Missing item type\nConvert a String, number or function into a function.",
            "line": " src/utils/type.js:242"
        },
        {
            "message": "Missing item type",
            "line": " src/utils/type.js:268"
        },
        {
            "message": "Missing item type",
            "line": " src/utils/type.js:274"
        },
        {
            "message": "Missing item type\nTest if the parents array contains existing points. If instead parents contains coordinate arrays or function returning coordinate arrays\nfree points with these coordinates are created.",
            "line": " src/utils/type.js:287"
        },
        {
            "message": "Missing item type\nGenerates a function which calls the function fn in the scope of owner.",
            "line": " src/utils/type.js:348"
        },
        {
            "message": "Missing item type\nIf <tt>val</tt> is a function, it will be evaluated without giving any parameters, else the input value\nis just returned.",
            "line": " src/utils/type.js:360"
        },
        {
            "message": "Missing item type\nSearch an array for a given value.",
            "line": " src/utils/type.js:374"
        },
        {
            "message": "Missing item type\nEliminates duplicate entries in an array consisting of numbers and strings.",
            "line": " src/utils/type.js:398"
        },
        {
            "message": "Missing item type\nSwaps to array elements.",
            "line": " src/utils/type.js:422"
        },
        {
            "message": "Missing item type\nGenerates a copy of an array and removes the duplicate entries. The original\nArray will be altered.",
            "line": " src/utils/type.js:439"
        },
        {
            "message": "Missing item type\nChecks if an array contains an element equal to <tt>val</tt> but does not check the type!",
            "line": " src/utils/type.js:482"
        },
        {
            "message": "Missing item type\nConverts an array of {@link JXG.Coords} objects into a coordinate matrix.",
            "line": " src/utils/type.js:492"
        },
        {
            "message": "Missing item type\nCompare two arrays.",
            "line": " src/utils/type.js:519"
        },
        {
            "message": "Missing item type\nRemoves an element from the given array",
            "line": " src/utils/type.js:546"
        },
        {
            "message": "Missing item type\nTruncate a number <tt>n</tt> after <tt>p</tt> decimals.",
            "line": " src/utils/type.js:565"
        },
        {
            "message": "Missing item type\nTruncate a number <tt>val</tt> automatically.",
            "line": " src/utils/type.js:590"
        },
        {
            "message": "Missing item type\nExtracts the keys of a given object.",
            "line": " src/utils/type.js:610"
        },
        {
            "message": "Missing item type\nThis outputs an object with a base class reference to the given object. This is useful if\nyou need a copy of an e.g. attributes object and want to overwrite some of the attributes\nwithout changing the original object.",
            "line": " src/utils/type.js:636"
        },
        {
            "message": "Missing item type\nEmbeds an existing object into another one just like {@link #clone} and copies the contents of the second object\nto the new one. Warning: The copied properties of obj2 are just flat copies.",
            "line": " src/utils/type.js:651"
        },
        {
            "message": "Missing item type\nRecursively merges obj2 into obj1. Contrary to {@link JXG#deepCopy} this won't create a new object\nbut instead will",
            "line": " src/utils/type.js:678"
        },
        {
            "message": "Missing item type\nCreates a deep copy of an existing object, i.e. arrays or sub-objects are copied component resp.\nelement-wise instead of just copying the reference. If a second object is supplied, the two objects\nare merged into one object. The properties of the second object have priority.",
            "line": " src/utils/type.js:717"
        },
        {
            "message": "Missing item type\nGenerates an attributes object that is filled with default values from the Options object\nand overwritten by the user speciified attributes.",
            "line": " src/utils/type.js:788"
        },
        {
            "message": "Missing item type\nCopy all prototype methods from object \"superObject\" to object\n\"subObject\". The constructor of superObject will be available\nin subObject as subObject.constructor[constructorName].",
            "line": " src/utils/type.js:873"
        },
        {
            "message": "Missing item type\nConverts a JavaScript object into a JSON string.",
            "line": " src/utils/type.js:892"
        },
        {
            "message": "Missing item type\nResets visPropOld.",
            "line": " src/utils/type.js:956"
        },
        {
            "message": "Missing item type\nChecks if an object contains a key, whose value equals to val.",
            "line": " src/utils/type.js:980"
        },
        {
            "message": "Missing item type\nReplaces all occurences of &amp; by &amp;amp;, &gt; by &amp;gt;, and &lt; by &amp;lt;.",
            "line": " src/utils/type.js:1000"
        },
        {
            "message": "Missing item type\nEliminates all substrings enclosed by &lt; and &gt; and replaces all occurences of\n&amp;amp; by &amp;, &amp;gt; by &gt;, and &amp;lt; by &lt;.",
            "line": " src/utils/type.js:1009"
        },
        {
            "message": "Missing item type\nMakes a string lower case except for the first character which will be upper case.",
            "line": " src/utils/type.js:1021"
        },
        {
            "message": "Missing item type\nMake numbers given as strings nicer by removing all unnecessary leading and trailing zeroes.",
            "line": " src/utils/type.js:1030"
        },
        {
            "message": "Missing item type\nFilter an array of elements.",
            "line": " src/utils/type.js:1050"
        },
        {
            "message": "Missing item type\nRemove all leading and trailing whitespaces from a given string.",
            "line": " src/utils/type.js:1109"
        },
        {
            "message": "Missing item type\nConvert HTML tags to entities or use html_sanitize if the google caja html sanitizer is available.",
            "line": " src/utils/type.js:1121"
        },
        {
            "message": "Missing item type\nIf <tt>s</tt> is a slider, it returns the sliders value, otherwise it just returns the given value.",
            "line": " src/utils/type.js:1139"
        },
        {
            "message": "Missing item type\nGenerate a random uuid.\nWritten by http://www.broofa.com (robert@broofa.com)\n\nCopyright (c) 2010 Robert Kieffer\nDual licensed under the MIT and GPL licenses.",
            "line": " src/utils/uuid.js:1"
        },
        {
            "message": "Missing item type\nGeneral utility routines",
            "line": " src/utils/uuid.js:28"
        },
        {
            "message": "Missing item type\nHolds browser independent xml parsing routines. Won't work in environments other than browsers.",
            "line": " src/utils/xml.js:45"
        },
        {
            "message": "Missing item type\nCleans out unneccessary whitespaces in a chunk of xml.",
            "line": " src/utils/xml.js:50"
        },
        {
            "message": "Missing item type\nConverts a given string into a XML tree.",
            "line": " src/utils/xml.js:67"
        },
        {
            "message": "Missing item type",
            "line": " src/utils/zip.js:44"
        },
        {
            "message": "Missing item type",
            "line": " src/jsxgraph.js:49"
        },
        {
            "message": "Missing item type\nStores the renderer that is used to draw the boards.",
            "line": " src/jsxgraph.js:71"
        },
        {
            "message": "Missing item type\nInitialise a new board.",
            "line": " src/jsxgraph.js:160"
        },
        {
            "message": "Missing item type\nLoad a board from a file containing a construction made with either GEONExT,\nIntergeo, Geogebra, or Cinderella.",
            "line": " src/jsxgraph.js:256"
        },
        {
            "message": "Missing item type\nLoad a board from a base64 encoded string containing a construction made with either GEONExT,\nIntergeo, Geogebra, or Cinderella.",
            "line": " src/jsxgraph.js:296"
        },
        {
            "message": "Missing item type\nDelete a board and all its contents.",
            "line": " src/jsxgraph.js:336"
        },
        {
            "message": "Missing item type",
            "line": " src/jsxgraph.js:380"
        },
        {
            "message": "Missing item type\nJXG is the top object of JSXGraph and defines the namespace",
            "line": " src/jxg.js:56"
        },
        {
            "message": "Missing item type\nJSXGraph namespace. Holds all classes, objects, functions and variables belonging to JSXGraph\nto reduce the risk of interfering with other JavaScript code.",
            "line": " src/loadjsxgraph.js:39"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:69"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:357"
        },
        {
            "message": "Missing item type\nOptions that are used by the navigation bar.\n\nDefault values are\n<pre>\nJXG.Option.navbar: {\n  strokeColor: '#333333',\n  fillColor: 'transparent',\n  highlightFillColor: '#aaaaaa',\n  padding: '2px',\n  position: 'absolute',\n  fontSize: '14px',\n  cursor: 'pointer',\n  zIndex: '100',\n  right: '5px',\n  bottom: '5px'\n},\n</pre>",
            "line": " src/options.js:360"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:400"
        },
        {
            "message": "Missing item type\nA private element will be inaccessible in certain environments, e.g. a graphical user interface.",
            "line": " src/options.js:559"
        },
        {
            "message": "Missing item type\nDisplay layer which will contain the element.",
            "line": " src/options.js:565"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:673"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:679"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:686"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:903"
        },
        {
            "message": "Missing item type\nPrecision options.\n\nThe default values are\n<pre>\nJXG.Options.precision: {\n  touch: 30,\n  touchMax: 100,\n  mouse: 4,\n  epsilon: 0.0001,\n  hasPoint: 4\n}\n</pre>",
            "line": " src/options.js:919"
        },
        {
            "message": "Missing item type\nDefault ordering of the layers.\n\nThe default values are\n<pre>\nJXG.Options.layer: {\n  numlayers: 20, // only important in SVG\n  text: 9,\n  point: 9,\n  glider: 9,\n  arc: 8,\n  line: 7,\n  circle: 6,\n  curve: 5,\n  turtle: 5,\n  polygon: 3,\n  sector: 3,\n  angle: 3,\n  integral: 3,\n  axis: 2,\n  ticks: 2,\n  grid: 1,\n  image: 0,\n  trace: 0\n}\n</pre>",
            "line": " src/options.js:941"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:991"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1049"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1057"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1085"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1090"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1103"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1108"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1183"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1188"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1207"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1212"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1236"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1241"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1256"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1261"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1273"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1278"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1293"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1298"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1339"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1344"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1365"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1369"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1390"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1395"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1419"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1424"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1446"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1458"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1546"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1550"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1555"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1560"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1576"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1580"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1584"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1589"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1598"
        },
        {
            "message": "Missing item type\nThese affect the DOM element input type=\"range\".\n The other attributes affect the DOM element div containing the range element.",
            "line": " src/options.js:1602"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1619"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1624"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1685"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1690"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1711"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1715"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1733"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1737"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1753"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1758"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1831"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1836"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1851"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1856"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1872"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1877"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1909"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1914"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1920"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:1925"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2101"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2106"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2115"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2120"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2138"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2143"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2148"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2153"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2175"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2180"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2187"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2192"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2205"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2210"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2428"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2433"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2503"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2508"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2524"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2529"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2597"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2602"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2610"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2615"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2680"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2685"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2692"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2696"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2713"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2718"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2872"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2877"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2943"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2948"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2952"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:2957"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:3061"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:3066"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:3280"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:3285"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:3300"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:3305"
        },
        {
            "message": "Missing item type",
            "line": " src/options.js:3324"
        },
        {
            "message": "Missing item type\nAbbreviations of properties. Setting the shortcut means setting abbreviated properties\nto the same value.\nIt is used in {@link JXG.GeometryElement#setAttribute} and in\nthe constructor {@link JXG.GeometryElement}.\nAttention: In Options.js abbreviations are not allowed.",
            "line": " src/options.js:3327"
        },
        {
            "message": "Missing item type\nHolds all possible properties and the according validators for geometry elements. A validator is either a function\nwhich takes one parameter and returns true, if the value is valid for the property, or it is false if no validator\nis required.",
            "line": " src/options.js:3344"
        },
        {
            "message": "Missing item type\nAll point faces can be defined with more than one name, e.g. a cross faced point can be given\nby face equal to 'cross' or equal to 'x'. This method maps all possible values to fixed ones to\nsimplify if- and switch-clauses regarding point faces. The translation table is as follows:\n<table>\n<tr><th>Input</th><th>Output</th></tr>\n<tr><td>cross, x</td><td>x</td></tr>\n<tr><td>circle, o</td><td>o</td></tr>\n<tr><td>square, []</td><td>[]</td></tr>\n<tr><td>plus, +</td><td>+</td></tr>\n<tr><td>diamond, &lt;&gt;</td><td>&lt;&gt;</td></tr>\n<tr><td>triangleup, a, ^</td><td>A</td></tr>\n<tr><td>triangledown, v</td><td>v</td></tr>\n<tr><td>triangleleft, &lt;</td><td>&lt;</td></tr>\n<tr><td>triangleright, &gt;</td><td>&gt;</td></tr>\n</table>",
            "line": " src/options.js:3461"
        },
        {
            "message": "Missing item type\nApply the options stored in this object to all objects on the given board.",
            "line": " src/options.js:3508"
        },
        {
            "message": "Missing item type\nConverts all color values to greyscale and calls useStandardOption to put them onto the board.",
            "line": " src/options.js:3578"
        }
    ]
}