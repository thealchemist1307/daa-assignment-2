{"ast":null,"code":"import _objectSpread from\"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import styled from\"styled-components\";import{Scrollbars}from\"rc-scrollbars\";import\"./Document.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var table={Sheet1:[{\"Subroutine Name\":\"y_set()\",\"Time Complexity\":\"O(n*logn)\",Explanation:\"iterating through the set of rectangles of size n, and insertion of each of them takes O(logn) time\"},{\"Subroutine Name\":\"Y_partition()\",\"Time Complexity\":\"O(n*logn)\",Explanation:\"Iteration through all y_cordinates takes O(n) and in each iteration we insert into a priority queue O(logn)\"},{\"Subroutine Name\":\"findFrame()\",\"Time Complexity\":\"O(n)\",Explanation:\"iterates through all the rectangles and finds the minimum and maximum y and x coordinates\"},{\"Subroutine Name\":\"set_intersection()\",\"Time Complexity\":\"O(n)\",Explanation:\"Exploits the fact that the sets are in sorted order, and uses the two pointer approach to find intersection\"},{\"Subroutine Name\":\"set_difference()\",\"Time Complexity\":\"O(n)\",Explanation:\"Exploits the fact that the sets are in sorted order, and uses the two pointer approach to find intersection\"},{\"Subroutine Name\":\"set_union()\",\"Time Complexity\":\"O(n)\",Explanation:\"Adds all elements excluding the duplicates\"},{\"Subroutine Name\":\"copy()\",\"Time Complexity\":\"O(n*logn)\",Explanation:\"Takes the intervals(sorted) and the stripes(sorted) and uses two pointer O(n) to find the optimum stripe and then insert into set in O(logn)\"},{\"Subroutine Name\":\"blacken()\",\"Time Complexity\":\"O(n*logn)\",Explanation:\"Takes the intervals(sorted) and the stripes(sorted) and uses two pointer O(n) to find the optimum stripe to update x_union and then insert into set in O(logn)\"},{\"Subroutine Name\":\"concat()\",\"Time Complexity\":\"O(n*logn)\",Explanation:\"Takes advantage of the ordering of stripes and partitions to update the x_union in O(n) and insert in O(logn),\"},{\"Subroutine Name\":\"stripes()\",\"Time Complexity\":\"O(n*logn*logn)\",Explanation:\"T(n)= 2*T(n/2) + O(n*logn)\\n2*T(n/2) - call for stripes for left and right vertical edges\\nO(n*logn) - bottleneck caused due to concat() / blacken() / copy() . All are O(n*logn) operations.\"},{\"Subroutine Name\":\"rectangle_DAC()\",\"Time Complexity\":\"O(n*logn) + O(n*logn*logn)\",Explanation:\"Divides the set of vertical edges of the rectangle into two equal sets L and R O(nlogn), and calls the stripes algorithm on this initial division of vertices. The stripes algorithm called inside will take O(nlogn *logn). Returns the final set of vertices to the main function.\"}]};var Document=/*#__PURE__*/function(_React$Component){_inherits(Document,_React$Component);var _super=_createSuper(Document);function Document(){var _this;_classCallCheck(this,Document);_this=_super.call(this);_this.state={height:\"\"};return _this;}_createClass(Document,[{key:\"componentDidMount\",value:function componentDidMount(){this.setState({height:window.innerHeight});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(Scrollbars,{disableDefaultStyles:true,renderThumbHorizontal:function renderThumbHorizontal(props){return/*#__PURE__*/_jsx(\"div\",_objectSpread(_objectSpread({},props),{},{className:\"vertical\"}));},renderThumbVertical:function renderThumbVertical(props){return/*#__PURE__*/_jsx(\"div\",_objectSpread(_objectSpread({},props),{},{className:\"vertical\"}));},style:{width:\"fill\",height:this.state.height*0.9},children:/*#__PURE__*/_jsxs(\"div\",{style:{color:\"white\"},children:[/*#__PURE__*/_jsxs(\"h1\",{style:{color:\"white\",textAlign:\"center\",margin:\"20px\"},children:[\"Calculating the Time Complexity\",\" \"]}),/*#__PURE__*/_jsxs(\"div\",{class:\"container\",children:[/*#__PURE__*/_jsx(\"h2\",{style:{margin:\"20px\"},children:\"The Complexity Analysis for the common subroutines involved in our implementation of Guting\\u2019s algorithm for the Measure problem and Contour problem:\"}),/*#__PURE__*/_jsxs(\"div\",{class:\"row\",children:[/*#__PURE__*/_jsx(\"div\",{class:\"col-3\",style:{border:\"solid\",borderWidth:\"1px\",borderColor:\"tomato\",fontSize:\"20px\",fontWeight:\"bold\"},children:\"Subroutine Name\"}),/*#__PURE__*/_jsx(\"div\",{class:\"col-3\",style:{border:\"solid\",borderWidth:\"1px\",borderColor:\"tomato\",fontSize:\"20px\",fontWeight:\"bold\"},children:\"Time Complexity\"}),/*#__PURE__*/_jsx(\"div\",{class:\"col\",style:{border:\"solid\",borderWidth:\"1px\",borderColor:\"tomato\",fontSize:\"20px\",fontWeight:\"bold\"},children:\"Explanation\"})]}),table.Sheet1.map(function(item,index){return/*#__PURE__*/_jsxs(\"div\",{class:\"row\",children:[/*#__PURE__*/_jsx(\"div\",{class:\"col-3\",style:{border:\"solid\",borderWidth:\"1px\",borderColor:\"tomato\"},children:item[\"Subroutine Name\"]}),/*#__PURE__*/_jsx(\"div\",{class:\"col-3\",style:{border:\"solid\",borderWidth:\"1px\",borderColor:\"tomato\"},children:item[\"Time Complexity\"]}),/*#__PURE__*/_jsx(\"div\",{class:\"col\",style:{border:\"solid\",borderWidth:\"1px\",borderColor:\"tomato\"},children:item.Explanation})]});}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:\"40px\",marginBottom:\"40px\"},children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontWeight:\"bold\"},children:\"Additional Subroutine for Measure problem:-\"}),/*#__PURE__*/_jsxs(\"h4\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:\"bold\"},children:\"measure() - O(n) -\"}),\" \",\"iterates through all the stripes and computes the total\"]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{fontWeight:\"bold\",marginTop:\"40px\",marginBottom:\"40px\"},children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontWeight:\"bold\"},children:\"Overall Time Complexity for Measure Problem:-\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"= Taking input from user + findFrame() + rectangle_DAC() + measure()\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"= O(n) + O(n) + O(n*logn*logn) + O(n)\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"= O(n*logn*logn)\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:\"40px\",marginBottom:\"40px\"},children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontWeight:\"bold\"},children:\"Additional Subroutine for Contour problem:-\"}),/*#__PURE__*/_jsxs(\"h5\",{children:[/*#__PURE__*/_jsx(\"span\",{style:{fontWeight:\"bold\"},children:\"contour() - O(n) -\"}),\"iterates through all the stripes and computes the total measure\",\" \"]}),/*#__PURE__*/_jsxs(\"h5\",{children:[/*#__PURE__*/_jsxs(\"span\",{style:{fontWeight:\"bold\"},children:[\"contour_pieces() - O() -\",\" \"]}),\"measure\",\" \"]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{fontWeight:\"bold\",marginTop:\"40px\",marginBottom:\"40px\"},children:[/*#__PURE__*/_jsx(\"h2\",{style:{fontWeight:\"bold\"},children:\"Overall Time Complexity for Contour Problem:-\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"= Taking input from user + findFrame() + rectangle_DAC() + contour()\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"= O(n) + O(n) + O(n*logn*logn) + O(n))\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"= O(n*logn*logn)\"})]})]})]})});}}]);return Document;}(React.Component);export default Document;","map":{"version":3,"sources":["/home/nishit/WEbsite/src/Document/Document.js"],"names":["React","styled","Scrollbars","table","Sheet1","Explanation","Document","state","height","setState","window","innerHeight","props","width","color","textAlign","margin","border","borderWidth","borderColor","fontSize","fontWeight","map","item","index","marginTop","marginBottom","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Scrollbars } from \"rc-scrollbars\";\nimport \"./Document.css\";\nlet table = {\n  Sheet1: [\n    {\n      \"Subroutine Name\": \"y_set()\",\n      \"Time Complexity\": \"O(n*logn)\",\n      Explanation:\n        \"iterating through the set of rectangles of size n, and insertion of each of them takes O(logn) time\"\n    },\n    {\n      \"Subroutine Name\": \"Y_partition()\",\n      \"Time Complexity\": \"O(n*logn)\",\n      Explanation:\n        \"Iteration through all y_cordinates takes O(n) and in each iteration we insert into a priority queue O(logn)\"\n    },\n    {\n      \"Subroutine Name\": \"findFrame()\",\n      \"Time Complexity\": \"O(n)\",\n      Explanation:\n        \"iterates through all the rectangles and finds the minimum and maximum y and x coordinates\"\n    },\n    {\n      \"Subroutine Name\": \"set_intersection()\",\n      \"Time Complexity\": \"O(n)\",\n      Explanation:\n        \"Exploits the fact that the sets are in sorted order, and uses the two pointer approach to find intersection\"\n    },\n    {\n      \"Subroutine Name\": \"set_difference()\",\n      \"Time Complexity\": \"O(n)\",\n      Explanation:\n        \"Exploits the fact that the sets are in sorted order, and uses the two pointer approach to find intersection\"\n    },\n    {\n      \"Subroutine Name\": \"set_union()\",\n      \"Time Complexity\": \"O(n)\",\n      Explanation: \"Adds all elements excluding the duplicates\"\n    },\n    {\n      \"Subroutine Name\": \"copy()\",\n      \"Time Complexity\": \"O(n*logn)\",\n      Explanation:\n        \"Takes the intervals(sorted) and the stripes(sorted) and uses two pointer O(n) to find the optimum stripe and then insert into set in O(logn)\"\n    },\n    {\n      \"Subroutine Name\": \"blacken()\",\n      \"Time Complexity\": \"O(n*logn)\",\n      Explanation:\n        \"Takes the intervals(sorted) and the stripes(sorted) and uses two pointer O(n) to find the optimum stripe to update x_union and then insert into set in O(logn)\"\n    },\n    {\n      \"Subroutine Name\": \"concat()\",\n      \"Time Complexity\": \"O(n*logn)\",\n      Explanation:\n        \"Takes advantage of the ordering of stripes and partitions to update the x_union in O(n) and insert in O(logn),\"\n    },\n    {\n      \"Subroutine Name\": \"stripes()\",\n      \"Time Complexity\": \"O(n*logn*logn)\",\n      Explanation:\n        \"T(n)= 2*T(n/2) + O(n*logn)\\n2*T(n/2) - call for stripes for left and right vertical edges\\nO(n*logn) - bottleneck caused due to concat() / blacken() / copy() . All are O(n*logn) operations.\"\n    },\n    {\n      \"Subroutine Name\": \"rectangle_DAC()\",\n      \"Time Complexity\": \"O(n*logn) + O(n*logn*logn)\",\n      Explanation:\n        \"Divides the set of vertical edges of the rectangle into two equal sets L and R O(nlogn), and calls the stripes algorithm on this initial division of vertices. The stripes algorithm called inside will take O(nlogn *logn). Returns the final set of vertices to the main function.\"\n    }\n  ]\n};\n\nclass Document extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      height: \"\"\n    };\n  }\n  componentDidMount() {\n    this.setState({ height: window.innerHeight });\n  }\n  render() {\n    return (\n      <Scrollbars\n        disableDefaultStyles\n        renderThumbHorizontal={(props) => (\n          <div {...props} className=\"vertical\" />\n        )}\n        renderThumbVertical={(props) => <div {...props} className=\"vertical\" />}\n        style={{ width: \"fill\", height: this.state.height * 0.9 }}\n      >\n        <div style={{ color: \"white\" }}>\n          <h1 style={{ color: \"white\", textAlign: \"center\", margin: \"20px\" }}>\n            Calculating the Time Complexity{\" \"}\n          </h1>\n\n          <div class=\"container\">\n            <h2 style={{ margin: \"20px\" }}>\n              The Complexity Analysis for the common subroutines involved in our\n              implementation of Guting’s algorithm for the Measure problem and\n              Contour problem:\n            </h2>\n            <div class=\"row\">\n              <div\n                class=\"col-3\"\n                style={{\n                  border: \"solid\",\n                  borderWidth: \"1px\",\n                  borderColor: \"tomato\",\n                  fontSize: \"20px\",\n                  fontWeight: \"bold\"\n                }}\n              >\n                Subroutine Name\n              </div>\n              <div\n                class=\"col-3\"\n                style={{\n                  border: \"solid\",\n                  borderWidth: \"1px\",\n                  borderColor: \"tomato\",\n                  fontSize: \"20px\",\n                  fontWeight: \"bold\"\n                }}\n              >\n                Time Complexity\n              </div>\n              <div\n                class=\"col\"\n                style={{\n                  border: \"solid\",\n                  borderWidth: \"1px\",\n                  borderColor: \"tomato\",\n                  fontSize: \"20px\",\n                  fontWeight: \"bold\"\n                }}\n              >\n                Explanation\n              </div>\n            </div>\n            {table.Sheet1.map((item, index) => {\n              return (\n                <div class=\"row\">\n                  <div\n                    class=\"col-3\"\n                    style={{\n                      border: \"solid\",\n                      borderWidth: \"1px\",\n                      borderColor: \"tomato\"\n                    }}\n                  >\n                    {item[\"Subroutine Name\"]}\n                  </div>\n                  <div\n                    class=\"col-3\"\n                    style={{\n                      border: \"solid\",\n                      borderWidth: \"1px\",\n                      borderColor: \"tomato\"\n                    }}\n                  >\n                    {item[\"Time Complexity\"]}\n                  </div>\n                  <div\n                    class=\"col\"\n                    style={{\n                      border: \"solid\",\n                      borderWidth: \"1px\",\n                      borderColor: \"tomato\"\n                    }}\n                  >\n                    {item.Explanation}\n                  </div>\n                </div>\n              );\n            })}\n            <div\n              style={{\n                marginTop: \"40px\",\n                marginBottom: \"40px\"\n              }}\n            >\n              <h2 style={{ fontWeight: \"bold\" }}>\n                Additional Subroutine for Measure problem:-\n              </h2>\n              <h4>\n                <span style={{ fontWeight: \"bold\" }}>measure() - O(n) -</span>{\" \"}\n                iterates through all the stripes and computes the total\n              </h4>\n            </div>\n            <div\n              style={{\n                fontWeight: \"bold\",\n                marginTop: \"40px\",\n                marginBottom: \"40px\"\n              }}\n            >\n              <h2 style={{ fontWeight: \"bold\" }}>\n                Overall Time Complexity for Measure Problem:-\n              </h2>\n              <h5>\n                = Taking input from user + findFrame() + rectangle_DAC() +\n                measure()\n              </h5>\n              <h5>= O(n) + O(n) + O(n*logn*logn) + O(n)</h5>\n              <h5>= O(n*logn*logn)</h5>\n            </div>\n            <div\n              style={{\n                marginTop: \"40px\",\n                marginBottom: \"40px\"\n              }}\n            >\n              <h2 style={{ fontWeight: \"bold\" }}>\n                Additional Subroutine for Contour problem:-\n              </h2>\n              <h5>\n                <span style={{ fontWeight: \"bold\" }}>contour() - O(n) -</span>\n                iterates through all the stripes and computes the total measure{\" \"}\n              </h5>\n              <h5>\n                <span style={{ fontWeight: \"bold\" }}>\n                  contour_pieces() - O() -{\" \"}\n                </span>\n                measure{\" \"}\n              </h5>\n            </div>\n            <div\n              style={{\n                fontWeight: \"bold\",\n                marginTop: \"40px\",\n                marginBottom: \"40px\"\n              }}\n            >\n              <h2 style={{ fontWeight: \"bold\" }}>\n                Overall Time Complexity for Contour Problem:-\n              </h2>\n              <h5>\n                = Taking input from user + findFrame() + rectangle_DAC() +\n                contour()\n              </h5>\n              <h5>= O(n) + O(n) + O(n*logn*logn) + O(n))</h5>\n              <h5>= O(n*logn*logn)</h5>\n            </div>\n          </div>\n        </div>\n      </Scrollbars>\n    );\n  }\n}\n\nexport default Document;\n"]},"metadata":{},"sourceType":"module"}