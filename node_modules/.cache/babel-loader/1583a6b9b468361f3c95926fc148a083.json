{"ast":null,"code":"import _objectSpread from\"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import styled from\"styled-components\";import{Scrollbars}from\"rc-scrollbars\";import\"../Document/Document.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var common=[\"We define a frame (rectangle) F that encloses all the iso-rectangles.\",\"For the given set of iso-rectangles, their vertical edges are extracted and stored in a sorted manner as E.\",\"Rectangle dac (E,F) calls the recursive procedure stripes and returns the final set of stripes with their x_union.\",\"We apply a divide and conquer algorithm stripes on the set of edges E, and the given frame F.\",\"When we\"];var Algorithm=/*#__PURE__*/function(_React$Component){_inherits(Algorithm,_React$Component);var _super=_createSuper(Algorithm);function Algorithm(){var _this;_classCallCheck(this,Algorithm);_this=_super.call(this);_this.state={height:\"\"};return _this;}_createClass(Algorithm,[{key:\"componentDidMount\",value:function componentDidMount(){this.setState({height:window.innerHeight});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(Scrollbars,{disableDefaultStyles:true,renderThumbHorizontal:function renderThumbHorizontal(props){return/*#__PURE__*/_jsx(\"div\",_objectSpread(_objectSpread({},props),{},{className:\"vertical\"}));},renderThumbVertical:function renderThumbVertical(props){return/*#__PURE__*/_jsx(\"div\",_objectSpread(_objectSpread({},props),{},{className:\"vertical\"}));},style:{width:\"fill\",height:this.state.height*0.9},children:/*#__PURE__*/_jsxs(\"div\",{style:{color:\"white\"},children:[/*#__PURE__*/_jsx(\"h1\",{style:{color:\"white\",textAlign:\"center\",margin:\"20px\"},children:\"General Discussion on Algorithm\"}),/*#__PURE__*/_jsxs(\"div\",{class:\"container\",children:[/*#__PURE__*/_jsx(\"h4\",{style:{marginTop:\"20px\",marginBottom:\"20px\"},children:\"The algorithm aims to solve the measure and contour problems using the separational representation approach (divide and conquer), as opposed to line-sweep approach.\"}),/*#__PURE__*/_jsx(\"h4\",{style:{marginTop:\"20px\",marginBottom:\"20px\"},children:\"The algorithm proposes that both the contour and measure problems can be solved easily once we have computed an abstract data structure called stripes.\"}),/*#__PURE__*/_jsxs(\"div\",{class:\"row\",children:[/*#__PURE__*/_jsx(\"div\",{class:\"col-3\",style:{border:\"solid\",borderColor:\"tomato\",borderStyle:\"1px\",display:\"flex\",justifyContent:\"center\"},children:/*#__PURE__*/_jsxs(\"h2\",{style:{fontWeight:\"bold\",alignSelf:\"center\"},children:[\"Measure Problem :\",\" \"]})}),/*#__PURE__*/_jsxs(\"div\",{class:\"col\",style:{border:\"solid\",borderColor:\"tomato\",borderStyle:\"1px\"},children:[/*#__PURE__*/_jsx(\"h4\",{style:{},children:\"To find the area of the union of given iso oriented rectangles \"}),/*#__PURE__*/_jsx(\"h4\",{style:{textAlign:\"left\"},children:\"stripe :- { x interval, y interval, integer x_union }\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{class:\"row\",children:[/*#__PURE__*/_jsx(\"div\",{class:\"col-3\",style:{border:\"solid\",borderColor:\"tomato\",borderStyle:\"1px\",display:\"flex\",justifyContent:\"center\"},children:/*#__PURE__*/_jsxs(\"h2\",{style:{fontWeight:\"bold\",alignSelf:\"center\"},children:[\"Contour Problem :\",\" \"]})}),/*#__PURE__*/_jsxs(\"div\",{class:\"col\",style:{border:\"solid\",borderColor:\"tomato\",borderStyle:\"1px\"},children:[/*#__PURE__*/_jsx(\"h4\",{style:{},children:\"To find the boundary between the free and covered areas of the plane defined by the union of rectangles\"}),/*#__PURE__*/_jsx(\"h4\",{style:{textAlign:\"left\"},children:\"stripe : - {x interval, y interval,ctree* tree}\"}),/*#__PURE__*/_jsx(\"h4\",{style:{textAlign:\"left\"},children:\"ctree : - empty | { int x, lru side, ctree *lson, ctree *rson}\"}),/*#__PURE__*/_jsx(\"h4\",{style:{textAlign:\"left\"},children:\"lru :- { left | right | undef }\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{class:\"row\",style:{marginTop:\"40px\"},children:[/*#__PURE__*/_jsxs(\"h2\",{style:{fontWeight:\"bold\"},children:[\" \",\"Common Approach to the Algorithms :\"]}),/*#__PURE__*/_jsx(\"img\",{src:require(\"../Assets/algorithm2.jpeg\"),style:{width:\"-webkit-fill-available\",marginTop:\"40px\"}})]})]})]})});}}]);return Algorithm;}(React.Component);export default Algorithm;","map":{"version":3,"sources":["/home/nishit/WEbsite/src/Algorithm/Algorithm.js"],"names":["React","styled","Scrollbars","common","Algorithm","state","height","setState","window","innerHeight","props","width","color","textAlign","margin","marginTop","marginBottom","border","borderColor","borderStyle","display","justifyContent","fontWeight","alignSelf","require","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Scrollbars } from \"rc-scrollbars\";\nimport \"../Document/Document.css\";\nlet common = [\n  \"We define a frame (rectangle) F that encloses all the iso-rectangles.\",\n  \"For the given set of iso-rectangles, their vertical edges are extracted and stored in a sorted manner as E.\",\n  \"Rectangle dac (E,F) calls the recursive procedure stripes and returns the final set of stripes with their x_union.\",\n  \"We apply a divide and conquer algorithm stripes on the set of edges E, and the given frame F.\",\n  \"When we\"\n];\nclass Algorithm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      height: \"\"\n    };\n  }\n  componentDidMount() {\n    this.setState({ height: window.innerHeight });\n  }\n  render() {\n    return (\n      <Scrollbars\n        disableDefaultStyles\n        renderThumbHorizontal={(props) => (\n          <div {...props} className=\"vertical\" />\n        )}\n        renderThumbVertical={(props) => <div {...props} className=\"vertical\" />}\n        style={{ width: \"fill\", height: this.state.height * 0.9 }}\n      >\n        <div style={{ color: \"white\" }}>\n          <h1 style={{ color: \"white\", textAlign: \"center\", margin: \"20px\" }}>\n            General Discussion on Algorithm\n          </h1>\n\n          <div class=\"container\">\n            <h4 style={{ marginTop: \"20px\", marginBottom: \"20px\" }}>\n              The algorithm aims to solve the measure and contour problems using\n              the separational representation approach (divide and conquer), as\n              opposed to line-sweep approach.\n            </h4>\n            <h4 style={{ marginTop: \"20px\", marginBottom: \"20px\" }}>\n              The algorithm proposes that both the contour and measure problems\n              can be solved easily once we have computed an abstract data\n              structure called stripes.\n            </h4>\n            <div class=\"row\">\n              <div\n                class=\"col-3\"\n                style={{\n                  border: \"solid\",\n                  borderColor: \"tomato\",\n                  borderStyle: \"1px\",\n                  display: \"flex\",\n                  justifyContent: \"center\"\n                }}\n              >\n                <h2 style={{ fontWeight: \"bold\", alignSelf: \"center\" }}>\n                  Measure Problem :{\" \"}\n                </h2>\n              </div>\n              <div\n                class=\"col\"\n                style={{\n                  border: \"solid\",\n                  borderColor: \"tomato\",\n                  borderStyle: \"1px\"\n                }}\n              >\n                <h4 style={{}}>\n                  {\n                    \"To find the area of the union of given iso oriented rectangles \"\n                  }\n                </h4>\n                <h4 style={{ textAlign: \"left\" }}>\n                  {\"stripe :- { x interval, y interval, integer x_union }\"}\n                </h4>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div\n                class=\"col-3\"\n                style={{\n                  border: \"solid\",\n                  borderColor: \"tomato\",\n                  borderStyle: \"1px\",\n                  display: \"flex\",\n                  justifyContent: \"center\"\n                }}\n              >\n                <h2 style={{ fontWeight: \"bold\", alignSelf: \"center\" }}>\n                  Contour Problem :{\" \"}\n                </h2>\n              </div>\n              <div\n                class=\"col\"\n                style={{\n                  border: \"solid\",\n                  borderColor: \"tomato\",\n                  borderStyle: \"1px\"\n                }}\n              >\n                <h4 style={{}}>\n                  {\n                    \"To find the boundary between the free and covered areas of the plane defined by the union of rectangles\"\n                  }\n                </h4>\n                <h4 style={{ textAlign: \"left\" }}>\n                  {\"stripe : - {x interval, y interval,ctree* tree}\"}\n                </h4>\n                <h4 style={{ textAlign: \"left\" }}>\n                  {\n                    \"ctree : - empty | { int x, lru side, ctree *lson, ctree *rson}\"\n                  }\n                </h4>\n                <h4 style={{ textAlign: \"left\" }}>\n                  {\"lru :- { left | right | undef }\"}\n                </h4>\n              </div>\n            </div>\n            <div class=\"row\" style={{ marginTop: \"40px\" }}>\n              <h2 style={{ fontWeight: \"bold\" }}>\n                {\" \"}\n                Common Approach to the Algorithms :\n              </h2>\n              <img\n                src={require(\"../Assets/algorithm2.jpeg\")}\n                style={{ width: \"-webkit-fill-available\", marginTop: \"40px\" }}\n              />\n              {/* <ul>\n                {common.map((item, index) => {\n                  return (\n                    <li key={index}>\n                      <h3>{item}</h3>{\" \"}\n                    </li>\n                  );\n                })}\n              </ul> */}\n            </div>\n          </div>\n        </div>\n      </Scrollbars>\n    );\n  }\n}\n\nexport default Algorithm;\n"]},"metadata":{},"sourceType":"module"}