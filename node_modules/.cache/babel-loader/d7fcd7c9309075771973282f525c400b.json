{"ast":null,"code":"import _objectSpread from \"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/nishit/WEbsite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/nishit/WEbsite/src/Algorithm/Algorithm.js\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Scrollbars } from \"rc-scrollbars\";\nimport \"../Document/Document.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar common = [\"We define a frame (rectangle) F that encloses all the iso-rectangles.\", \"For the given set of iso-rectangles, their vertical edges are extracted and stored in a sorted manner as E.\", \"Rectangle dac (E,F) calls the recursive procedure stripes and returns the final set of stripes with their x_union.\", \"We apply a divide and conquer algorithm stripes on the set of edges E, and the given frame F.\", \"When we\"];\n\nvar Algorithm = /*#__PURE__*/function (_React$Component) {\n  _inherits(Algorithm, _React$Component);\n\n  var _super = _createSuper(Algorithm);\n\n  function Algorithm() {\n    var _this;\n\n    _classCallCheck(this, Algorithm);\n\n    _this = _super.call(this);\n    _this.state = {\n      height: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Algorithm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        height: window.innerHeight\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(Scrollbars, {\n        disableDefaultStyles: true,\n        renderThumbHorizontal: function renderThumbHorizontal(props) {\n          return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, props), {}, {\n            className: \"vertical\"\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 11\n          }, _this2);\n        },\n        renderThumbVertical: function renderThumbVertical(props) {\n          return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, props), {}, {\n            className: \"vertical\"\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 41\n          }, _this2);\n        },\n        style: {\n          width: \"fill\",\n          height: this.state.height * 0.9\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: \"white\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              color: \"white\",\n              textAlign: \"center\",\n              margin: \"20px\"\n            },\n            children: \"General Discussion on Algorithm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              style: {\n                marginTop: \"20px\",\n                marginBottom: \"20px\"\n              },\n              children: \"The algorithm aims to solve the measure and contour problems using the separational representation approach (divide and conquer), as opposed to line-sweep approach.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              style: {\n                marginTop: \"20px\",\n                marginBottom: \"20px\"\n              },\n              children: \"The algorithm proposes that both the contour and measure problems can be solved easily once we have computed an abstract data structure called stripes.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"col-3\",\n                style: {\n                  border: \"solid\",\n                  borderColor: \"tomato\",\n                  borderStyle: \"1px\",\n                  display: \"flex\",\n                  justifyContent: \"center\"\n                },\n                children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                  style: {\n                    fontWeight: \"bold\",\n                    alignSelf: \"center\"\n                  },\n                  children: [\"Measure Problem :\", \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"col\",\n                style: {\n                  border: \"solid\",\n                  borderColor: \"tomato\",\n                  borderStyle: \"1px\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  style: {},\n                  children: \"To find the area of the union of given iso oriented rectangles \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                  style: {\n                    textAlign: \"left\"\n                  },\n                  children: \"stripe :- { x interval, y interval, integer x_union }\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"col-3\",\n                style: {\n                  border: \"solid\",\n                  borderColor: \"tomato\",\n                  borderStyle: \"1px\",\n                  display: \"flex\",\n                  justifyContent: \"center\"\n                },\n                children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                  style: {\n                    fontWeight: \"bold\",\n                    alignSelf: \"center\"\n                  },\n                  children: [\"Contour Problem :\", \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"col\",\n                style: {\n                  border: \"solid\",\n                  borderColor: \"tomato\",\n                  borderStyle: \"1px\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  style: {},\n                  children: \"To find the boundary between the free and covered areas of the plane defined by the union of rectangles\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                  style: {\n                    textAlign: \"left\"\n                  },\n                  children: \"stripe : - {x interval, y interval,ctree* tree}\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                  style: {\n                    textAlign: \"left\"\n                  },\n                  children: \"ctree : - empty | { int x, lru side, ctree *lson, ctree *rson}\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                  style: {\n                    textAlign: \"left\"\n                  },\n                  children: \"lru :- { left | right | undef }\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"row\",\n              style: {\n                marginTop: \"40px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                style: {\n                  fontWeight: \"bold\"\n                },\n                children: [\" \", \"Common Approach to the Algorithms :\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: require(\"../Assets/algorithm2.jpeg\"),\n                style: {\n                  width: \"-webkit-fill-available\",\n                  marginTop: \"40px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Algorithm;\n}(React.Component);\n\nexport default Algorithm;","map":{"version":3,"sources":["/home/nishit/WEbsite/src/Algorithm/Algorithm.js"],"names":["React","styled","Scrollbars","common","Algorithm","state","height","setState","window","innerHeight","props","width","color","textAlign","margin","marginTop","marginBottom","border","borderColor","borderStyle","display","justifyContent","fontWeight","alignSelf","require","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Scrollbars } from \"rc-scrollbars\";\nimport \"../Document/Document.css\";\nlet common = [\n  \"We define a frame (rectangle) F that encloses all the iso-rectangles.\",\n  \"For the given set of iso-rectangles, their vertical edges are extracted and stored in a sorted manner as E.\",\n  \"Rectangle dac (E,F) calls the recursive procedure stripes and returns the final set of stripes with their x_union.\",\n  \"We apply a divide and conquer algorithm stripes on the set of edges E, and the given frame F.\",\n  \"When we\"\n];\nclass Algorithm extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      height: \"\"\n    };\n  }\n  componentDidMount() {\n    this.setState({ height: window.innerHeight });\n  }\n  render() {\n    return (\n      <Scrollbars\n        disableDefaultStyles\n        renderThumbHorizontal={(props) => (\n          <div {...props} className=\"vertical\" />\n        )}\n        renderThumbVertical={(props) => <div {...props} className=\"vertical\" />}\n        style={{ width: \"fill\", height: this.state.height * 0.9 }}\n      >\n        <div style={{ color: \"white\" }}>\n          <h1 style={{ color: \"white\", textAlign: \"center\", margin: \"20px\" }}>\n            General Discussion on Algorithm\n          </h1>\n\n          <div class=\"container\">\n            <h4 style={{ marginTop: \"20px\", marginBottom: \"20px\" }}>\n              The algorithm aims to solve the measure and contour problems using\n              the separational representation approach (divide and conquer), as\n              opposed to line-sweep approach.\n            </h4>\n            <h4 style={{ marginTop: \"20px\", marginBottom: \"20px\" }}>\n              The algorithm proposes that both the contour and measure problems\n              can be solved easily once we have computed an abstract data\n              structure called stripes.\n            </h4>\n            <div class=\"row\">\n              <div\n                class=\"col-3\"\n                style={{\n                  border: \"solid\",\n                  borderColor: \"tomato\",\n                  borderStyle: \"1px\",\n                  display: \"flex\",\n                  justifyContent: \"center\"\n                }}\n              >\n                <h2 style={{ fontWeight: \"bold\", alignSelf: \"center\" }}>\n                  Measure Problem :{\" \"}\n                </h2>\n              </div>\n              <div\n                class=\"col\"\n                style={{\n                  border: \"solid\",\n                  borderColor: \"tomato\",\n                  borderStyle: \"1px\"\n                }}\n              >\n                <h4 style={{}}>\n                  {\n                    \"To find the area of the union of given iso oriented rectangles \"\n                  }\n                </h4>\n                <h4 style={{ textAlign: \"left\" }}>\n                  {\"stripe :- { x interval, y interval, integer x_union }\"}\n                </h4>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div\n                class=\"col-3\"\n                style={{\n                  border: \"solid\",\n                  borderColor: \"tomato\",\n                  borderStyle: \"1px\",\n                  display: \"flex\",\n                  justifyContent: \"center\"\n                }}\n              >\n                <h2 style={{ fontWeight: \"bold\", alignSelf: \"center\" }}>\n                  Contour Problem :{\" \"}\n                </h2>\n              </div>\n              <div\n                class=\"col\"\n                style={{\n                  border: \"solid\",\n                  borderColor: \"tomato\",\n                  borderStyle: \"1px\"\n                }}\n              >\n                <h4 style={{}}>\n                  {\n                    \"To find the boundary between the free and covered areas of the plane defined by the union of rectangles\"\n                  }\n                </h4>\n                <h4 style={{ textAlign: \"left\" }}>\n                  {\"stripe : - {x interval, y interval,ctree* tree}\"}\n                </h4>\n                <h4 style={{ textAlign: \"left\" }}>\n                  {\n                    \"ctree : - empty | { int x, lru side, ctree *lson, ctree *rson}\"\n                  }\n                </h4>\n                <h4 style={{ textAlign: \"left\" }}>\n                  {\"lru :- { left | right | undef }\"}\n                </h4>\n              </div>\n            </div>\n            <div class=\"row\" style={{ marginTop: \"40px\" }}>\n              <h2 style={{ fontWeight: \"bold\" }}>\n                {\" \"}\n                Common Approach to the Algorithms :\n              </h2>\n              <img\n                src={require(\"../Assets/algorithm2.jpeg\")}\n                style={{ width: \"-webkit-fill-available\", marginTop: \"40px\" }}\n              />\n              {/* <ul>\n                {common.map((item, index) => {\n                  return (\n                    <li key={index}>\n                      <h3>{item}</h3>{\" \"}\n                    </li>\n                  );\n                })}\n              </ul> */}\n            </div>\n          </div>\n        </div>\n      </Scrollbars>\n    );\n  }\n}\n\nexport default Algorithm;\n"]},"metadata":{},"sourceType":"module"}